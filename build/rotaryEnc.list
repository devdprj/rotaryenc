
build/rotaryEnc.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <Reset_Handler>:
 8000140:	b672      	cpsid	i
 8000142:	4821      	ldr	r0, [pc, #132]	; (80001c8 <endfiniloop+0x4>)
 8000144:	f380 8809 	msr	PSP, r0
 8000148:	2002      	movs	r0, #2
 800014a:	f380 8814 	msr	CONTROL, r0
 800014e:	f3bf 8f6f 	isb	sy
 8000152:	f002 fa7d 	bl	8002650 <__core_init>
 8000156:	f001 f9a3 	bl	80014a0 <__early_init>
 800015a:	481c      	ldr	r0, [pc, #112]	; (80001cc <endfiniloop+0x8>)
 800015c:	491c      	ldr	r1, [pc, #112]	; (80001d0 <endfiniloop+0xc>)
 800015e:	4a1d      	ldr	r2, [pc, #116]	; (80001d4 <endfiniloop+0x10>)

08000160 <msloop>:
 8000160:	4291      	cmp	r1, r2
 8000162:	bf3c      	itt	cc
 8000164:	f841 0b04 	strcc.w	r0, [r1], #4
 8000168:	e7fa      	bcc.n	8000160 <msloop>
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <endfiniloop+0x14>)
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <endfiniloop+0x4>)

0800016e <psloop>:
 800016e:	4291      	cmp	r1, r2
 8000170:	bf3c      	itt	cc
 8000172:	f841 0b04 	strcc.w	r0, [r1], #4
 8000176:	e7fa      	bcc.n	800016e <psloop>
 8000178:	4918      	ldr	r1, [pc, #96]	; (80001dc <endfiniloop+0x18>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <endfiniloop+0x1c>)
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <endfiniloop+0x20>)

0800017e <dloop>:
 800017e:	429a      	cmp	r2, r3
 8000180:	bf3e      	ittt	cc
 8000182:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000186:	f842 0b04 	strcc.w	r0, [r2], #4
 800018a:	e7f8      	bcc.n	800017e <dloop>
 800018c:	2000      	movs	r0, #0
 800018e:	4916      	ldr	r1, [pc, #88]	; (80001e8 <endfiniloop+0x24>)
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <endfiniloop+0x28>)

08000192 <bloop>:
 8000192:	4291      	cmp	r1, r2
 8000194:	bf3c      	itt	cc
 8000196:	f841 0b04 	strcc.w	r0, [r1], #4
 800019a:	e7fa      	bcc.n	8000192 <bloop>
 800019c:	f002 fa50 	bl	8002640 <__late_init>
 80001a0:	4c13      	ldr	r4, [pc, #76]	; (80001f0 <endfiniloop+0x2c>)
 80001a2:	4d14      	ldr	r5, [pc, #80]	; (80001f4 <endfiniloop+0x30>)

080001a4 <initloop>:
 80001a4:	42ac      	cmp	r4, r5
 80001a6:	da03      	bge.n	80001b0 <endinitloop>
 80001a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001ac:	4788      	blx	r1
 80001ae:	e7f9      	b.n	80001a4 <initloop>

080001b0 <endinitloop>:
 80001b0:	f002 faa6 	bl	8002700 <main>
 80001b4:	4c10      	ldr	r4, [pc, #64]	; (80001f8 <endfiniloop+0x34>)
 80001b6:	4d11      	ldr	r5, [pc, #68]	; (80001fc <endfiniloop+0x38>)

080001b8 <finiloop>:
 80001b8:	42ac      	cmp	r4, r5
 80001ba:	da03      	bge.n	80001c4 <endfiniloop>
 80001bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001c0:	4788      	blx	r1
 80001c2:	e7f9      	b.n	80001b8 <finiloop>

080001c4 <endfiniloop>:
 80001c4:	f002 ba34 	b.w	8002630 <__default_exit>
 80001c8:	20000800 	.word	0x20000800
 80001cc:	55555555 	.word	0x55555555
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000400 	.word	0x20000400
 80001d8:	20000400 	.word	0x20000400
 80001dc:	080038a8 	.word	0x080038a8
 80001e0:	20000800 	.word	0x20000800
 80001e4:	20000834 	.word	0x20000834
 80001e8:	20000838 	.word	0x20000838
 80001ec:	20000f00 	.word	0x20000f00
 80001f0:	08000140 	.word	0x08000140
 80001f4:	08000140 	.word	0x08000140
 80001f8:	08000140 	.word	0x08000140
 80001fc:	08000140 	.word	0x08000140

08000200 <_port_switch>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000208:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000210 <_port_thread_start>:
 8000210:	2300      	movs	r3, #0
 8000212:	f383 8811 	msr	BASEPRI, r3
 8000216:	4628      	mov	r0, r5
 8000218:	47a0      	blx	r4
 800021a:	2000      	movs	r0, #0
 800021c:	f002 f9f8 	bl	8002610 <chThdExit>

08000220 <_port_switch_from_isr>:
 8000220:	f002 f836 	bl	8002290 <chSchDoReschedule>

08000224 <_port_exit_from_isr>:
 8000224:	df00      	svc	0
 8000226:	e7fe      	b.n	8000226 <_port_exit_from_isr+0x2>
	...

08000230 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8000232:	f240 130f 	movw	r3, #271	; 0x10f
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8000236:	4f1d      	ldr	r7, [pc, #116]	; (80002ac <VectorD8+0x7c>)
 8000238:	68be      	ldr	r6, [r7, #8]
  uint32_t cr1 = u->CR1;
 800023a:	89b2      	ldrh	r2, [r6, #12]

  sr = u->SR;   /* SR reset step 1.*/
 800023c:	8834      	ldrh	r4, [r6, #0]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;
 800023e:	b295      	uxth	r5, r2

  sr = u->SR;   /* SR reset step 1.*/
 8000240:	b2a4      	uxth	r4, r4
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8000242:	4023      	ands	r3, r4
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/
 8000244:	88b2      	ldrh	r2, [r6, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8000246:	b1e3      	cbz	r3, 8000282 <VectorD8+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 8000248:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    if (uartp->config->rxerr_cb != NULL)
 800024c:	687b      	ldr	r3, [r7, #4]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 800024e:	8032      	strh	r2, [r6, #0]
    if (uartp->config->rxerr_cb != NULL)
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	b1b3      	cbz	r3, 8000282 <VectorD8+0x52>
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8000254:	f014 0f08 	tst.w	r4, #8
 8000258:	bf0c      	ite	eq
 800025a:	2100      	moveq	r1, #0
 800025c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 800025e:	07e2      	lsls	r2, r4, #31
    sts |= UART_PARITY_ERROR;
 8000260:	bf48      	it	mi
 8000262:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8000266:	07a0      	lsls	r0, r4, #30
    sts |= UART_FRAMING_ERROR;
 8000268:	bf48      	it	mi
 800026a:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 800026e:	0762      	lsls	r2, r4, #29
    sts |= UART_NOISE_ERROR;
 8000270:	bf48      	it	mi
 8000272:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8000276:	05e0      	lsls	r0, r4, #23
    sts |= UART_BREAK_DETECTED;
 8000278:	bf48      	it	mi
 800027a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <VectorD8+0x7c>)
 8000280:	4798      	blx	r3
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8000282:	0662      	lsls	r2, r4, #25
 8000284:	d50d      	bpl.n	80002a2 <VectorD8+0x72>
 8000286:	066b      	lsls	r3, r5, #25
 8000288:	d50b      	bpl.n	80002a2 <VectorD8+0x72>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 800028a:	f64f 71bf 	movw	r1, #65471	; 0xffbf
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800028e:	687a      	ldr	r2, [r7, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000290:	f025 0340 	bic.w	r3, r5, #64	; 0x40

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8000294:	6852      	ldr	r2, [r2, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000296:	b29b      	uxth	r3, r3
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8000298:	8031      	strh	r1, [r6, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800029a:	81b3      	strh	r3, [r6, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800029c:	b10a      	cbz	r2, 80002a2 <VectorD8+0x72>
      uartp->config->txend2_cb(uartp);
 800029e:	4803      	ldr	r0, [pc, #12]	; (80002ac <VectorD8+0x7c>)
 80002a0:	4790      	blx	r2
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
}
 80002a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
 80002a6:	f001 bf8b 	b.w	80021c0 <_port_irq_epilogue>
 80002aa:	bf00      	nop
 80002ac:	20000d28 	.word	0x20000d28

080002b0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80002b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80002b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80002b8:	6923      	ldr	r3, [r4, #16]
 80002ba:	079b      	lsls	r3, r3, #30
 80002bc:	d403      	bmi.n	80002c6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80002be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80002c2:	f001 bf7d 	b.w	80021c0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80002c6:	2700      	movs	r7, #0
 80002c8:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80002ca:	2520      	movs	r5, #32
 80002cc:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80002d0:	4e1e      	ldr	r6, [pc, #120]	; (800034c <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80002d2:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80002d4:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80002d8:	69f3      	ldr	r3, [r6, #28]
 80002da:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80002dc:	ebce 0100 	rsb	r1, lr, r0
 80002e0:	891a      	ldrh	r2, [r3, #8]
 80002e2:	b289      	uxth	r1, r1
 80002e4:	4291      	cmp	r1, r2
 80002e6:	f106 081c 	add.w	r8, r6, #28
 80002ea:	d31b      	bcc.n	8000324 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80002ec:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80002ee:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80002f0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80002f2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80002f4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80002f6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80002fa:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80002fc:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80002fe:	bf08      	it	eq
 8000300:	60e7      	streq	r7, [r4, #12]
 8000302:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000306:	6918      	ldr	r0, [r3, #16]
 8000308:	4790      	blx	r2
 800030a:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800030e:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000310:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000314:	69f3      	ldr	r3, [r6, #28]
 8000316:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000318:	ebce 0100 	rsb	r1, lr, r0
 800031c:	891a      	ldrh	r2, [r3, #8]
 800031e:	b289      	uxth	r1, r1
 8000320:	428a      	cmp	r2, r1
 8000322:	d9e3      	bls.n	80002ec <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000324:	4543      	cmp	r3, r8
 8000326:	d00a      	beq.n	800033e <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000328:	4472      	add	r2, lr
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800032e:	2a01      	cmp	r2, #1
 8000330:	bf98      	it	ls
 8000332:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 8000334:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000336:	b292      	uxth	r2, r2
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	635a      	str	r2, [r3, #52]	; 0x34
 800033e:	2300      	movs	r3, #0
 8000340:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000348:	f001 bf3a 	b.w	80021c0 <_port_irq_epilogue>
 800034c:	20000db0 	.word	0x20000db0

08000350 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000354:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8000356:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000358:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800035c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 800035e:	060c      	lsls	r4, r1, #24
 8000360:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000362:	b10a      	cbz	r2, 8000368 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000364:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000366:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800036c:	f001 bf28 	b.w	80021c0 <_port_irq_epilogue>
 8000370:	40020000 	.word	0x40020000
 8000374:	20000888 	.word	0x20000888
	...

08000380 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8000382:	4808      	ldr	r0, [pc, #32]	; (80003a4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000384:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8000386:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000388:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800038c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 800038e:	050c      	lsls	r4, r1, #20
 8000390:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000392:	b10a      	cbz	r2, 8000398 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000394:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000396:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800039c:	f001 bf10 	b.w	80021c0 <_port_irq_epilogue>
 80003a0:	40020000 	.word	0x40020000
 80003a4:	20000888 	.word	0x20000888
	...

080003b0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80003b2:	4808      	ldr	r0, [pc, #32]	; (80003d4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80003b4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80003b6:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80003b8:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80003bc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 80003be:	040c      	lsls	r4, r1, #16
 80003c0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80003c2:	b10a      	cbz	r2, 80003c8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80003c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003c6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80003c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80003cc:	f001 bef8 	b.w	80021c0 <_port_irq_epilogue>
 80003d0:	40020000 	.word	0x40020000
 80003d4:	20000888 	.word	0x20000888
	...

080003e0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80003e2:	4808      	ldr	r0, [pc, #32]	; (8000404 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80003e4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80003e6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80003e8:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80003ec:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 80003ee:	030c      	lsls	r4, r1, #12
 80003f0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 80003f2:	b10a      	cbz	r2, 80003f8 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80003f4:	69c0      	ldr	r0, [r0, #28]
 80003f6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80003f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80003fc:	f001 bee0 	b.w	80021c0 <_port_irq_epilogue>
 8000400:	40020000 	.word	0x40020000
 8000404:	20000888 	.word	0x20000888
	...

08000410 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8000412:	4808      	ldr	r0, [pc, #32]	; (8000434 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000414:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8000416:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000418:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800041c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 800041e:	020c      	lsls	r4, r1, #8
 8000420:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8000422:	b10a      	cbz	r2, 8000428 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000424:	6940      	ldr	r0, [r0, #20]
 8000426:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800042c:	f001 bec8 	b.w	80021c0 <_port_irq_epilogue>
 8000430:	40020000 	.word	0x40020000
 8000434:	20000888 	.word	0x20000888
	...

08000440 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8000442:	4808      	ldr	r0, [pc, #32]	; (8000464 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000444:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8000446:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000448:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800044c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 800044e:	010c      	lsls	r4, r1, #4
 8000450:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8000452:	b10a      	cbz	r2, 8000458 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000454:	68c0      	ldr	r0, [r0, #12]
 8000456:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800045c:	f001 beb0 	b.w	80021c0 <_port_irq_epilogue>
 8000460:	40020000 	.word	0x40020000
 8000464:	20000888 	.word	0x20000888
	...

08000470 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8000470:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 800047c:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 800047e:	6813      	ldr	r3, [r2, #0]
 8000480:	b10b      	cbz	r3, 8000486 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000482:	6850      	ldr	r0, [r2, #4]
 8000484:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8000486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800048a:	f001 be99 	b.w	80021c0 <_port_irq_epilogue>
 800048e:	bf00      	nop
 8000490:	40020000 	.word	0x40020000
 8000494:	20000888 	.word	0x20000888
	...

080004a0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80004a0:	4a41      	ldr	r2, [pc, #260]	; (80005a8 <VectorBC+0x108>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80004a2:	b538      	push	{r3, r4, r5, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80004a4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80004a6:	4941      	ldr	r1, [pc, #260]	; (80005ac <VectorBC+0x10c>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 80004a8:	8b23      	ldrh	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80004aa:	8aa5      	ldrh	r5, [r4, #20]
 80004ac:	b2ad      	uxth	r5, r5

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80004ae:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80004b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d052      	beq.n	8000560 <VectorBC+0xc0>
 80004ba:	d821      	bhi.n	8000500 <VectorBC+0x60>
 80004bc:	3907      	subs	r1, #7
 80004be:	428b      	cmp	r3, r1
 80004c0:	d042      	beq.n	8000548 <VectorBC+0xa8>
 80004c2:	3101      	adds	r1, #1
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d113      	bne.n	80004f0 <VectorBC+0x50>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80004c8:	88a3      	ldrh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80004ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80004cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004d0:	041b      	lsls	r3, r3, #16
    dmaStreamEnable(i2cp->dmarx);
 80004d2:	6812      	ldr	r2, [r2, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80004d4:	0c1b      	lsrs	r3, r3, #16
 80004d6:	80a3      	strh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80004d8:	6813      	ldr	r3, [r2, #0]
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80004e0:	88a3      	ldrh	r3, [r4, #4]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e8:	80a3      	strh	r3, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80004ea:	6853      	ldr	r3, [r2, #4]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d954      	bls.n	800059a <VectorBC+0xfa>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80004f0:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 80004f4:	bf18      	it	ne
 80004f6:	8b23      	ldrhne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 80004f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80004fc:	f001 be60 	b.w	80021c0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8000500:	492b      	ldr	r1, [pc, #172]	; (80005b0 <VectorBC+0x110>)
 8000502:	428b      	cmp	r3, r1
 8000504:	d013      	beq.n	800052e <VectorBC+0x8e>
 8000506:	3102      	adds	r1, #2
 8000508:	428b      	cmp	r3, r1
 800050a:	d1f1      	bne.n	80004f0 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800050c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6859      	ldr	r1, [r3, #4]
 8000512:	b351      	cbz	r1, 800056a <VectorBC+0xca>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000514:	8823      	ldrh	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8000516:	8c11      	ldrh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000518:	b29b      	uxth	r3, r3
 800051a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800051e:	f041 0101 	orr.w	r1, r1, #1
 8000522:	8411      	strh	r1, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000524:	8023      	strh	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8000526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 800052a:	f001 be49 	b.w	80021c0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800052e:	88a3      	ldrh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8000530:	6b12      	ldr	r2, [r2, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000532:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000536:	041b      	lsls	r3, r3, #16
    dmaStreamEnable(i2cp->dmatx);
 8000538:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	80a3      	strh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800053e:	6813      	ldr	r3, [r2, #0]
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e7d3      	b.n	80004f0 <VectorBC+0x50>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 8000548:	8c13      	ldrh	r3, [r2, #32]
 800054a:	0a1a      	lsrs	r2, r3, #8
 800054c:	d00b      	beq.n	8000566 <VectorBC+0xc6>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000556:	f002 0206 	and.w	r2, r2, #6
 800055a:	4313      	orrs	r3, r2
 800055c:	8223      	strh	r3, [r4, #16]
 800055e:	e7c7      	b.n	80004f0 <VectorBC+0x50>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8000560:	8c13      	ldrh	r3, [r2, #32]
 8000562:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8000566:	8223      	strh	r3, [r4, #16]
 8000568:	e7c2      	b.n	80004f0 <VectorBC+0x50>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800056a:	88a3      	ldrh	r3, [r4, #4]
 800056c:	2020      	movs	r0, #32
 800056e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000572:	041b      	lsls	r3, r3, #16
 8000574:	0c1b      	lsrs	r3, r3, #16
 8000576:	80a3      	strh	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8000578:	8823      	ldrh	r3, [r4, #0]
 800057a:	b29b      	uxth	r3, r3
 800057c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000580:	8023      	strh	r3, [r4, #0]
 8000582:	f380 8811 	msr	BASEPRI, r0
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000586:	69d0      	ldr	r0, [r2, #28]
 8000588:	b118      	cbz	r0, 8000592 <VectorBC+0xf2>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800058a:	6201      	str	r1, [r0, #32]
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800058c:	61d1      	str	r1, [r2, #28]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800058e:	f001 fe97 	bl	80022c0 <chSchReadyI>
 8000592:	2300      	movs	r3, #0
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	e7aa      	b.n	80004f0 <VectorBC+0x50>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800059a:	8823      	ldrh	r3, [r4, #0]
 800059c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	0c1b      	lsrs	r3, r3, #16
 80005a4:	8023      	strh	r3, [r4, #0]
 80005a6:	e7a3      	b.n	80004f0 <VectorBC+0x50>
 80005a8:	20000d70 	.word	0x20000d70
 80005ac:	00030008 	.word	0x00030008
 80005b0:	00070082 	.word	0x00070082
	...

080005c0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80005c0:	4938      	ldr	r1, [pc, #224]	; (80006a4 <VectorC0+0xe4>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80005c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80005c4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80005c6:	6b0d      	ldr	r5, [r1, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80005c8:	8a82      	ldrh	r2, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80005ca:	682f      	ldr	r7, [r5, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80005cc:	b292      	uxth	r2, r2

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80005ce:	f402 435f 	and.w	r3, r2, #57088	; 0xdf00
 80005d2:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80005d6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80005da:	8283      	strh	r3, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80005dc:	683e      	ldr	r6, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80005de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80005e0:	f026 060f 	bic.w	r6, r6, #15
 80005e4:	603e      	str	r6, [r7, #0]
 80005e6:	7a2e      	ldrb	r6, [r5, #8]
 80005e8:	240f      	movs	r4, #15
 80005ea:	686d      	ldr	r5, [r5, #4]
 80005ec:	fa04 f706 	lsl.w	r7, r4, r6
  dmaStreamDisable(i2cp->dmarx);
 80005f0:	681e      	ldr	r6, [r3, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80005f2:	602f      	str	r7, [r5, #0]
  dmaStreamDisable(i2cp->dmarx);
 80005f4:	6835      	ldr	r5, [r6, #0]
 80005f6:	685f      	ldr	r7, [r3, #4]
 80005f8:	f025 050f 	bic.w	r5, r5, #15
 80005fc:	6035      	str	r5, [r6, #0]
 80005fe:	7a1d      	ldrb	r5, [r3, #8]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8000600:	f402 7380 	and.w	r3, r2, #256	; 0x100
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8000604:	40ac      	lsls	r4, r5

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8000606:	b29b      	uxth	r3, r3
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8000608:	603c      	str	r4, [r7, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800060a:	2b00      	cmp	r3, #0
 800060c:	d142      	bne.n	8000694 <VectorC0+0xd4>

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;
 800060e:	608b      	str	r3, [r1, #8]

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8000610:	0594      	lsls	r4, r2, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8000612:	bf44      	itt	mi
 8000614:	f043 0302 	orrmi.w	r3, r3, #2
 8000618:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800061a:	0557      	lsls	r7, r2, #21
 800061c:	d50d      	bpl.n	800063a <VectorC0+0x7a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800061e:	8884      	ldrh	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 8000620:	f043 0304 	orr.w	r3, r3, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8000624:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8000628:	0424      	lsls	r4, r4, #16
 800062a:	0c24      	lsrs	r4, r4, #16
 800062c:	8084      	strh	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800062e:	8804      	ldrh	r4, [r0, #0]
 8000630:	b2a4      	uxth	r4, r4
 8000632:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8000636:	8004      	strh	r4, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8000638:	608b      	str	r3, [r1, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800063a:	0516      	lsls	r6, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 800063c:	bf44      	itt	mi
 800063e:	f043 0308 	orrmi.w	r3, r3, #8
 8000642:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8000644:	0455      	lsls	r5, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 8000646:	bf44      	itt	mi
 8000648:	f043 0320 	orrmi.w	r3, r3, #32
 800064c:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800064e:	04d4      	lsls	r4, r2, #19
 8000650:	d518      	bpl.n	8000684 <VectorC0+0xc4>
    i2cp->errors |= I2C_PEC_ERROR;
 8000652:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8000656:	0410      	lsls	r0, r2, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8000658:	608b      	str	r3, [r1, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800065a:	d41f      	bmi.n	800069c <VectorC0+0xdc>
 800065c:	2320      	movs	r3, #32
 800065e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000662:	69c8      	ldr	r0, [r1, #28]
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <VectorC0+0xe4>)
 8000666:	b130      	cbz	r0, 8000676 <VectorC0+0xb6>

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000668:	f06f 0201 	mvn.w	r2, #1
 800066c:	6202      	str	r2, [r0, #32]
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000672:	f001 fe25 	bl	80022c0 <chSchReadyI>
 8000676:	2300      	movs	r3, #0
 8000678:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800067c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8000680:	f001 bd9e 	b.w	80021c0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8000684:	0412      	lsls	r2, r2, #16
 8000686:	d409      	bmi.n	800069c <VectorC0+0xdc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1e7      	bne.n	800065c <VectorC0+0x9c>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 800068c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8000690:	f001 bd96 	b.w	80021c0 <_port_irq_epilogue>
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8000694:	2401      	movs	r4, #1
 8000696:	4623      	mov	r3, r4
 8000698:	608c      	str	r4, [r1, #8]
 800069a:	e7b9      	b.n	8000610 <VectorC0+0x50>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 800069c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a0:	608b      	str	r3, [r1, #8]
 80006a2:	e7db      	b.n	800065c <VectorC0+0x9c>
 80006a4:	20000d70 	.word	0x20000d70
	...

080006b0 <usb_packet_write_from_queue.lto_priv.49>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80006b2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80006b4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80006b8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 80006bc:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 80006c0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80006c4:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 80006c6:	d018      	beq.n	80006fa <usb_packet_write_from_queue.lto_priv.49+0x4a>
 80006c8:	4677      	mov	r7, lr
 80006ca:	4664      	mov	r4, ip
 80006cc:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80006ce:	6988      	ldr	r0, [r1, #24]
 80006d0:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 80006d2:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80006d4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80006d6:	bf28      	it	cs
 80006d8:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80006da:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80006dc:	1c5d      	adds	r5, r3, #1
 80006de:	618d      	str	r5, [r1, #24]
 80006e0:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 80006e2:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80006e4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80006e8:	bf24      	itt	cs
 80006ea:	68c8      	ldrcs	r0, [r1, #12]
 80006ec:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80006ee:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 80006f0:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80006f4:	d1eb      	bne.n	80006ce <usb_packet_write_from_queue.lto_priv.49+0x1e>
 80006f6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80006fa:	07d3      	lsls	r3, r2, #31
 80006fc:	d50b      	bpl.n	8000716 <usb_packet_write_from_queue.lto_priv.49+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80006fe:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8000700:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8000702:	1c43      	adds	r3, r0, #1
 8000704:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8000706:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8000708:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800070a:	bf28      	it	cs
 800070c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800070e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8000712:	bf28      	it	cs
 8000714:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8000716:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 800071a:	b9cb      	cbnz	r3, 8000750 <usb_packet_write_from_queue.lto_priv.49+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800071c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000720:	2320      	movs	r3, #32
 8000722:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8000726:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8000728:	4608      	mov	r0, r1
 800072a:	441a      	add	r2, r3
 800072c:	608a      	str	r2, [r1, #8]
 800072e:	2100      	movs	r1, #0
 8000730:	f001 ff36 	bl	80025a0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000734:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8000738:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800073c:	b11c      	cbz	r4, 8000746 <usb_packet_write_from_queue.lto_priv.49+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800073e:	2300      	movs	r3, #0
 8000740:	f383 8811 	msr	BASEPRI, r3
 8000744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8000746:	f001 fdab 	bl	80022a0 <chSchRescheduleS>
 800074a:	f384 8811 	msr	BASEPRI, r4
 800074e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000750:	688b      	ldr	r3, [r1, #8]
 8000752:	4608      	mov	r0, r1
 8000754:	441a      	add	r2, r3
 8000756:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8000758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800075c:	2100      	movs	r1, #0
 800075e:	f001 bf1f 	b.w	80025a0 <chThdDequeueAllI>
 8000762:	bf00      	nop
	...

08000770 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000770:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8000772:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000774:	fa02 f301 	lsl.w	r3, r2, r1
 8000778:	8904      	ldrh	r4, [r0, #8]
 800077a:	b29b      	uxth	r3, r3
 800077c:	ea13 0504 	ands.w	r5, r3, r4
 8000780:	d002      	beq.n	8000788 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000782:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 8000784:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000786:	4770      	bx	lr
 8000788:	0089      	lsls	r1, r1, #2
 800078a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800078e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000792:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000794:	4323      	orrs	r3, r4
 8000796:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800079a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800079e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80007a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007aa:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 80007ac:	4628      	mov	r0, r5
}
 80007ae:	bc30      	pop	{r4, r5}
 80007b0:	600a      	str	r2, [r1, #0]
 80007b2:	4770      	bx	lr
	...

080007c0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80007c0:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80007c4:	b538      	push	{r3, r4, r5, lr}
 80007c6:	2a06      	cmp	r2, #6
 80007c8:	d80a      	bhi.n	80007e0 <_usb_ep0out+0x20>
 80007ca:	2301      	movs	r3, #1
 80007cc:	4093      	lsls	r3, r2
 80007ce:	f013 0f67 	tst.w	r3, #103	; 0x67
 80007d2:	4604      	mov	r4, r0
 80007d4:	d111      	bne.n	80007fa <_usb_ep0out+0x3a>
 80007d6:	f013 0508 	ands.w	r5, r3, #8
 80007da:	d102      	bne.n	80007e2 <_usb_ep0out+0x22>
 80007dc:	06db      	lsls	r3, r3, #27
 80007de:	d42e      	bmi.n	800083e <_usb_ep0out+0x7e>
 80007e0:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 80007e2:	68c3      	ldr	r3, [r0, #12]
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f9      	bne.n	80007e0 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 80007ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80007ee:	b103      	cbz	r3, 80007f2 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 80007f0:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80007fc:	6841      	ldr	r1, [r0, #4]
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	680d      	ldr	r5, [r1, #0]
 8000802:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800080a:	f083 0310 	eor.w	r3, r3, #16
 800080e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000816:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000818:	6813      	ldr	r3, [r2, #0]
 800081a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800081e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000822:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	b10d      	cbz	r5, 8000836 <_usb_ep0out+0x76>
 8000832:	2105      	movs	r1, #5
 8000834:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000836:	2306      	movs	r3, #6
 8000838:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800083c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800083e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000840:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000842:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000844:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000846:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800084a:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800084c:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800084e:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000850:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000852:	f000 fe6d 	bl	8001530 <usb_lld_prepare_transmit>
 8000856:	2320      	movs	r3, #32
 8000858:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 800085c:	4620      	mov	r0, r4
 800085e:	4629      	mov	r1, r5
 8000860:	f7ff ff86 	bl	8000770 <usbStartTransmitI>
 8000864:	f385 8811 	msr	BASEPRI, r5
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	bf00      	nop
 800086c:	40005c00 	.word	0x40005c00

08000870 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000870:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8000872:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000874:	fa02 f301 	lsl.w	r3, r2, r1
 8000878:	8944      	ldrh	r4, [r0, #10]
 800087a:	b29b      	uxth	r3, r3
 800087c:	ea13 0504 	ands.w	r5, r3, r4
 8000880:	d002      	beq.n	8000888 <usbStartReceiveI+0x18>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000882:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
 8000884:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000886:	4770      	bx	lr
 8000888:	0089      	lsls	r1, r1, #2
 800088a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800088e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000892:	680a      	ldr	r2, [r1, #0]

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000894:	4323      	orrs	r3, r4
 8000896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800089a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800089e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80008a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008aa:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return false;
 80008ac:	4628      	mov	r0, r5
}
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	600a      	str	r2, [r1, #0]
 80008b2:	4770      	bx	lr
	...

080008c0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80008c0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80008c2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80008c6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80008c8:	2b06      	cmp	r3, #6
 80008ca:	d826      	bhi.n	800091a <_usb_ep0in+0x5a>
 80008cc:	e8df f003 	tbb	[pc, r3]
 80008d0:	042d4504 	.word	0x042d4504
 80008d4:	2604      	.short	0x2604
 80008d6:	04          	.byte	0x04
 80008d7:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80008d8:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <_usb_ep0in+0xe8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80008da:	6841      	ldr	r1, [r0, #4]
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	680d      	ldr	r5, [r1, #0]
 80008e0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80008e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008e8:	f083 0310 	eor.w	r3, r3, #16
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80008fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	b10d      	cbz	r5, 8000914 <_usb_ep0in+0x54>
 8000910:	2105      	movs	r1, #5
 8000912:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000914:	2306      	movs	r3, #6
 8000916:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800091a:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 800091c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800091e:	b103      	cbz	r3, 8000922 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 8000920:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000922:	2300      	movs	r3, #0
 8000924:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000928:	bd38      	pop	{r3, r4, r5, pc}
 800092a:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800092c:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 800092e:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8000930:	2203      	movs	r2, #3
 8000932:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000936:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000938:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800093a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800093c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800093e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000940:	4620      	mov	r0, r4
 8000942:	f000 fe35 	bl	80015b0 <usb_lld_prepare_receive>
 8000946:	2320      	movs	r3, #32
 8000948:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 800094c:	4620      	mov	r0, r4
 800094e:	4629      	mov	r1, r5
 8000950:	f7ff ff8e 	bl	8000870 <usbStartReceiveI>
 8000954:	f385 8811 	msr	BASEPRI, r5
 8000958:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800095a:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 800095e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000962:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8000964:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000968:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800096a:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800096c:	d9de      	bls.n	800092c <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800096e:	8a1d      	ldrh	r5, [r3, #16]
 8000970:	fbb1 f2f5 	udiv	r2, r1, r5
 8000974:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000978:	2d00      	cmp	r5, #0
 800097a:	d1d7      	bne.n	800092c <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800097c:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800097e:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000980:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000982:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000984:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000986:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000988:	f000 fdd2 	bl	8001530 <usb_lld_prepare_transmit>
 800098c:	2320      	movs	r3, #32
 800098e:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000992:	4620      	mov	r0, r4
 8000994:	4629      	mov	r1, r5
 8000996:	f7ff feeb 	bl	8000770 <usbStartTransmitI>
 800099a:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800099e:	2302      	movs	r3, #2
 80009a0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009a4:	bd38      	pop	{r3, r4, r5, pc}
 80009a6:	bf00      	nop
 80009a8:	40005c00 	.word	0x40005c00
 80009ac:	00000000 	.word	0x00000000

080009b0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 80009b4:	4bbc      	ldr	r3, [pc, #752]	; (8000ca8 <_usb_ep0setup+0x2f8>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80009b6:	2200      	movs	r2, #0
 80009b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009ba:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80009be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80009c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80009c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80009ca:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80009cc:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 80009ce:	f100 0274 	add.w	r2, r0, #116	; 0x74
 80009d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80009d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80009e0:	f853 1b04 	ldr.w	r1, [r3], #4
 80009e4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 80009e8:	42b2      	cmp	r2, r6
 80009ea:	d1f9      	bne.n	80009e0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80009ec:	6863      	ldr	r3, [r4, #4]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	b36b      	cbz	r3, 8000a4e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80009f2:	4620      	mov	r0, r4
 80009f4:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80009f6:	b350      	cbz	r0, 8000a4e <_usb_ep0setup+0x9e>
 80009f8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80009fa:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80009fe:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8000a02:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 8000a06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8000a0a:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8000a0c:	bf3c      	itt	cc
 8000a0e:	4615      	movcc	r5, r2
 8000a10:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000a12:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a16:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000a18:	f040 80b2 	bne.w	8000b80 <_usb_ep0setup+0x1d0>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8000a1c:	2d00      	cmp	r5, #0
 8000a1e:	f040 8097 	bne.w	8000b50 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a22:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8000a24:	2205      	movs	r2, #5
 8000a26:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000a2a:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000a2c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000a2e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000a30:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000a32:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000a34:	4629      	mov	r1, r5
 8000a36:	f000 fd7b 	bl	8001530 <usb_lld_prepare_transmit>
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000a40:	4620      	mov	r0, r4
 8000a42:	4629      	mov	r1, r5
 8000a44:	f7ff fe94 	bl	8000770 <usbStartTransmitI>
 8000a48:	f385 8811 	msr	BASEPRI, r5
 8000a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000a4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000a52:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8000a56:	d022      	beq.n	8000a9e <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000a58:	4a93      	ldr	r2, [pc, #588]	; (8000ca8 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000a5a:	6861      	ldr	r1, [r4, #4]
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	680d      	ldr	r5, [r1, #0]
 8000a60:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a68:	f083 0310 	eor.w	r3, r3, #16
 8000a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000a76:	6813      	ldr	r3, [r2, #0]
 8000a78:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	b115      	cbz	r5, 8000a96 <_usb_ep0setup+0xe6>
 8000a90:	4620      	mov	r0, r4
 8000a92:	2105      	movs	r1, #5
 8000a94:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000a96:	2306      	movs	r3, #6
 8000a98:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000a9e:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000aa6:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000aaa:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8000aae:	f000 811a 	beq.w	8000ce6 <_usb_ep0setup+0x336>
 8000ab2:	d918      	bls.n	8000ae6 <_usb_ep0setup+0x136>
 8000ab4:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8000ab8:	f000 80fc 	beq.w	8000cb4 <_usb_ep0setup+0x304>
 8000abc:	f240 808f 	bls.w	8000bde <_usb_ep0setup+0x22e>
 8000ac0:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8000ac4:	f000 8099 	beq.w	8000bfa <_usb_ep0setup+0x24a>
 8000ac8:	f640 4202 	movw	r2, #3074	; 0xc02
 8000acc:	4295      	cmp	r5, r2
 8000ace:	f000 80e3 	beq.w	8000c98 <_usb_ep0setup+0x2e8>
 8000ad2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000ad6:	d1bf      	bne.n	8000a58 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000ad8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8000adc:	2501      	movs	r5, #1
 8000ade:	6727      	str	r7, [r4, #112]	; 0x70
 8000ae0:	66a2      	str	r2, [r4, #104]	; 0x68
 8000ae2:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000ae4:	e78b      	b.n	80009fe <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000ae6:	2d02      	cmp	r5, #2
 8000ae8:	f000 810d 	beq.w	8000d06 <_usb_ep0setup+0x356>
 8000aec:	f240 80ca 	bls.w	8000c84 <_usb_ep0setup+0x2d4>
 8000af0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000af4:	f000 8094 	beq.w	8000c20 <_usb_ep0setup+0x270>
 8000af8:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 8000afc:	d1ac      	bne.n	8000a58 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000afe:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d1a8      	bne.n	8000a58 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000b06:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000b0a:	f011 020f 	ands.w	r2, r1, #15
 8000b0e:	d01a      	beq.n	8000b46 <_usb_ep0setup+0x196>
 8000b10:	0092      	lsls	r2, r2, #2
 8000b12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000b16:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000b1a:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000b1e:	6811      	ldr	r1, [r2, #0]
 8000b20:	f040 8115 	bne.w	8000d4e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000b24:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8000b28:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8000b2c:	d00b      	beq.n	8000b46 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b38:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000b46:	2500      	movs	r5, #0
 8000b48:	66a5      	str	r5, [r4, #104]	; 0x68
 8000b4a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000b4c:	6725      	str	r5, [r4, #112]	; 0x70
 8000b4e:	e756      	b.n	80009fe <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000b50:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000b52:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000b54:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8000b56:	2104      	movs	r1, #4
 8000b58:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000b5c:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 8000b5e:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8000b60:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000b62:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000b64:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000b66:	4631      	mov	r1, r6
 8000b68:	f000 fd22 	bl	80015b0 <usb_lld_prepare_receive>
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000b72:	4620      	mov	r0, r4
 8000b74:	4631      	mov	r1, r6
 8000b76:	f7ff fe7b 	bl	8000870 <usbStartReceiveI>
 8000b7a:	f386 8811 	msr	BASEPRI, r6
 8000b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000b80:	b1bd      	cbz	r5, 8000bb2 <_usb_ep0setup+0x202>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000b82:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000b84:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000b86:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000b88:	2101      	movs	r1, #1
 8000b8a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000b8e:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8000b90:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8000b92:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000b94:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000b96:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000b98:	4631      	mov	r1, r6
 8000b9a:	f000 fcc9 	bl	8001530 <usb_lld_prepare_transmit>
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	4631      	mov	r1, r6
 8000ba8:	f7ff fde2 	bl	8000770 <usbStartTransmitI>
 8000bac:	f386 8811 	msr	BASEPRI, r6
 8000bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000bb2:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000bba:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000bbc:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8000bbe:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000bc0:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000bc2:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f000 fcf3 	bl	80015b0 <usb_lld_prepare_receive>
 8000bca:	2320      	movs	r3, #32
 8000bcc:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	f7ff fe4c 	bl	8000870 <usbStartReceiveI>
 8000bd8:	f385 8811 	msr	BASEPRI, r5
 8000bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000bde:	f240 3202 	movw	r2, #770	; 0x302
 8000be2:	4295      	cmp	r5, r2
 8000be4:	d02c      	beq.n	8000c40 <_usb_ep0setup+0x290>
 8000be6:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8000bea:	f47f af35 	bne.w	8000a58 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <_usb_ep0setup+0x2fc>)
 8000bf0:	66a7      	str	r7, [r4, #104]	; 0x68
 8000bf2:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000bf4:	463d      	mov	r5, r7
 8000bf6:	6722      	str	r2, [r4, #112]	; 0x70
 8000bf8:	e701      	b.n	80009fe <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8000bfa:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000bfe:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	f040 8095 	bne.w	8000d32 <_usb_ep0setup+0x382>
      usbp->state = USB_SELECTED;
 8000c08:	2203      	movs	r2, #3
 8000c0a:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000c0c:	6862      	ldr	r2, [r4, #4]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d098      	beq.n	8000b46 <_usb_ep0setup+0x196>
 8000c14:	4620      	mov	r0, r4
 8000c16:	2102      	movs	r1, #2
 8000c18:	4790      	blx	r2
 8000c1a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000c1e:	e792      	b.n	8000b46 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000c20:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000c24:	2a01      	cmp	r2, #1
 8000c26:	f47f af17 	bne.w	8000a58 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 8000c2a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c2e:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000c30:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c34:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000c36:	6727      	str	r7, [r4, #112]	; 0x70
 8000c38:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8000c3a:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000c3e:	e6de      	b.n	80009fe <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000c40:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f47f af07 	bne.w	8000a58 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000c4a:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 8000c4e:	f011 020f 	ands.w	r2, r1, #15
 8000c52:	f43f af78 	beq.w	8000b46 <_usb_ep0setup+0x196>
 8000c56:	0093      	lsls	r3, r2, #2
 8000c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c5c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000c60:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f100 8087 	bmi.w	8000d76 <_usb_ep0setup+0x3c6>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c70:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000c82:	e760      	b.n	8000b46 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000c84:	b92d      	cbnz	r5, 8000c92 <_usb_ep0setup+0x2e2>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000c86:	2202      	movs	r2, #2
 8000c88:	6725      	str	r5, [r4, #112]	; 0x70
 8000c8a:	66a6      	str	r6, [r4, #104]	; 0x68
 8000c8c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000c8e:	4615      	mov	r5, r2
 8000c90:	e6b5      	b.n	80009fe <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000c92:	2d01      	cmp	r5, #1
 8000c94:	f47f aee0 	bne.w	8000a58 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000c98:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <_usb_ep0setup+0x300>)
 8000c9a:	2502      	movs	r5, #2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	66a1      	str	r1, [r4, #104]	; 0x68
 8000ca0:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000ca2:	6722      	str	r2, [r4, #112]	; 0x70
 8000ca4:	e6ab      	b.n	80009fe <_usb_ep0setup+0x4e>
 8000ca6:	bf00      	nop
 8000ca8:	40005c00 	.word	0x40005c00
 8000cac:	08001b61 	.word	0x08001b61
 8000cb0:	08003210 	.word	0x08003210
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000cb4:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000cb6:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8000cba:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000cbe:	684d      	ldr	r5, [r1, #4]
 8000cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000cca:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cce:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	f43f aec1 	beq.w	8000a58 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000cd6:	6843      	ldr	r3, [r0, #4]
 8000cd8:	6805      	ldr	r5, [r0, #0]
 8000cda:	66a3      	str	r3, [r4, #104]	; 0x68
 8000cdc:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000cde:	6727      	str	r7, [r4, #112]	; 0x70
 8000ce0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000ce4:	e68b      	b.n	80009fe <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000ce6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000cea:	2a01      	cmp	r2, #1
 8000cec:	f47f aeb4 	bne.w	8000a58 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 8000cf0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cf4:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000cf6:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000cfa:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000cfc:	6727      	str	r7, [r4, #112]	; 0x70
 8000cfe:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000d00:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000d04:	e67b      	b.n	80009fe <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000d06:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000d0a:	4922      	ldr	r1, [pc, #136]	; (8000d94 <_usb_ep0setup+0x3e4>)
 8000d0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000d10:	f002 020f 	and.w	r2, r2, #15
 8000d14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d18:	d10e      	bne.n	8000d38 <_usb_ep0setup+0x388>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8000d1a:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8000d1e:	f43f ae9b 	beq.w	8000a58 <_usb_ep0setup+0xa8>
 8000d22:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000d26:	d10d      	bne.n	8000d44 <_usb_ep0setup+0x394>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <_usb_ep0setup+0x3e8>)
 8000d2a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000d2c:	6727      	str	r7, [r4, #112]	; 0x70
 8000d2e:	66a2      	str	r2, [r4, #104]	; 0x68
 8000d30:	e665      	b.n	80009fe <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8000d32:	2204      	movs	r2, #4
 8000d34:	7022      	strb	r2, [r4, #0]
 8000d36:	e769      	b.n	8000c0c <_usb_ep0setup+0x25c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000d38:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000d3c:	f43f ae8c 	beq.w	8000a58 <_usb_ep0setup+0xa8>
 8000d40:	2a10      	cmp	r2, #16
 8000d42:	d0f1      	beq.n	8000d28 <_usb_ep0setup+0x378>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <_usb_ep0setup+0x3ec>)
 8000d46:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000d48:	6727      	str	r7, [r4, #112]	; 0x70
 8000d4a:	66a2      	str	r2, [r4, #104]	; 0x68
 8000d4c:	e657      	b.n	80009fe <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000d4e:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000d52:	2930      	cmp	r1, #48	; 0x30
 8000d54:	f43f aef7 	beq.w	8000b46 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d62:	f083 0320 	eor.w	r3, r3, #32
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000d74:	e6e7      	b.n	8000b46 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000d76:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7e:	f082 0210 	eor.w	r2, r2, #16
 8000d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000d90:	e6d9      	b.n	8000b46 <_usb_ep0setup+0x196>
 8000d92:	bf00      	nop
 8000d94:	40005c00 	.word	0x40005c00
 8000d98:	08003230 	.word	0x08003230
 8000d9c:	08003220 	.word	0x08003220

08000da0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000da0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8000da2:	b570      	push	{r4, r5, r6, lr}
 8000da4:	4614      	mov	r4, r2
 8000da6:	4606      	mov	r6, r0
 8000da8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000daa:	b123      	cbz	r3, 8000db6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8000dac:	4618      	mov	r0, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	2210      	movs	r2, #16
 8000db2:	f002 f975 	bl	80030a0 <memset>
  }
  if (epcp->out_state != NULL) {
 8000db6:	69a0      	ldr	r0, [r4, #24]
 8000db8:	b118      	cbz	r0, 8000dc2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	f002 f96f 	bl	80030a0 <memset>
  }

  usbp->epc[ep] = epcp;
 8000dc2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000dc6:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000dc8:	4630      	mov	r0, r6
 8000dca:	4629      	mov	r1, r5
}
 8000dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000dd0:	f000 bc56 	b.w	8001680 <usb_lld_init_endpoint>
	...

08000de0 <get_descriptor.lto_priv.39>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8000de0:	2902      	cmp	r1, #2
 8000de2:	d006      	beq.n	8000df2 <get_descriptor.lto_priv.39+0x12>
 8000de4:	2903      	cmp	r1, #3
 8000de6:	d006      	beq.n	8000df6 <get_descriptor.lto_priv.39+0x16>
 8000de8:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <get_descriptor.lto_priv.39+0x24>)
 8000dec:	bf18      	it	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <get_descriptor.lto_priv.39+0x28>)
 8000df4:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8000df6:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8000df8:	bf9a      	itte	ls
 8000dfa:	4b04      	ldrls	r3, [pc, #16]	; (8000e0c <get_descriptor.lto_priv.39+0x2c>)
 8000dfc:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8000e00:	2000      	movhi	r0, #0
}
 8000e02:	4770      	bx	lr
 8000e04:	08003640 	.word	0x08003640
 8000e08:	08003320 	.word	0x08003320
 8000e0c:	08003620 	.word	0x08003620

08000e10 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8000e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e14:	4681      	mov	r9, r0
 8000e16:	468a      	mov	sl, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8000e18:	468b      	mov	fp, r1
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	4615      	mov	r5, r2
 8000e1e:	f10d 030d 	add.w	r3, sp, #13
 8000e22:	aa03      	add	r2, sp, #12
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8000e28:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8000e2c:	f89b 1000 	ldrb.w	r1, [fp]
 8000e30:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8000e34:	b179      	cbz	r1, 8000e56 <chvprintf+0x46>
      return n;
    if (c != '%') {
 8000e36:	2925      	cmp	r1, #37	; 0x25
 8000e38:	d011      	beq.n	8000e5e <chvprintf+0x4e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8000e3a:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8000e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8000e40:	4648      	mov	r0, r9
 8000e42:	6892      	ldr	r2, [r2, #8]
 8000e44:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8000e46:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8000e4a:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8000e4e:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d1ef      	bne.n	8000e36 <chvprintf+0x26>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8000e56:	4640      	mov	r0, r8
 8000e58:	b007      	add	sp, #28
 8000e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8000e5e:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8000e62:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8000e64:	2a2d      	cmp	r2, #45	; 0x2d
 8000e66:	bf03      	ittte	eq
 8000e68:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8000e6c:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8000e70:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8000e74:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8000e78:	2a30      	cmp	r2, #48	; 0x30
 8000e7a:	bf03      	ittte	eq
 8000e7c:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8000e7e:	3301      	addeq	r3, #1
      filler = '0';
 8000e80:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8000e82:	2720      	movne	r7, #32
 8000e84:	1c59      	adds	r1, r3, #1
 8000e86:	e006      	b.n	8000e96 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8000e88:	782b      	ldrb	r3, [r5, #0]
 8000e8a:	3504      	adds	r5, #4
 8000e8c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8000e90:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8000e94:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8000e96:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8000e9e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8000ea0:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8000ea4:	d9f2      	bls.n	8000e8c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8000ea6:	2a2a      	cmp	r2, #42	; 0x2a
 8000ea8:	d0ee      	beq.n	8000e88 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8000eaa:	2a2e      	cmp	r2, #46	; 0x2e
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	d043      	beq.n	8000f3a <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8000eb2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8000eb6:	2b4c      	cmp	r3, #76	; 0x4c
 8000eb8:	d04e      	beq.n	8000f58 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000eba:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8000ebe:	2834      	cmp	r0, #52	; 0x34
 8000ec0:	f200 80f6 	bhi.w	80010b0 <chvprintf+0x2a0>
 8000ec4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8000ec8:	00f400ea 	.word	0x00f400ea
 8000ecc:	00f400f4 	.word	0x00f400f4
 8000ed0:	00ea00f4 	.word	0x00ea00f4
 8000ed4:	00f400f4 	.word	0x00f400f4
 8000ed8:	00f400f4 	.word	0x00f400f4
 8000edc:	00e800f4 	.word	0x00e800f4
 8000ee0:	00f400f4 	.word	0x00f400f4
 8000ee4:	00f400f4 	.word	0x00f400f4
 8000ee8:	00dd00f4 	.word	0x00dd00f4
 8000eec:	00f400f4 	.word	0x00f400f4
 8000ef0:	00f400f1 	.word	0x00f400f1
 8000ef4:	00f400f4 	.word	0x00f400f4
 8000ef8:	00f400f4 	.word	0x00f400f4
 8000efc:	00f400f4 	.word	0x00f400f4
 8000f00:	00f400f4 	.word	0x00f400f4
 8000f04:	00a100f4 	.word	0x00a100f4
 8000f08:	00f400ea 	.word	0x00f400ea
 8000f0c:	00f400f4 	.word	0x00f400f4
 8000f10:	00ea00f4 	.word	0x00ea00f4
 8000f14:	00f400f4 	.word	0x00f400f4
 8000f18:	00f400f4 	.word	0x00f400f4
 8000f1c:	00e800f4 	.word	0x00e800f4
 8000f20:	00f400f4 	.word	0x00f400f4
 8000f24:	007100f4 	.word	0x007100f4
 8000f28:	00dd00f4 	.word	0x00dd00f4
 8000f2c:	00f400f4 	.word	0x00f400f4
 8000f30:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8000f32:	782b      	ldrb	r3, [r5, #0]
 8000f34:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8000f36:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8000f3a:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8000f3e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8000f42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	d9f4      	bls.n	8000f36 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 8000f4c:	2a2a      	cmp	r2, #42	; 0x2a
 8000f4e:	d0f0      	beq.n	8000f32 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8000f50:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8000f54:	2b4c      	cmp	r3, #76	; 0x4c
 8000f56:	d1b0      	bne.n	8000eba <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8000f58:	f89b 3000 	ldrb.w	r3, [fp]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a7 	beq.w	80010b0 <chvprintf+0x2a0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000f62:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8000f66:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8000f6a:	2a34      	cmp	r2, #52	; 0x34
 8000f6c:	f200 809f 	bhi.w	80010ae <chvprintf+0x29e>
 8000f70:	e8df f002 	tbb	[pc, r2]
 8000f74:	9d9d9d94 	.word	0x9d9d9d94
 8000f78:	9d9d949d 	.word	0x9d9d949d
 8000f7c:	929d9d9d 	.word	0x929d9d9d
 8000f80:	9d9d9d9d 	.word	0x9d9d9d9d
 8000f84:	9d9d879d 	.word	0x9d9d879d
 8000f88:	9d9d9d9b 	.word	0x9d9d9d9b
 8000f8c:	9d9d9d9d 	.word	0x9d9d9d9d
 8000f90:	4b9d9d9d 	.word	0x4b9d9d9d
 8000f94:	9d9d9d94 	.word	0x9d9d9d94
 8000f98:	9d9d949d 	.word	0x9d9d949d
 8000f9c:	929d9d9d 	.word	0x929d9d9d
 8000fa0:	1b9d9d9d 	.word	0x1b9d9d9d
 8000fa4:	9d9d879d 	.word	0x9d9d879d
 8000fa8:	9b          	.byte	0x9b
 8000fa9:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8000faa:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8000fac:	4b59      	ldr	r3, [pc, #356]	; (8001114 <chvprintf+0x304>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8000fae:	3504      	adds	r5, #4
        s = "(null)";
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	bf08      	it	eq
 8000fb4:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8000fb6:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8000fb8:	2900      	cmp	r1, #0
 8000fba:	f000 8093 	beq.w	80010e4 <chvprintf+0x2d4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8095 	beq.w	80010ee <chvprintf+0x2de>
 8000fc4:	3901      	subs	r1, #1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	e001      	b.n	8000fce <chvprintf+0x1be>
 8000fca:	3901      	subs	r1, #1
 8000fcc:	d403      	bmi.n	8000fd6 <chvprintf+0x1c6>
 8000fce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <chvprintf+0x1ba>
 8000fd6:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8000fd8:	1a36      	subs	r6, r6, r0
 8000fda:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8000fdc:	2720      	movs	r7, #32
 8000fde:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8000fe2:	f1ba 0f00 	cmp.w	sl, #0
 8000fe6:	d01f      	beq.n	8001028 <chvprintf+0x218>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	da34      	bge.n	8001058 <chvprintf+0x248>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8000fee:	2e00      	cmp	r6, #0
 8000ff0:	f43f af1c 	beq.w	8000e2c <chvprintf+0x1c>
 8000ff4:	4634      	mov	r4, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 8000ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8000ffa:	4648      	mov	r0, r9
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4639      	mov	r1, r7
 8001000:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001002:	3c01      	subs	r4, #1
 8001004:	d1f7      	bne.n	8000ff6 <chvprintf+0x1e6>
 8001006:	44b0      	add	r8, r6
 8001008:	e710      	b.n	8000e2c <chvprintf+0x1c>
 800100a:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	4610      	mov	r0, r2
 8001010:	f88d 300c 	strb.w	r3, [sp, #12]
 8001014:	3504      	adds	r5, #4
 8001016:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8001018:	2720      	movs	r7, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800101a:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800101c:	1a36      	subs	r6, r6, r0
 800101e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8001022:	f1ba 0f00 	cmp.w	sl, #0
 8001026:	d1df      	bne.n	8000fe8 <chvprintf+0x1d8>
 8001028:	9300      	str	r3, [sp, #0]
      width = -width;
 800102a:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 800102e:	f1ba 0f00 	cmp.w	sl, #0
 8001032:	d044      	beq.n	80010be <chvprintf+0x2ae>
      if (*s == '-' && filler == '0') {
 8001034:	7821      	ldrb	r1, [r4, #0]
 8001036:	292d      	cmp	r1, #45	; 0x2d
 8001038:	d046      	beq.n	80010c8 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 800103a:	4656      	mov	r6, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 800103c:	f8d9 3000 	ldr.w	r3, [r9]
 8001040:	4648      	mov	r0, r9
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	4639      	mov	r1, r7
 8001046:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8001048:	3601      	adds	r6, #1
 800104a:	d1f7      	bne.n	800103c <chvprintf+0x22c>
    }
    while (--i >= 0) {
 800104c:	9b00      	ldr	r3, [sp, #0]
 800104e:	ebca 0808 	rsb	r8, sl, r8
 8001052:	2b00      	cmp	r3, #0
 8001054:	f6ff aeea 	blt.w	8000e2c <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001058:	f8dd a000 	ldr.w	sl, [sp]
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800105c:	f8d9 3000 	ldr.w	r3, [r9]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001060:	f10a 3aff 	add.w	sl, sl, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4648      	mov	r0, r9
 8001068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800106c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800106e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8001072:	d1f3      	bne.n	800105c <chvprintf+0x24c>
 8001074:	9b00      	ldr	r3, [sp, #0]
 8001076:	f108 0801 	add.w	r8, r8, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfa8      	it	ge
 800107e:	4498      	addge	r8, r3
 8001080:	e7b5      	b.n	8000fee <chvprintf+0x1de>
 8001082:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001084:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001086:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001088:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800108a:	f001 ffe1 	bl	8003050 <long_to_string_with_divisor.constprop.3>
 800108e:	ab03      	add	r3, sp, #12
 8001090:	1ac0      	subs	r0, r0, r3
 8001092:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001094:	ac03      	add	r4, sp, #12
 8001096:	e7c1      	b.n	800101c <chvprintf+0x20c>
 8001098:	2208      	movs	r2, #8
 800109a:	e7f3      	b.n	8001084 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800109c:	6829      	ldr	r1, [r5, #0]
 800109e:	3504      	adds	r5, #4
      if (l < 0) {
 80010a0:	2900      	cmp	r1, #0
 80010a2:	db2e      	blt.n	8001102 <chvprintf+0x2f2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80010a4:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80010a6:	220a      	movs	r2, #10
 80010a8:	e7ef      	b.n	800108a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80010aa:	2210      	movs	r2, #16
 80010ac:	e7ea      	b.n	8001084 <chvprintf+0x274>
 80010ae:	461a      	mov	r2, r3
 80010b0:	9b01      	ldr	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80010b2:	ac03      	add	r4, sp, #12
 80010b4:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80010b6:	f88d 200c 	strb.w	r2, [sp, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	e7ae      	b.n	800101c <chvprintf+0x20c>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80010be:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 80010c0:	4656      	mov	r6, sl
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dac8      	bge.n	8001058 <chvprintf+0x248>
 80010c6:	e6b1      	b.n	8000e2c <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80010c8:	2f30      	cmp	r7, #48	; 0x30
 80010ca:	d1b6      	bne.n	800103a <chvprintf+0x22a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 80010cc:	f8d9 3000 	ldr.w	r3, [r9]
 80010d0:	4648      	mov	r0, r9
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4798      	blx	r3
 80010d6:	9b00      	ldr	r3, [sp, #0]
 80010d8:	3401      	adds	r4, #1
 80010da:	3b01      	subs	r3, #1
        n++;
 80010dc:	f108 0801 	add.w	r8, r8, #1
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	e7aa      	b.n	800103a <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80010e4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f47f af6c 	bne.w	8000fc6 <chvprintf+0x1b6>
 80010ee:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80010f2:	f1ba 0f00 	cmp.w	sl, #0
 80010f6:	d10b      	bne.n	8001110 <chvprintf+0x300>
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2720      	movs	r7, #32
 8001100:	e793      	b.n	800102a <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8001102:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001104:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8001106:	f88d 300c 	strb.w	r3, [sp, #12]
 800110a:	f10d 000d 	add.w	r0, sp, #13
 800110e:	e7ca      	b.n	80010a6 <chvprintf+0x296>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001110:	2720      	movs	r7, #32
 8001112:	e76c      	b.n	8000fee <chvprintf+0x1de>
 8001114:	08003360 	.word	0x08003360
	...

08001120 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001120:	b40e      	push	{r1, r2, r3}
 8001122:	b500      	push	{lr}
 8001124:	b082      	sub	sp, #8
 8001126:	ab03      	add	r3, sp, #12
 8001128:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800112c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800112e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001130:	f7ff fe6e 	bl	8000e10 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001134:	b002      	add	sp, #8
 8001136:	f85d eb04 	ldr.w	lr, [sp], #4
 800113a:	b003      	add	sp, #12
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001140:	2900      	cmp	r1, #0
 8001142:	dd03      	ble.n	800114c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001144:	4908      	ldr	r1, [pc, #32]	; (8001168 <cmd_systime+0x28>)
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <cmd_systime+0x2c>)
 8001148:	f7ff bfea 	b.w	8001120 <chprintf>
 800114c:	2320      	movs	r3, #32
 800114e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001158:	2300      	movs	r3, #0
 800115a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 800115e:	4904      	ldr	r1, [pc, #16]	; (8001170 <cmd_systime+0x30>)
 8001160:	b292      	uxth	r2, r2
 8001162:	f7ff bfdd 	b.w	8001120 <chprintf>
 8001166:	bf00      	nop
 8001168:	08003368 	.word	0x08003368
 800116c:	08003374 	.word	0x08003374
 8001170:	0800337c 	.word	0x0800337c
	...

08001180 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001180:	2900      	cmp	r1, #0
 8001182:	dd03      	ble.n	800118c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001184:	4919      	ldr	r1, [pc, #100]	; (80011ec <cmd_info+0x6c>)
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <cmd_info+0x70>)
 8001188:	f7ff bfca 	b.w	8001120 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800118c:	b510      	push	{r4, lr}
 800118e:	4604      	mov	r4, r0
 8001190:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8001192:	4918      	ldr	r1, [pc, #96]	; (80011f4 <cmd_info+0x74>)
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <cmd_info+0x78>)
 8001196:	f7ff ffc3 	bl	8001120 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800119a:	4620      	mov	r0, r4
 800119c:	4917      	ldr	r1, [pc, #92]	; (80011fc <cmd_info+0x7c>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <cmd_info+0x80>)
 80011a0:	f7ff ffbe 	bl	8001120 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 80011a4:	4620      	mov	r0, r4
 80011a6:	4917      	ldr	r1, [pc, #92]	; (8001204 <cmd_info+0x84>)
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <cmd_info+0x88>)
 80011aa:	f7ff ffb9 	bl	8001120 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 80011ae:	4620      	mov	r0, r4
 80011b0:	4916      	ldr	r1, [pc, #88]	; (800120c <cmd_info+0x8c>)
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <cmd_info+0x90>)
 80011b4:	f7ff ffb4 	bl	8001120 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 80011b8:	4620      	mov	r0, r4
 80011ba:	4916      	ldr	r1, [pc, #88]	; (8001214 <cmd_info+0x94>)
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <cmd_info+0x98>)
 80011be:	f7ff ffaf 	bl	8001120 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80011c2:	4620      	mov	r0, r4
 80011c4:	4915      	ldr	r1, [pc, #84]	; (800121c <cmd_info+0x9c>)
 80011c6:	4a16      	ldr	r2, [pc, #88]	; (8001220 <cmd_info+0xa0>)
 80011c8:	f7ff ffaa 	bl	8001120 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80011cc:	4620      	mov	r0, r4
 80011ce:	4915      	ldr	r1, [pc, #84]	; (8001224 <cmd_info+0xa4>)
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <cmd_info+0xa8>)
 80011d2:	f7ff ffa5 	bl	8001120 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <cmd_info+0xac>)
 80011d8:	4620      	mov	r0, r4
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	4914      	ldr	r1, [pc, #80]	; (8001230 <cmd_info+0xb0>)
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <cmd_info+0xb4>)
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <cmd_info+0xb8>)
 80011e2:	f7ff ff9d 	bl	8001120 <chprintf>
#endif
#endif
}
 80011e6:	b002      	add	sp, #8
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	bf00      	nop
 80011ec:	08003368 	.word	0x08003368
 80011f0:	08003384 	.word	0x08003384
 80011f4:	0800338c 	.word	0x0800338c
 80011f8:	080033a0 	.word	0x080033a0
 80011fc:	080033a8 	.word	0x080033a8
 8001200:	080033bc 	.word	0x080033bc
 8001204:	08003404 	.word	0x08003404
 8001208:	08003418 	.word	0x08003418
 800120c:	08003420 	.word	0x08003420
 8001210:	08003434 	.word	0x08003434
 8001214:	08003440 	.word	0x08003440
 8001218:	08003454 	.word	0x08003454
 800121c:	0800346c 	.word	0x0800346c
 8001220:	08003480 	.word	0x08003480
 8001224:	080034ac 	.word	0x080034ac
 8001228:	080034c0 	.word	0x080034c0
 800122c:	080034fc 	.word	0x080034fc
 8001230:	080034d4 	.word	0x080034d4
 8001234:	080034ec 	.word	0x080034ec
 8001238:	080034f8 	.word	0x080034f8
 800123c:	00000000 	.word	0x00000000

08001240 <shell_thread.lto_priv.34>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001244:	4b79      	ldr	r3, [pc, #484]	; (800142c <shell_thread.lto_priv.34+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8001246:	6804      	ldr	r4, [r0, #0]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a79      	ldr	r2, [pc, #484]	; (8001430 <shell_thread.lto_priv.34+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 800124c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800124e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
 8001252:	4978      	ldr	r1, [pc, #480]	; (8001434 <shell_thread.lto_priv.34+0x1f4>)
 8001254:	4620      	mov	r0, r4
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	f7ff ff62 	bl	8001120 <chprintf>
 800125c:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800125e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
 8001262:	4620      	mov	r0, r4
 8001264:	4974      	ldr	r1, [pc, #464]	; (8001438 <shell_thread.lto_priv.34+0x1f8>)
 8001266:	f7ff ff5b 	bl	8001120 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 800126a:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f10d 0107 	add.w	r1, sp, #7
 8001276:	2201      	movs	r2, #1
 8001278:	4798      	blx	r3
 800127a:	b370      	cbz	r0, 80012da <shell_thread.lto_priv.34+0x9a>
      return true;
    if (c == 4) {
 800127c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001280:	2904      	cmp	r1, #4
 8001282:	d026      	beq.n	80012d2 <shell_thread.lto_priv.34+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8001284:	2908      	cmp	r1, #8
 8001286:	d011      	beq.n	80012ac <shell_thread.lto_priv.34+0x6c>
 8001288:	297f      	cmp	r1, #127	; 0x7f
 800128a:	d00f      	beq.n	80012ac <shell_thread.lto_priv.34+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800128c:	290d      	cmp	r1, #13
 800128e:	d035      	beq.n	80012fc <shell_thread.lto_priv.34+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8001290:	291f      	cmp	r1, #31
 8001292:	d9eb      	bls.n	800126c <shell_thread.lto_priv.34+0x2c>
      continue;
    if (p < line + size - 1) {
 8001294:	42bd      	cmp	r5, r7
 8001296:	d2e9      	bcs.n	800126c <shell_thread.lto_priv.34+0x2c>
      chSequentialStreamPut(chp, c);
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	4620      	mov	r0, r4
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4798      	blx	r3
      *p++ = (char)c;
 80012a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a4:	3501      	adds	r5, #1
 80012a6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80012aa:	e7df      	b.n	800126c <shell_thread.lto_priv.34+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80012ac:	42b5      	cmp	r5, r6
 80012ae:	d0dd      	beq.n	800126c <shell_thread.lto_priv.34+0x2c>
        chSequentialStreamPut(chp, c);
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	4620      	mov	r0, r4
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	4620      	mov	r0, r4
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2120      	movs	r1, #32
 80012c0:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	4620      	mov	r0, r4
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 80012cc:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 80012ce:	4798      	blx	r3
 80012d0:	e7cc      	b.n	800126c <shell_thread.lto_priv.34+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 80012d2:	4620      	mov	r0, r4
 80012d4:	4959      	ldr	r1, [pc, #356]	; (800143c <shell_thread.lto_priv.34+0x1fc>)
 80012d6:	f7ff ff23 	bl	8001120 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80012da:	4620      	mov	r0, r4
 80012dc:	4958      	ldr	r1, [pc, #352]	; (8001440 <shell_thread.lto_priv.34+0x200>)
 80012de:	f7ff ff1f 	bl	8001120 <chprintf>
 80012e2:	2320      	movs	r3, #32
 80012e4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4856      	ldr	r0, [pc, #344]	; (8001444 <shell_thread.lto_priv.34+0x204>)
 80012ec:	f001 f800 	bl	80022f0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f001 f96d 	bl	80025d0 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 80012f6:	b018      	add	sp, #96	; 0x60
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80012fc:	4952      	ldr	r1, [pc, #328]	; (8001448 <shell_thread.lto_priv.34+0x208>)
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff ff0e 	bl	8001120 <chprintf>
      *p = 0;
 8001304:	2300      	movs	r3, #0
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001306:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8001308:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800130a:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800130c:	461d      	mov	r5, r3
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800130e:	f001 fe7f 	bl	8003010 <_strtok.constprop.4>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001312:	a902      	add	r1, sp, #8
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001314:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001316:	2000      	movs	r0, #0
 8001318:	f10d 090c 	add.w	r9, sp, #12
 800131c:	f001 fe78 	bl	8003010 <_strtok.constprop.4>
 8001320:	b150      	cbz	r0, 8001338 <shell_thread.lto_priv.34+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001322:	2d04      	cmp	r5, #4
 8001324:	d01d      	beq.n	8001362 <shell_thread.lto_priv.34+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001326:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800132a:	a902      	add	r1, sp, #8
 800132c:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800132e:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001330:	f001 fe6e 	bl	8003010 <_strtok.constprop.4>
 8001334:	2800      	cmp	r0, #0
 8001336:	d1f4      	bne.n	8001322 <shell_thread.lto_priv.34+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001338:	ab18      	add	r3, sp, #96	; 0x60
 800133a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800133e:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8001342:	f1ba 0f00 	cmp.w	sl, #0
 8001346:	d08c      	beq.n	8001262 <shell_thread.lto_priv.34+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 8001348:	4650      	mov	r0, sl
 800134a:	4940      	ldr	r1, [pc, #256]	; (800144c <shell_thread.lto_priv.34+0x20c>)
 800134c:	f001 fef8 	bl	8003140 <strcasecmp>
 8001350:	b970      	cbnz	r0, 8001370 <shell_thread.lto_priv.34+0x130>
        if (n > 0) {
 8001352:	2d00      	cmp	r5, #0
 8001354:	d0c5      	beq.n	80012e2 <shell_thread.lto_priv.34+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001356:	4620      	mov	r0, r4
 8001358:	493d      	ldr	r1, [pc, #244]	; (8001450 <shell_thread.lto_priv.34+0x210>)
 800135a:	4a3c      	ldr	r2, [pc, #240]	; (800144c <shell_thread.lto_priv.34+0x20c>)
 800135c:	f7ff fee0 	bl	8001120 <chprintf>
 8001360:	e77f      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8001362:	4620      	mov	r0, r4
 8001364:	493b      	ldr	r1, [pc, #236]	; (8001454 <shell_thread.lto_priv.34+0x214>)
 8001366:	f7ff fedb 	bl	8001120 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800136a:	2300      	movs	r3, #0
 800136c:	9307      	str	r3, [sp, #28]
 800136e:	e778      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8001370:	4650      	mov	r0, sl
 8001372:	4939      	ldr	r1, [pc, #228]	; (8001458 <shell_thread.lto_priv.34+0x218>)
 8001374:	f001 fee4 	bl	8003140 <strcasecmp>
 8001378:	b930      	cbnz	r0, 8001388 <shell_thread.lto_priv.34+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800137a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800137c:	b1c5      	cbz	r5, 80013b0 <shell_thread.lto_priv.34+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800137e:	4934      	ldr	r1, [pc, #208]	; (8001450 <shell_thread.lto_priv.34+0x210>)
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <shell_thread.lto_priv.34+0x218>)
 8001382:	f7ff fecd 	bl	8001120 <chprintf>
 8001386:	e76c      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <shell_thread.lto_priv.34+0x21c>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4699      	mov	r9, r3
 800138e:	b918      	cbnz	r0, 8001398 <shell_thread.lto_priv.34+0x158>
 8001390:	e031      	b.n	80013f6 <shell_thread.lto_priv.34+0x1b6>
 8001392:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8001396:	b370      	cbz	r0, 80013f6 <shell_thread.lto_priv.34+0x1b6>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8001398:	4651      	mov	r1, sl
 800139a:	f001 fed1 	bl	8003140 <strcasecmp>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1f7      	bne.n	8001392 <shell_thread.lto_priv.34+0x152>
      scp->sc_function(chp, argc, argv);
 80013a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013a6:	4629      	mov	r1, r5
 80013a8:	aa03      	add	r2, sp, #12
 80013aa:	4620      	mov	r0, r4
 80013ac:	4798      	blx	r3
 80013ae:	e758      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80013b0:	492b      	ldr	r1, [pc, #172]	; (8001460 <shell_thread.lto_priv.34+0x220>)
 80013b2:	f7ff feb5 	bl	8001120 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <shell_thread.lto_priv.34+0x21c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	461d      	mov	r5, r3
 80013bc:	b13a      	cbz	r2, 80013ce <shell_thread.lto_priv.34+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 80013be:	4620      	mov	r0, r4
 80013c0:	4928      	ldr	r1, [pc, #160]	; (8001464 <shell_thread.lto_priv.34+0x224>)
 80013c2:	f7ff fead 	bl	8001120 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80013c6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d1f7      	bne.n	80013be <shell_thread.lto_priv.34+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 80013ce:	f1b8 0f00 	cmp.w	r8, #0
 80013d2:	d00b      	beq.n	80013ec <shell_thread.lto_priv.34+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80013d4:	f8d8 2000 	ldr.w	r2, [r8]
 80013d8:	b142      	cbz	r2, 80013ec <shell_thread.lto_priv.34+0x1ac>
 80013da:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 80013dc:	4620      	mov	r0, r4
 80013de:	4921      	ldr	r1, [pc, #132]	; (8001464 <shell_thread.lto_priv.34+0x224>)
 80013e0:	f7ff fe9e 	bl	8001120 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80013e4:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d1f7      	bne.n	80013dc <shell_thread.lto_priv.34+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 80013ec:	4620      	mov	r0, r4
 80013ee:	4916      	ldr	r1, [pc, #88]	; (8001448 <shell_thread.lto_priv.34+0x208>)
 80013f0:	f7ff fe96 	bl	8001120 <chprintf>
 80013f4:	e735      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 80013f6:	f1b8 0f00 	cmp.w	r8, #0
 80013fa:	d00d      	beq.n	8001418 <shell_thread.lto_priv.34+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80013fc:	f8d8 0000 	ldr.w	r0, [r8]
 8001400:	b150      	cbz	r0, 8001418 <shell_thread.lto_priv.34+0x1d8>
 8001402:	46c1      	mov	r9, r8
 8001404:	e002      	b.n	800140c <shell_thread.lto_priv.34+0x1cc>
 8001406:	f859 0f08 	ldr.w	r0, [r9, #8]!
 800140a:	b128      	cbz	r0, 8001418 <shell_thread.lto_priv.34+0x1d8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800140c:	4651      	mov	r1, sl
 800140e:	f001 fe97 	bl	8003140 <strcasecmp>
 8001412:	2800      	cmp	r0, #0
 8001414:	d1f7      	bne.n	8001406 <shell_thread.lto_priv.34+0x1c6>
 8001416:	e7c4      	b.n	80013a2 <shell_thread.lto_priv.34+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8001418:	4652      	mov	r2, sl
 800141a:	4620      	mov	r0, r4
 800141c:	4912      	ldr	r1, [pc, #72]	; (8001468 <shell_thread.lto_priv.34+0x228>)
 800141e:	f7ff fe7f 	bl	8001120 <chprintf>
        chprintf(chp, " ?\r\n");
 8001422:	4620      	mov	r0, r4
 8001424:	4911      	ldr	r1, [pc, #68]	; (800146c <shell_thread.lto_priv.34+0x22c>)
 8001426:	f7ff fe7b 	bl	8001120 <chprintf>
 800142a:	e71a      	b.n	8001262 <shell_thread.lto_priv.34+0x22>
 800142c:	20000db0 	.word	0x20000db0
 8001430:	08003508 	.word	0x08003508
 8001434:	08003510 	.word	0x08003510
 8001438:	08003534 	.word	0x08003534
 800143c:	0800353c 	.word	0x0800353c
 8001440:	08003590 	.word	0x08003590
 8001444:	20000bd0 	.word	0x20000bd0
 8001448:	080034bc 	.word	0x080034bc
 800144c:	08003558 	.word	0x08003558
 8001450:	08003368 	.word	0x08003368
 8001454:	08003540 	.word	0x08003540
 8001458:	08003560 	.word	0x08003560
 800145c:	20000800 	.word	0x20000800
 8001460:	08003568 	.word	0x08003568
 8001464:	08003580 	.word	0x08003580
 8001468:	08003584 	.word	0x08003584
 800146c:	08003588 	.word	0x08003588

08001470 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 8001470:	f000 bea6 	b.w	80021c0 <_port_irq_epilogue>
	...

08001480 <chprintf.lto_priv.48>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001480:	b40e      	push	{r1, r2, r3}
 8001482:	b500      	push	{lr}
 8001484:	b082      	sub	sp, #8
 8001486:	ab03      	add	r3, sp, #12
 8001488:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800148c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800148e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001490:	f7ff fcbe 	bl	8000e10 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001494:	b002      	add	sp, #8
 8001496:	f85d eb04 	ldr.w	lr, [sp], #4
 800149a:	b003      	add	sp, #12
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80014a2:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80014ac:	680b      	ldr	r3, [r1, #0]
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <__early_init+0x80>)
 80014b0:	079b      	lsls	r3, r3, #30
 80014b2:	d5fb      	bpl.n	80014ac <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80014b4:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80014b6:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80014b8:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80014ba:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80014be:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80014c0:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80014c2:	684b      	ldr	r3, [r1, #4]
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <__early_init+0x80>)
 80014c6:	f013 0f0c 	tst.w	r3, #12
 80014ca:	d1fa      	bne.n	80014c2 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 80014cc:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80014d6:	680b      	ldr	r3, [r1, #0]
 80014d8:	4a11      	ldr	r2, [pc, #68]	; (8001520 <__early_init+0x80>)
 80014da:	0398      	lsls	r0, r3, #14
 80014dc:	d5fb      	bpl.n	80014d6 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80014de:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80014e0:	6853      	ldr	r3, [r2, #4]
 80014e2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80014e6:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80014f0:	680b      	ldr	r3, [r1, #0]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <__early_init+0x80>)
 80014f4:	019b      	lsls	r3, r3, #6
 80014f6:	d5fb      	bpl.n	80014f0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80014f8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 80014fa:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80014fe:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001500:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001502:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001504:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001506:	6853      	ldr	r3, [r2, #4]
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800150e:	684b      	ldr	r3, [r1, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d1fa      	bne.n	800150e <__early_init+0x6e>

  stm32_clock_init();
}
 8001518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40022000 	.word	0x40022000
 8001528:	001d6400 	.word	0x001d6400
 800152c:	00000000 	.word	0x00000000

08001530 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001530:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001534:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8001536:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001538:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800153a:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800153c:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800153e:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8001540:	7803      	ldrb	r3, [r0, #0]
 8001542:	428a      	cmp	r2, r1
 8001544:	bf28      	it	cs
 8001546:	460a      	movcs	r2, r1
 8001548:	bb03      	cbnz	r3, 800158c <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800154a:	4917      	ldr	r1, [pc, #92]	; (80015a8 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800154c:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800154e:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001556:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800155a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800155e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001562:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001564:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001566:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800156a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800156e:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001570:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001574:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8001576:	d007      	beq.n	8001588 <usb_lld_prepare_transmit+0x58>
 8001578:	3802      	subs	r0, #2
 800157a:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800157c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001580:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001582:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001586:	d1f9      	bne.n	800157c <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8001588:	bc30      	pop	{r4, r5}
 800158a:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <usb_lld_prepare_transmit+0x78>)
 800158e:	68c1      	ldr	r1, [r0, #12]
 8001590:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001592:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001596:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800159a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800159e:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80015a0:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80015a2:	f7ff b885 	b.w	80006b0 <usb_packet_write_from_queue.lto_priv.49>
 80015a6:	bf00      	nop
 80015a8:	40005c00 	.word	0x40005c00
 80015ac:	00000000 	.word	0x00000000

080015b0 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80015b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80015b4:	68c9      	ldr	r1, [r1, #12]
 80015b6:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80015b8:	6853      	ldr	r3, [r2, #4]
 80015ba:	b133      	cbz	r3, 80015ca <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80015bc:	8a49      	ldrh	r1, [r1, #18]
 80015be:	3b01      	subs	r3, #1
 80015c0:	440b      	add	r3, r1
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	8213      	strh	r3, [r2, #16]
 80015c8:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	8213      	strh	r3, [r2, #16]
 80015ce:	4770      	bx	lr

080015d0 <usb_event.lto_priv.38>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 80015d0:	2902      	cmp	r1, #2
 80015d2:	d149      	bne.n	8001668 <usb_event.lto_priv.38+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4606      	mov	r6, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	2320      	movs	r3, #32
 80015dc:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 80015e0:	4c22      	ldr	r4, [pc, #136]	; (800166c <usb_event.lto_priv.38+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80015e2:	2101      	movs	r1, #1
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <usb_event.lto_priv.38+0xa0>)
 80015e6:	f7ff fbdb 	bl	8000da0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80015ea:	4630      	mov	r0, r6
 80015ec:	4629      	mov	r1, r5
 80015ee:	4a21      	ldr	r2, [pc, #132]	; (8001674 <usb_event.lto_priv.38+0xa4>)
 80015f0:	f7ff fbd6 	bl	8000da0 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 80015f4:	69a3      	ldr	r3, [r4, #24]
 80015f6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80015fa:	f104 070c 	add.w	r7, r4, #12

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80015fe:	2500      	movs	r5, #0
 8001600:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001602:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8001604:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8001606:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8001608:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800160c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800160e:	f000 ffc7 	bl	80025a0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001612:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001616:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8001618:	1a9b      	subs	r3, r3, r2
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800161a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeX(oqp);
 800161c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800161e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001622:	f06f 0101 	mvn.w	r1, #1
 8001626:	f000 ffbb 	bl	80025a0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800162a:	1d20      	adds	r0, r4, #4
 800162c:	2101      	movs	r1, #1
 800162e:	f000 fe5f 	bl	80022f0 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8001632:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001636:	2201      	movs	r2, #1
 8001638:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800163a:	4630      	mov	r0, r6
 800163c:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8001640:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8001642:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001646:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8001648:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800164c:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 800164e:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8001650:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8001652:	f7ff ffad 	bl	80015b0 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8001656:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800165a:	4630      	mov	r0, r6
 800165c:	7959      	ldrb	r1, [r3, #5]
 800165e:	f7ff f907 	bl	8000870 <usbStartReceiveI>
 8001662:	f385 8811 	msr	BASEPRI, r5
 8001666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000944 	.word	0x20000944
 8001670:	08003240 	.word	0x08003240
 8001674:	08003330 	.word	0x08003330
	...

08001680 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8001680:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001684:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8001686:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	3a01      	subs	r2, #1
 8001690:	2a02      	cmp	r2, #2
 8001692:	bf96      	itet	ls
 8001694:	4c2e      	ldrls	r4, [pc, #184]	; (8001750 <usb_lld_init_endpoint+0xd0>)
 8001696:	f44f 7500 	movhi.w	r5, #512	; 0x200
 800169a:	f834 5012 	ldrhls.w	r5, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	b10a      	cbz	r2, 80016a6 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 80016a2:	f045 0520 	orr.w	r5, r5, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	b10a      	cbz	r2, 80016ae <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 80016aa:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80016ae:	f647 0670 	movw	r6, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 80016b2:	ea45 0401 	orr.w	r4, r5, r1
 80016b6:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
 80016ba:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80016be:	008a      	lsls	r2, r1, #2
 80016c0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80016c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80016c8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80016cc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80016d0:	6014      	str	r4, [r2, #0]
  EPR_TOGGLE(ep, epr);
 80016d2:	6814      	ldr	r4, [r2, #0]
 80016d4:	402e      	ands	r6, r5
 80016d6:	4074      	eors	r4, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80016d8:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80016da:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80016de:	f044 0480 	orr.w	r4, r4, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80016e2:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 80016e4:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80016e6:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 80016ea:	d826      	bhi.n	800173a <usb_lld_init_endpoint+0xba>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 80016ec:	f044 0401 	orr.w	r4, r4, #1
 80016f0:	3401      	adds	r4, #1
 80016f2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80016f6:	0264      	lsls	r4, r4, #9
 80016f8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 80016fc:	4a15      	ldr	r2, [pc, #84]	; (8001754 <usb_lld_init_endpoint+0xd4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80016fe:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8001700:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8001702:	2700      	movs	r7, #0
 8001704:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 8001708:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800170c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001710:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8001712:	684b      	ldr	r3, [r1, #4]
 8001714:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8001716:	68cb      	ldr	r3, [r1, #12]
 8001718:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800171a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800171e:	1993      	adds	r3, r2, r6
 8001720:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001724:	680b      	ldr	r3, [r1, #0]
 8001726:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001728:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800172c:	441d      	add	r5, r3
 800172e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001732:	688a      	ldr	r2, [r1, #8]
}
 8001734:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001736:	608b      	str	r3, [r1, #8]
}
 8001738:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 800173a:	f044 041f 	orr.w	r4, r4, #31
 800173e:	3401      	adds	r4, #1
 8001740:	1164      	asrs	r4, r4, #5
 8001742:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001746:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800174a:	b2a4      	uxth	r4, r4
 800174c:	e7d6      	b.n	80016fc <usb_lld_init_endpoint+0x7c>
 800174e:	bf00      	nop
 8001750:	08003610 	.word	0x08003610
 8001754:	40005c00 	.word	0x40005c00
	...

08001760 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001760:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8001762:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001764:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001768:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800176a:	4d0d      	ldr	r5, [pc, #52]	; (80017a0 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 800176c:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8001770:	bf0c      	ite	eq
 8001772:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8001776:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 800177a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800177e:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001780:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001782:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8001784:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8001786:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 800178a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800178c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8001790:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8001792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001796:	f7ff bf73 	b.w	8001680 <usb_lld_init_endpoint>
 800179a:	bf00      	nop
 800179c:	40005c00 	.word	0x40005c00
 80017a0:	080035c0 	.word	0x080035c0
	...

080017b0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80017b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80017b4:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <Vector90+0x26c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80017b6:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80017b8:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 80017ba:	0563      	lsls	r3, r4, #21
 80017bc:	f100 819c 	bmi.w	8001af8 <Vector90+0x348>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 80017c0:	0527      	lsls	r7, r4, #20
 80017c2:	d511      	bpl.n	80017e8 <Vector90+0x38>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80017c4:	f8df b258 	ldr.w	fp, [pc, #600]	; 8001a20 <Vector90+0x270>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80017c8:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <Vector90+0x26c>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80017ca:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80017ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80017d0:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80017d8:	b115      	cbz	r5, 80017e0 <Vector90+0x30>
 80017da:	4658      	mov	r0, fp
 80017dc:	2103      	movs	r1, #3
 80017de:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 80017e0:	4b8e      	ldr	r3, [pc, #568]	; (8001a1c <Vector90+0x26c>)
 80017e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 80017e8:	04e6      	lsls	r6, r4, #19
 80017ea:	d508      	bpl.n	80017fe <Vector90+0x4e>
    uint32_t fnr = STM32_USB->FNR;
 80017ec:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <Vector90+0x26c>)
 80017ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80017f0:	0415      	lsls	r5, r2, #16
 80017f2:	f140 8171 	bpl.w	8001ad8 <Vector90+0x328>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <Vector90+0x26c>)
 80017f8:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 80017fe:	05a0      	lsls	r0, r4, #22
 8001800:	d50b      	bpl.n	800181a <Vector90+0x6a>
    _usb_isr_invoke_sof_cb(usbp);
 8001802:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8001a20 <Vector90+0x270>
 8001806:	f8db 3004 	ldr.w	r3, [fp, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	b10b      	cbz	r3, 8001812 <Vector90+0x62>
 800180e:	4658      	mov	r0, fp
 8001810:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <Vector90+0x26c>)
 8001814:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 800181a:	0421      	lsls	r1, r4, #16
 800181c:	f140 80d3 	bpl.w	80019c6 <Vector90+0x216>
 8001820:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8001a20 <Vector90+0x270>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001824:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8001a1c <Vector90+0x26c>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8001828:	f004 040f 	and.w	r4, r4, #15
 800182c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8001830:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 8001834:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8001838:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 800183c:	1ca6      	adds	r6, r4, #2
 800183e:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8001842:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8001846:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8001848:	d065      	beq.n	8001916 <Vector90+0x166>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800184a:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800184c:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800184e:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800185c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8001860:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8001864:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001868:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800186c:	4403      	add	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8001872:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8001876:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 800187a:	440b      	add	r3, r1
 800187c:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f000 80bd 	beq.w	8001a00 <Vector90+0x250>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8001886:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8001888:	f89e c000 	ldrb.w	ip, [lr]
 800188c:	429a      	cmp	r2, r3
 800188e:	bf28      	it	cs
 8001890:	461a      	movcs	r2, r3
 8001892:	f1bc 0f00 	cmp.w	ip, #0
 8001896:	f040 8112 	bne.w	8001abe <Vector90+0x30e>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800189a:	1c53      	adds	r3, r2, #1
 800189c:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800189e:	f8de 300c 	ldr.w	r3, [lr, #12]
 80018a2:	4419      	add	r1, r3
 80018a4:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80018a8:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80018ac:	9b01      	ldr	r3, [sp, #4]
 80018ae:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 80018b2:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80018b6:	4470      	add	r0, lr
 80018b8:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80018ba:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80018be:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80018c0:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 80018c4:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80018c8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80018cc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80018d0:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 80018d2:	d008      	beq.n	80018e6 <Vector90+0x136>
 80018d4:	3902      	subs	r1, #2
 80018d6:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80018da:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80018de:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80018e0:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80018e4:	d1f9      	bne.n	80018da <Vector90+0x12a>
 80018e6:	2320      	movs	r3, #32
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80018f0:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80018f4:	f8d8 3000 	ldr.w	r3, [r8]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80018fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001902:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190e:	f8c8 3000 	str.w	r3, [r8]
 8001912:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8001916:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800191a:	d04f      	beq.n	80019bc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
 800191c:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 800191e:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8001922:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800192a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192e:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8001930:	d15e      	bne.n	80019f0 <Vector90+0x240>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001932:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800193c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001940:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001944:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4610      	mov	r0, r2
 800194a:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 800194c:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800194e:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8001952:	2a00      	cmp	r2, #0
 8001954:	d166      	bne.n	8001a24 <Vector90+0x274>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8001956:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 8001958:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800195c:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8001960:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8001964:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8001966:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 800196a:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800196c:	d009      	beq.n	8001982 <Vector90+0x1d2>
 800196e:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001970:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8001974:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8001976:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800197a:	d1f9      	bne.n	8001970 <Vector90+0x1c0>
 800197c:	4671      	mov	r1, lr
 800197e:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8001982:	4440      	add	r0, r8
 8001984:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8001986:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8001988:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800198a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800198c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800198e:	3801      	subs	r0, #1
 8001990:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8001992:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8001994:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8001998:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800199a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800199c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800199e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 80019a0:	d316      	bcc.n	80019d0 <Vector90+0x220>
 80019a2:	b1a8      	cbz	r0, 80019d0 <Vector90+0x220>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 80019bc:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80019c0:	0423      	lsls	r3, r4, #16
 80019c2:	f53f af31 	bmi.w	8001828 <Vector90+0x78>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 80019c6:	b005      	add	sp, #20
 80019c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 80019cc:	f000 bbf8 	b.w	80021c0 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 80019d0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80019d4:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80019d8:	2101      	movs	r1, #1
 80019da:	40a1      	lsls	r1, r4
 80019dc:	6872      	ldr	r2, [r6, #4]
 80019de:	ea23 0301 	bic.w	r3, r3, r1
 80019e2:	68d2      	ldr	r2, [r2, #12]
 80019e4:	f8ab 300a 	strh.w	r3, [fp, #10]
 80019e8:	4621      	mov	r1, r4
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <Vector90+0x270>)
 80019ec:	4790      	blx	r2
 80019ee:	e7e5      	b.n	80019bc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 80019f0:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80019f4:	6873      	ldr	r3, [r6, #4]
 80019f6:	4621      	mov	r1, r4
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <Vector90+0x270>)
 80019fc:	4798      	blx	r3
 80019fe:	e7dd      	b.n	80019bc <Vector90+0x20c>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <Vector90+0x270>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	891b      	ldrh	r3, [r3, #8]
 8001a06:	40a2      	lsls	r2, r4
 8001a08:	ea23 0302 	bic.w	r3, r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <Vector90+0x270>)
 8001a0e:	4621      	mov	r1, r4
 8001a10:	8113      	strh	r3, [r2, #8]
 8001a12:	4610      	mov	r0, r2
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4798      	blx	r3
 8001a18:	e77d      	b.n	8001916 <Vector90+0x166>
 8001a1a:	bf00      	nop
 8001a1c:	40005c00 	.word	0x40005c00
 8001a20:	200008c0 	.word	0x200008c0
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8001a24:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8001a26:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8001a2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001a2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8001a36:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8001a38:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8001a3a:	9203      	str	r2, [sp, #12]
 8001a3c:	d021      	beq.n	8001a82 <Vector90+0x2d2>
 8001a3e:	4610      	mov	r0, r2
 8001a40:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8001a42:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8001a44:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8001a48:	f103 0901 	add.w	r9, r3, #1
 8001a4c:	f8c1 9014 	str.w	r9, [r1, #20]
 8001a50:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8001a52:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8001a54:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8001a58:	694a      	ldr	r2, [r1, #20]
 8001a5a:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8001a5c:	bf28      	it	cs
 8001a5e:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8001a60:	1c53      	adds	r3, r2, #1
 8001a62:	614b      	str	r3, [r1, #20]
 8001a64:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8001a68:	690b      	ldr	r3, [r1, #16]
 8001a6a:	694a      	ldr	r2, [r1, #20]
 8001a6c:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8001a6e:	bf24      	itt	cs
 8001a70:	68cb      	ldrcs	r3, [r1, #12]
 8001a72:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8001a74:	3801      	subs	r0, #1
 8001a76:	d1e4      	bne.n	8001a42 <Vector90+0x292>
 8001a78:	9b02      	ldr	r3, [sp, #8]
 8001a7a:	9a03      	ldr	r2, [sp, #12]
 8001a7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001a80:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8001a82:	9b01      	ldr	r3, [sp, #4]
 8001a84:	07da      	lsls	r2, r3, #31
 8001a86:	d50b      	bpl.n	8001aa0 <Vector90+0x2f0>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8001a88:	9a02      	ldr	r2, [sp, #8]
 8001a8a:	694b      	ldr	r3, [r1, #20]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	1c58      	adds	r0, r3, #1
 8001a90:	6148      	str	r0, [r1, #20]
 8001a92:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8001a94:	690b      	ldr	r3, [r1, #16]
 8001a96:	694a      	ldr	r2, [r1, #20]
 8001a98:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8001a9a:	bf24      	itt	cs
 8001a9c:	68cb      	ldrcs	r3, [r1, #12]
 8001a9e:	614b      	strcs	r3, [r1, #20]
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8001aa6:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4443      	add	r3, r8
 8001aac:	608b      	str	r3, [r1, #8]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f000 fd76 	bl	80025a0 <chThdDequeueAllI>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	e763      	b.n	8001986 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8001abe:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8001ac2:	f8de 100c 	ldr.w	r1, [lr, #12]
 8001ac6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001aca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001ace:	4418      	add	r0, r3
 8001ad0:	0040      	lsls	r0, r0, #1
 8001ad2:	f7fe fded 	bl	80006b0 <usb_packet_write_from_queue.lto_priv.49>
 8001ad6:	e706      	b.n	80018e6 <Vector90+0x136>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001ad8:	f8df b074 	ldr.w	fp, [pc, #116]	; 8001b50 <Vector90+0x3a0>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8001adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001ade:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8001ae2:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001ae6:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001aea:	2d00      	cmp	r5, #0
 8001aec:	f43f ae83 	beq.w	80017f6 <Vector90+0x46>
 8001af0:	4658      	mov	r0, fp
 8001af2:	2104      	movs	r1, #4
 8001af4:	47a8      	blx	r5
 8001af6:	e67e      	b.n	80017f6 <Vector90+0x46>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8001af8:	f8df b054 	ldr.w	fp, [pc, #84]	; 8001b50 <Vector90+0x3a0>
  usbp->status        = 0;
 8001afc:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8001afe:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001b00:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8001b02:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8001b06:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 8001b0a:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 8001b0e:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8001b12:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8001b16:	f88b 2000 	strb.w	r2, [fp]
 8001b1a:	f10b 0308 	add.w	r3, fp, #8
 8001b1e:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8001b22:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001b26:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8001b28:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8001b2c:	d1f9      	bne.n	8001b22 <Vector90+0x372>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <Vector90+0x3a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001b30:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8001b34:	f7ff fe14 	bl	8001760 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8001b38:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b113      	cbz	r3, 8001b46 <Vector90+0x396>
 8001b40:	4629      	mov	r1, r5
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <Vector90+0x3a0>)
 8001b44:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 8001b46:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <Vector90+0x3a4>)
 8001b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8001b4e:	e637      	b.n	80017c0 <Vector90+0x10>
 8001b50:	200008c0 	.word	0x200008c0
 8001b54:	40005c00 	.word	0x40005c00
	...

08001b60 <set_address.lto_priv.51>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001b60:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001b64:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001b66:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8001b6a:	4906      	ldr	r1, [pc, #24]	; (8001b84 <set_address.lto_priv.51+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8001b72:	b510      	push	{r4, lr}
 8001b74:	4604      	mov	r4, r0
 8001b76:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001b78:	b10a      	cbz	r2, 8001b7e <set_address.lto_priv.51+0x1e>
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	7023      	strb	r3, [r4, #0]
 8001b82:	bd10      	pop	{r4, pc}
 8001b84:	40005c00 	.word	0x40005c00
	...

08001b90 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
	...

08001ba0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001ba0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8001ba4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d001      	beq.n	8001bb0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 8001bac:	2000      	movs	r0, #0
    }
  }
  return false;
}
 8001bae:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8001bb0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8001bb4:	2b21      	cmp	r3, #33	; 0x21
 8001bb6:	d003      	beq.n	8001bc0 <sduRequestsHook+0x20>
 8001bb8:	2b22      	cmp	r3, #34	; 0x22
 8001bba:	d009      	beq.n	8001bd0 <sduRequestsHook+0x30>
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d1f5      	bne.n	8001bac <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001bc0:	4906      	ldr	r1, [pc, #24]	; (8001bdc <sduRequestsHook+0x3c>)
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6681      	str	r1, [r0, #104]	; 0x68
 8001bc8:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001bca:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6683      	str	r3, [r0, #104]	; 0x68
 8001bd4:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001bd6:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	4770      	bx	lr
 8001bdc:	20000818 	.word	0x20000818

08001be0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001be0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001be4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001be6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001bea:	2300      	movs	r3, #0
 8001bec:	f383 8811 	msr	BASEPRI, r3
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
	...

08001c00 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001c00:	b410      	push	{r4}
 8001c02:	2320      	movs	r3, #32
 8001c04:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001c08:	4c09      	ldr	r4, [pc, #36]	; (8001c30 <chCoreAlloc+0x30>)
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <chCoreAlloc+0x34>)
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001c10:	1dc3      	adds	r3, r0, #7
 8001c12:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001c16:	1a89      	subs	r1, r1, r2
 8001c18:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8001c1a:	bf9d      	ittte	ls
 8001c1c:	189b      	addls	r3, r3, r2
 8001c1e:	6023      	strls	r3, [r4, #0]

  return p;
 8001c20:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001c22:	2000      	movhi	r0, #0
 8001c24:	2300      	movs	r3, #0
 8001c26:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8001c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000d24 	.word	0x20000d24
 8001c34:	20000d20 	.word	0x20000d20
	...

08001c40 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001c40:	b410      	push	{r4}
 8001c42:	2320      	movs	r3, #32
 8001c44:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001c48:	7f03      	ldrb	r3, [r0, #28]
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	d80e      	bhi.n	8001c6c <wakeup+0x2c>
 8001c4e:	e8df f003 	tbb	[pc, r3]
 8001c52:	0d27      	.short	0x0d27
 8001c54:	0408230d 	.word	0x0408230d
 8001c58:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8001c5a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8001c5c:	6893      	ldr	r3, [r2, #8]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001c62:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001c66:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001c68:	6802      	ldr	r2, [r0, #0]
 8001c6a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001c6c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001c70:	2200      	movs	r2, #0
 8001c72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001c76:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001c78:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001c7a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	428a      	cmp	r2, r1
 8001c80:	d2fb      	bcs.n	8001c7a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001c86:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8001c88:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 8001c8a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8001c8c:	6058      	str	r0, [r3, #4]
 8001c8e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c96:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8001c98:	6a03      	ldr	r3, [r0, #32]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e7e5      	b.n	8001c6c <wakeup+0x2c>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8001ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000db0 	.word	0x20000db0

08001cb0 <_idle_thread.lto_priv.37>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8001cb0:	e7fe      	b.n	8001cb0 <_idle_thread.lto_priv.37>
 8001cb2:	bf00      	nop
	...

08001cc0 <inotify.lto_priv.35>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8001cc2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001cc4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	7819      	ldrb	r1, [r3, #0]
 8001ccc:	2904      	cmp	r1, #4
 8001cce:	d000      	beq.n	8001cd2 <inotify.lto_priv.35+0x12>
 8001cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd2:	7a21      	ldrb	r1, [r4, #8]
 8001cd4:	2902      	cmp	r1, #2
 8001cd6:	d1fb      	bne.n	8001cd0 <inotify.lto_priv.35+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8001cd8:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001cda:	2601      	movs	r6, #1
 8001cdc:	895a      	ldrh	r2, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8001cde:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001ce2:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001ce4:	fa06 f101 	lsl.w	r1, r6, r1
 8001ce8:	ea11 0502 	ands.w	r5, r1, r2
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8001cec:	8a58      	ldrh	r0, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8001cee:	d1ef      	bne.n	8001cd0 <inotify.lto_priv.35+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8001cf0:	69a3      	ldr	r3, [r4, #24]
 8001cf2:	69e2      	ldr	r2, [r4, #28]
 8001cf4:	6961      	ldr	r1, [r4, #20]
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	1a53      	subs	r3, r2, r1
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d8e8      	bhi.n	8001cd0 <inotify.lto_priv.35+0x10>
 8001cfe:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8001d02:	fbb3 f3f0 	udiv	r3, r3, r0
      usbPrepareQueuedReceive(sdup->config->usbp,
 8001d06:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8001d0a:	fb00 f303 	mul.w	r3, r0, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 8001d0e:	7951      	ldrb	r1, [r2, #5]
 8001d10:	6810      	ldr	r0, [r2, #0]
 8001d12:	f104 070c 	add.w	r7, r4, #12
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001d16:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001d1a:	68d2      	ldr	r2, [r2, #12]
 8001d1c:	6992      	ldr	r2, [r2, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8001d1e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8001d20:	7016      	strb	r6, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8001d22:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8001d24:	60d7      	str	r7, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8001d26:	f7ff fc43 	bl	80015b0 <usb_lld_prepare_receive>
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8001d30:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 8001d38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8001d3c:	f7fe bd98 	b.w	8000870 <usbStartReceiveI>

08001d40 <onotify.lto_priv.36>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8001d42:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001d44:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	2904      	cmp	r1, #4
 8001d4e:	d000      	beq.n	8001d52 <onotify.lto_priv.36+0x12>
 8001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d52:	7a21      	ldrb	r1, [r4, #8]
 8001d54:	2902      	cmp	r1, #2
 8001d56:	d1fb      	bne.n	8001d50 <onotify.lto_priv.36+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8001d58:	7912      	ldrb	r2, [r2, #4]
 8001d5a:	891b      	ldrh	r3, [r3, #8]
 8001d5c:	2601      	movs	r6, #1
 8001d5e:	fa06 f202 	lsl.w	r2, r6, r2
 8001d62:	ea12 0503 	ands.w	r5, r2, r3
 8001d66:	d1f3      	bne.n	8001d50 <onotify.lto_priv.36+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8001d68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d6e:	1ad3      	subs	r3, r2, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8001d70:	1a5b      	subs	r3, r3, r1
 8001d72:	d0ed      	beq.n	8001d50 <onotify.lto_priv.36+0x10>
 8001d74:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 8001d78:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8001d7c:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8001d80:	680a      	ldr	r2, [r1, #0]
 8001d82:	7909      	ldrb	r1, [r1, #4]
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8001d84:	4610      	mov	r0, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001d86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001d8a:	68d2      	ldr	r2, [r2, #12]
 8001d8c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8001d8e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8001d90:	7016      	strb	r6, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8001d92:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8001d94:	60d7      	str	r7, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8001d96:	f7ff fbcb 	bl	8001530 <usb_lld_prepare_transmit>
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8001da0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	7919      	ldrb	r1, [r3, #4]
    }
  }
}
 8001da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8001dac:	f7fe bce0 	b.w	8000770 <usbStartTransmitI>

08001db0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001db2:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001db4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001db6:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8001db8:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001dba:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 8001dbc:	2600      	movs	r6, #0
 8001dbe:	68a1      	ldr	r1, [r4, #8]
 8001dc0:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001dc2:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001dc4:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001dc6:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001dc8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001dca:	7726      	strb	r6, [r4, #28]
 8001dcc:	e000      	b.n	8001dd0 <chSchDoRescheduleAhead+0x20>
 8001dce:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d8fb      	bhi.n	8001dce <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001dd6:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001dd8:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001dda:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 8001ddc:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 8001dde:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8001de0:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001de2:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001de4:	f7fe ba0c 	b.w	8000200 <_port_switch>
 8001de8:	20000db0 	.word	0x20000db0
 8001dec:	00000000 	.word	0x00000000

08001df0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001df2:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001df4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001df6:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001df8:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001dfa:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 8001dfc:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001dfe:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001e00:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001e02:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001e04:	4610      	mov	r0, r2
}
 8001e06:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001e08:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001e0a:	f7fe b9f9 	b.w	8000200 <_port_switch>
 8001e0e:	bf00      	nop
 8001e10:	20000db0 	.word	0x20000db0
	...

08001e20 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001e28:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001e2a:	b086      	sub	sp, #24

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001e2c:	d051      	beq.n	8001ed2 <chSchGoSleepTimeoutS+0xb2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001e2e:	4c49      	ldr	r4, [pc, #292]	; (8001f54 <chSchGoSleepTimeoutS+0x134>)
 8001e30:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e34:	4625      	mov	r5, r4
 8001e36:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001e3c:	2901      	cmp	r1, #1
 8001e3e:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001e40:	f8df e114 	ldr.w	lr, [pc, #276]	; 8001f58 <chSchGoSleepTimeoutS+0x138>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001e44:	69a0      	ldr	r0, [r4, #24]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001e46:	bf98      	it	ls
 8001e48:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e4a:	42aa      	cmp	r2, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001e4c:	9005      	str	r0, [sp, #20]
 8001e4e:	b29b      	uxth	r3, r3
  vtp->vt_func = vtfunc;
 8001e50:	f8cd e010 	str.w	lr, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001e54:	d064      	beq.n	8001f20 <chSchGoSleepTimeoutS+0x100>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001e56:	4419      	add	r1, r3
 8001e58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001e5a:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001e5c:	8910      	ldrh	r0, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001e62:	4283      	cmp	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001e64:	bf38      	it	cc
 8001e66:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001e68:	4283      	cmp	r3, r0
 8001e6a:	d905      	bls.n	8001e78 <chSchGoSleepTimeoutS+0x58>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001e6c:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001e6e:	1a1b      	subs	r3, r3, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001e70:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 8001e72:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001e74:	4298      	cmp	r0, r3
 8001e76:	d3f9      	bcc.n	8001e6c <chSchGoSleepTimeoutS+0x4c>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001e78:	f64f 70ff 	movw	r0, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001e7c:	6851      	ldr	r1, [r2, #4]
  vtp->vt_prev->vt_next = vtp;
 8001e7e:	f10d 0804 	add.w	r8, sp, #4
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001e82:	9102      	str	r1, [sp, #8]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001e84:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001e86:	f8c1 8000 	str.w	r8, [r1]
  p->vt_prev = vtp;
 8001e8a:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_delta = delta
 8001e8e:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001e92:	8911      	ldrh	r1, [r2, #8]
 8001e94:	1acb      	subs	r3, r1, r3
 8001e96:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001e98:	84a0      	strh	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	f7ff ffa8 	bl	8001df0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001ea0:	9b04      	ldr	r3, [sp, #16]
 8001ea2:	b18b      	cbz	r3, 8001ec8 <chSchGoSleepTimeoutS+0xa8>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001ea4:	69e3      	ldr	r3, [r4, #28]
 8001ea6:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <chSchGoSleepTimeoutS+0x134>)
 8001ea8:	4543      	cmp	r3, r8
 8001eaa:	d01a      	beq.n	8001ee2 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001eac:	9a02      	ldr	r2, [sp, #8]
 8001eae:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8001eb0:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001eb2:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001eb4:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001eb6:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001eb8:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001eba:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001ebc:	d004      	beq.n	8001ec8 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001ebe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001ec2:	891a      	ldrh	r2, [r3, #8]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001ec8:	69a3      	ldr	r3, [r4, #24]
}
 8001eca:	6a18      	ldr	r0, [r3, #32]
 8001ecc:	b006      	add	sp, #24
 8001ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001ed2:	f7ff ff8d 	bl	8001df0 <chSchGoSleepS>
 8001ed6:	4c1f      	ldr	r4, [pc, #124]	; (8001f54 <chSchGoSleepTimeoutS+0x134>)
  }

  return currp->p_u.rdymsg;
 8001ed8:	69a3      	ldr	r3, [r4, #24]
}
 8001eda:	6a18      	ldr	r0, [r3, #32]
 8001edc:	b006      	add	sp, #24
 8001ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001ee2:	9e01      	ldr	r6, [sp, #4]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001ee4:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001ee6:	42ae      	cmp	r6, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001ee8:	61d6      	str	r6, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001eea:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 8001eec:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001eee:	d02c      	beq.n	8001f4a <chSchGoSleepTimeoutS+0x12a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001ef0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ef4:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001ef6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001ef8:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8001efc:	8933      	ldrh	r3, [r6, #8]
 8001efe:	b28a      	uxth	r2, r1
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001f00:	1b51      	subs	r1, r2, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001f02:	443b      	add	r3, r7
 8001f04:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001f06:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001f08:	428b      	cmp	r3, r1

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001f0a:	8133      	strh	r3, [r6, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001f0c:	d9dc      	bls.n	8001ec8 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001f0e:	1a5b      	subs	r3, r3, r1
 8001f10:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	bf98      	it	ls
 8001f16:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001f18:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	6343      	str	r3, [r0, #52]	; 0x34
 8001f1e:	e7d3      	b.n	8001ec8 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001f20:	18ca      	adds	r2, r1, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001f22:	f10d 0804 	add.w	r8, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f26:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 8001f28:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f2c:	2002      	movs	r0, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8001f2e:	84e3      	strh	r3, [r4, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001f30:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001f32:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8001f34:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001f38:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8001f3c:	f8c4 8020 	str.w	r8, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001f40:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001f42:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	e7a7      	b.n	8001e9a <chSchGoSleepTimeoutS+0x7a>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4e:	60d3      	str	r3, [r2, #12]
 8001f50:	e7ba      	b.n	8001ec8 <chSchGoSleepTimeoutS+0xa8>
 8001f52:	bf00      	nop
 8001f54:	20000db0 	.word	0x20000db0
 8001f58:	08001c41 	.word	0x08001c41
 8001f5c:	00000000 	.word	0x00000000

08001f60 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001f60:	b169      	cbz	r1, 8001f7e <chThdEnqueueTimeoutS+0x1e>
 8001f62:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001f66:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001f68:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f6a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001f6c:	2004      	movs	r0, #4
 8001f6e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001f72:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001f74:	6053      	str	r3, [r2, #4]
}
 8001f76:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001f7a:	f7ff bf51 	b.w	8001e20 <chSchGoSleepTimeoutS>
}
 8001f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f82:	4770      	bx	lr
 8001f84:	20000db0 	.word	0x20000db0
	...

08001f90 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	b083      	sub	sp, #12
 8001f96:	4604      	mov	r4, r0
 8001f98:	468b      	mov	fp, r1
 8001f9a:	4615      	mov	r5, r2
 8001f9c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001f9e:	69c7      	ldr	r7, [r0, #28]
 8001fa0:	f04f 0820 	mov.w	r8, #32
 8001fa4:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001fa8:	2600      	movs	r6, #0
 8001faa:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 8001fac:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001fae:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001fb2:	b1fb      	cbz	r3, 8001ff4 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001fb4:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001fb6:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001fb8:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001fba:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 8001fbc:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001fbe:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001fc0:	f89b 3000 	ldrb.w	r3, [fp]
 8001fc4:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001fc6:	6923      	ldr	r3, [r4, #16]
 8001fc8:	6962      	ldr	r2, [r4, #20]
 8001fca:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001fcc:	bf24      	itt	cs
 8001fce:	68e3      	ldrcs	r3, [r4, #12]
 8001fd0:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001fd2:	b10f      	cbz	r7, 8001fd8 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	47b8      	blx	r7
 8001fd8:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 8001fdc:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 8001fde:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001fe2:	d011      	beq.n	8002008 <chOQWriteTimeout+0x78>
 8001fe4:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001fe8:	46d3      	mov	fp, sl
 8001fea:	68a3      	ldr	r3, [r4, #8]
 8001fec:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1df      	bne.n	8001fb4 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	9901      	ldr	r1, [sp, #4]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f7ff ffb1 	bl	8001f60 <chThdEnqueueTimeoutS>
 8001ffe:	9b00      	ldr	r3, [sp, #0]
 8002000:	2800      	cmp	r0, #0
 8002002:	d0d3      	beq.n	8001fac <chOQWriteTimeout+0x1c>
 8002004:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8002008:	4630      	mov	r0, r6
 800200a:	b003      	add	sp, #12
 800200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002010 <writet.lto_priv.46>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 8002010:	3030      	adds	r0, #48	; 0x30
 8002012:	f7ff bfbd 	b.w	8001f90 <chOQWriteTimeout>
 8002016:	bf00      	nop
	...

08002020 <write.lto_priv.40>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8002020:	3030      	adds	r0, #48	; 0x30
 8002022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002026:	f7ff bfb3 	b.w	8001f90 <chOQWriteTimeout>
 800202a:	bf00      	nop
 800202c:	0000      	movs	r0, r0
	...

08002030 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	4604      	mov	r4, r0
 8002034:	460f      	mov	r7, r1
 8002036:	4616      	mov	r6, r2
 8002038:	2320      	movs	r3, #32
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	e005      	b.n	800204c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8002040:	4620      	mov	r0, r4
 8002042:	4631      	mov	r1, r6
 8002044:	f7ff ff8c 	bl	8001f60 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8002048:	2800      	cmp	r0, #0
 800204a:	db17      	blt.n	800207c <chOQPutTimeout+0x4c>
 800204c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800204e:	2d00      	cmp	r5, #0
 8002050:	d0f6      	beq.n	8002040 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8002052:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002054:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8002056:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002058:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800205a:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800205c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800205e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8002060:	6923      	ldr	r3, [r4, #16]
 8002062:	6962      	ldr	r2, [r4, #20]
 8002064:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002066:	bf24      	itt	cs
 8002068:	68e3      	ldrcs	r3, [r4, #12]
 800206a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800206c:	69e3      	ldr	r3, [r4, #28]
 800206e:	b10b      	cbz	r3, 8002074 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8002070:	4620      	mov	r0, r4
 8002072:	4798      	blx	r3
 8002074:	2000      	movs	r0, #0
 8002076:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800207c:	f385 8811 	msr	BASEPRI, r5
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002082:	bf00      	nop
	...

08002090 <putt.lto_priv.44>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8002090:	3030      	adds	r0, #48	; 0x30
 8002092:	f7ff bfcd 	b.w	8002030 <chOQPutTimeout>
 8002096:	bf00      	nop
	...

080020a0 <put.lto_priv.42>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 80020a0:	3030      	adds	r0, #48	; 0x30
 80020a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a6:	f7ff bfc3 	b.w	8002030 <chOQPutTimeout>
 80020aa:	bf00      	nop
 80020ac:	0000      	movs	r0, r0
	...

080020b0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b4:	4604      	mov	r4, r0
 80020b6:	b083      	sub	sp, #12
 80020b8:	4689      	mov	r9, r1
 80020ba:	4693      	mov	fp, r2
 80020bc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80020be:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80020c2:	2720      	movs	r7, #32
 80020c4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80020c8:	2600      	movs	r6, #0
 80020ca:	46b2      	mov	sl, r6
 80020cc:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 80020ce:	f1b8 0f00 	cmp.w	r8, #0
 80020d2:	d007      	beq.n	80020e4 <chIQReadTimeout+0x34>
      nfy(iqp);
 80020d4:	4620      	mov	r0, r4
 80020d6:	47c0      	blx	r8
 80020d8:	e004      	b.n	80020e4 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7ff ff3f 	bl	8001f60 <chThdEnqueueTimeoutS>
 80020e2:	b9d0      	cbnz	r0, 800211a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 80020e4:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 80020e6:	2f00      	cmp	r7, #0
 80020e8:	d0f7      	beq.n	80020da <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80020ea:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80020ec:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020ee:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80020f0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80020f2:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80020f4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020f6:	7813      	ldrb	r3, [r2, #0]
 80020f8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 80020fc:	6923      	ldr	r3, [r4, #16]
 80020fe:	69a2      	ldr	r2, [r4, #24]
 8002100:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8002102:	bf24      	itt	cs
 8002104:	68e3      	ldrcs	r3, [r4, #12]
 8002106:	61a3      	strcs	r3, [r4, #24]
 8002108:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800210c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800210e:	45b3      	cmp	fp, r6
 8002110:	d005      	beq.n	800211e <chIQReadTimeout+0x6e>
 8002112:	9b01      	ldr	r3, [sp, #4]
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	e7d9      	b.n	80020ce <chIQReadTimeout+0x1e>
 800211a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800211e:	4630      	mov	r0, r6
 8002120:	b003      	add	sp, #12
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	bf00      	nop
	...

08002130 <readt.lto_priv.47>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 8002130:	300c      	adds	r0, #12
 8002132:	f7ff bfbd 	b.w	80020b0 <chIQReadTimeout>
 8002136:	bf00      	nop
	...

08002140 <read.lto_priv.41>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8002140:	300c      	adds	r0, #12
 8002142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002146:	f7ff bfb3 	b.w	80020b0 <chIQReadTimeout>
 800214a:	bf00      	nop
 800214c:	0000      	movs	r0, r0
	...

08002150 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8002150:	b570      	push	{r4, r5, r6, lr}
 8002152:	2320      	movs	r3, #32
 8002154:	460e      	mov	r6, r1
 8002156:	4604      	mov	r4, r0
 8002158:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800215c:	69c3      	ldr	r3, [r0, #28]
 800215e:	b13b      	cbz	r3, 8002170 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8002160:	4798      	blx	r3
 8002162:	e005      	b.n	8002170 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8002164:	4620      	mov	r0, r4
 8002166:	4631      	mov	r1, r6
 8002168:	f7ff fefa 	bl	8001f60 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800216c:	2800      	cmp	r0, #0
 800216e:	db13      	blt.n	8002198 <chIQGetTimeout+0x48>
 8002170:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8002172:	2d00      	cmp	r5, #0
 8002174:	d0f6      	beq.n	8002164 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002176:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002178:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800217a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800217c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800217e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8002180:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002182:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8002184:	bf28      	it	cs
 8002186:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002188:	61a2      	str	r2, [r4, #24]
 800218a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800218c:	bf28      	it	cs
 800218e:	61a3      	strcs	r3, [r4, #24]
 8002190:	2300      	movs	r3, #0
 8002192:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f385 8811 	msr	BASEPRI, r5
 800219c:	bd70      	pop	{r4, r5, r6, pc}
 800219e:	bf00      	nop

080021a0 <gett.lto_priv.45>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 80021a0:	300c      	adds	r0, #12
 80021a2:	f7ff bfd5 	b.w	8002150 <chIQGetTimeout>
 80021a6:	bf00      	nop
	...

080021b0 <get.lto_priv.43>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 80021b0:	300c      	adds	r0, #12
 80021b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021b6:	f7ff bfcb 	b.w	8002150 <chIQGetTimeout>
 80021ba:	bf00      	nop
 80021bc:	0000      	movs	r0, r0
	...

080021c0 <_port_irq_epilogue>:
 80021c0:	2320      	movs	r3, #32
 80021c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <_port_irq_epilogue+0x44>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80021ce:	d102      	bne.n	80021d6 <_port_irq_epilogue+0x16>
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80021d6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80021da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021de:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80021e2:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80021e6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80021ea:	4a07      	ldr	r2, [pc, #28]	; (8002208 <_port_irq_epilogue+0x48>)
 80021ec:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80021ee:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80021f0:	6889      	ldr	r1, [r1, #8]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80021f6:	bf8c      	ite	hi
 80021f8:	4a04      	ldrhi	r2, [pc, #16]	; (800220c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80021fa:	4a05      	ldrls	r2, [pc, #20]	; (8002210 <_port_irq_epilogue+0x50>)
 80021fc:	f843 2c08 	str.w	r2, [r3, #-8]
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00
 8002208:	20000db0 	.word	0x20000db0
 800220c:	08000221 	.word	0x08000221
 8002210:	08000224 	.word	0x08000224
	...

08002220 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002222:	490f      	ldr	r1, [pc, #60]	; (8002260 <chTMStopMeasurementX+0x40>)
 8002224:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8002226:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002228:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800222e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8002230:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002232:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002234:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002238:	18e4      	adds	r4, r4, r3
 800223a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800223e:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8002240:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002242:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8002244:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002246:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800224a:	d805      	bhi.n	8002258 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800224c:	6802      	ldr	r2, [r0, #0]
 800224e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8002250:	bf38      	it	cc
 8002252:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8002254:	bc30      	pop	{r4, r5}
 8002256:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8002258:	6043      	str	r3, [r0, #4]
 800225a:	e7fb      	b.n	8002254 <chTMStopMeasurementX+0x34>
 800225c:	e0001000 	.word	0xe0001000
 8002260:	20000db0 	.word	0x20000db0
	...

08002270 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8002270:	b508      	push	{r3, lr}
 8002272:	4601      	mov	r1, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002274:	2320      	movs	r3, #32
 8002276:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800227a:	2008      	movs	r0, #8
 800227c:	f7ff fdd0 	bl	8001e20 <chSchGoSleepTimeoutS>
 8002280:	2300      	movs	r3, #0
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	bd08      	pop	{r3, pc}
	...

08002290 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8002290:	f7ff bd8e 	b.w	8001db0 <chSchDoRescheduleAhead>
	...

080022a0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <chSchRescheduleS+0x14>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d800      	bhi.n	80022b0 <chSchRescheduleS+0x10>
 80022ae:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80022b0:	f7ff bd7e 	b.w	8001db0 <chSchDoRescheduleAhead>
 80022b4:	20000db0 	.word	0x20000db0
	...

080022c0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80022c0:	b410      	push	{r4}
 80022c2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80022c4:	2200      	movs	r2, #0
 80022c6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80022ca:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80022cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	428a      	cmp	r2, r1
 80022d2:	d2fb      	bcs.n	80022cc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80022d4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80022d6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80022d8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80022da:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80022dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80022de:	605c      	str	r4, [r3, #4]

  return tp;
}
 80022e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000db0 	.word	0x20000db0
 80022ec:	00000000 	.word	0x00000000

080022f0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80022f2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80022f4:	42a0      	cmp	r0, r4
 80022f6:	d021      	beq.n	800233c <chEvtBroadcastFlagsI+0x4c>
 80022f8:	460e      	mov	r6, r1
 80022fa:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80022fc:	2500      	movs	r5, #0
 80022fe:	e002      	b.n	8002306 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002300:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002302:	42a7      	cmp	r7, r4
 8002304:	d01a      	beq.n	800233c <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8002306:	68e3      	ldr	r3, [r4, #12]
 8002308:	4333      	orrs	r3, r6
 800230a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800230c:	b116      	cbz	r6, 8002314 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800230e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8002310:	4213      	tst	r3, r2
 8002312:	d0f5      	beq.n	8002300 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8002314:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002316:	68a3      	ldr	r3, [r4, #8]
 8002318:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800231a:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800231c:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800231e:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002320:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002322:	d00c      	beq.n	800233e <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8002324:	2a0b      	cmp	r2, #11
 8002326:	d1eb      	bne.n	8002300 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8002328:	6a02      	ldr	r2, [r0, #32]
 800232a:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800232c:	429a      	cmp	r2, r3
 800232e:	d1e7      	bne.n	8002300 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8002330:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8002332:	f7ff ffc5 	bl	80022c0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8002336:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002338:	42a7      	cmp	r7, r4
 800233a:	d1e4      	bne.n	8002306 <chEvtBroadcastFlagsI+0x16>
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800233e:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002340:	4213      	tst	r3, r2
 8002342:	d0dd      	beq.n	8002300 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8002344:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8002346:	f7ff ffbb 	bl	80022c0 <chSchReadyI>
 800234a:	e7f4      	b.n	8002336 <chEvtBroadcastFlagsI+0x46>
 800234c:	0000      	movs	r0, r0
	...

08002350 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002350:	f101 0311 	add.w	r3, r1, #17
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8002354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8002358:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 800235c:	b1bc      	cbz	r4, 800238e <sduDataReceived+0x3e>
 800235e:	4607      	mov	r7, r0
 8002360:	460d      	mov	r5, r1
 8002362:	f04f 0820 	mov.w	r8, #32
 8002366:	f388 8811 	msr	BASEPRI, r8
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800236a:	2104      	movs	r1, #4
 800236c:	1860      	adds	r0, r4, r1
 800236e:	f7ff ffbf 	bl	80022f0 <chEvtBroadcastFlagsI>
 8002372:	eb07 0085 	add.w	r0, r7, r5, lsl #2
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8002376:	68c1      	ldr	r1, [r0, #12]
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8002378:	69e2      	ldr	r2, [r4, #28]
 800237a:	69a6      	ldr	r6, [r4, #24]
 800237c:	6963      	ldr	r3, [r4, #20]
 800237e:	8a49      	ldrh	r1, [r1, #18]
 8002380:	1b92      	subs	r2, r2, r6
 8002382:	1ad3      	subs	r3, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8002384:	4299      	cmp	r1, r3
 8002386:	d904      	bls.n	8002392 <sduDataReceived+0x42>
 8002388:	2300      	movs	r3, #0
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002392:	f04f 0e00 	mov.w	lr, #0
 8002396:	f38e 8811 	msr	BASEPRI, lr
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800239e:	68c2      	ldr	r2, [r0, #12]
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80023a6:	340c      	adds	r4, #12

  osp->rxqueued           = true;
 80023a8:	2101      	movs	r1, #1
 80023aa:	7011      	strb	r1, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80023ac:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 80023ae:	f8c2 e008 	str.w	lr, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 80023b2:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80023b4:	4638      	mov	r0, r7
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7ff f8fa 	bl	80015b0 <usb_lld_prepare_receive>
 80023bc:	f388 8811 	msr	BASEPRI, r8

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 80023c0:	4638      	mov	r0, r7
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fe fa54 	bl	8000870 <usbStartReceiveI>
 80023c8:	e7de      	b.n	8002388 <sduDataReceived+0x38>
 80023ca:	bf00      	nop
 80023cc:	0000      	movs	r0, r0
	...

080023d0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 80023d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80023d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  if (sdup == NULL) {
 80023d8:	b1bc      	cbz	r4, 800240a <sduDataTransmitted+0x3a>
 80023da:	460e      	mov	r6, r1
 80023dc:	4605      	mov	r5, r0
 80023de:	2720      	movs	r7, #32
 80023e0:	f387 8811 	msr	BASEPRI, r7
 80023e4:	2108      	movs	r1, #8
 80023e6:	1d20      	adds	r0, r4, #4
 80023e8:	f7ff ff82 	bl	80022f0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80023ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80023f2:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80023f4:	1a5b      	subs	r3, r3, r1
 80023f6:	d118      	bne.n	800242a <sduDataTransmitted+0x5a>
 80023f8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80023fc:	68cb      	ldr	r3, [r1, #12]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	6852      	ldr	r2, [r2, #4]
 8002402:	b91a      	cbnz	r2, 800240c <sduDataTransmitted+0x3c>
 8002404:	2300      	movs	r3, #0
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800240c:	8a1b      	ldrh	r3, [r3, #16]
 800240e:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8002410:	4013      	ands	r3, r2
 8002412:	d1f7      	bne.n	8002404 <sduDataTransmitted+0x34>
 8002414:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002418:	68ca      	ldr	r2, [r1, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 800241a:	3430      	adds	r4, #48	; 0x30
 800241c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800241e:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8002420:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8002422:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8002424:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8002426:	7011      	strb	r1, [r2, #0]
 8002428:	e00c      	b.n	8002444 <sduDataTransmitted+0x74>
 800242a:	2100      	movs	r1, #0
 800242c:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002430:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8002434:	68d2      	ldr	r2, [r2, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8002436:	3430      	adds	r4, #48	; 0x30
 8002438:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 800243a:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
 800243c:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 800243e:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8002440:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8002442:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002444:	4628      	mov	r0, r5
 8002446:	4631      	mov	r1, r6
 8002448:	f7ff f872 	bl	8001530 <usb_lld_prepare_transmit>
 800244c:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 8002450:	4628      	mov	r0, r5
 8002452:	4631      	mov	r1, r6
 8002454:	f7fe f98c 	bl	8000770 <usbStartTransmitI>
 8002458:	e7d4      	b.n	8002404 <sduDataTransmitted+0x34>
 800245a:	bf00      	nop
 800245c:	0000      	movs	r0, r0
	...

08002460 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8002462:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002464:	699d      	ldr	r5, [r3, #24]
 8002466:	2320      	movs	r3, #32
 8002468:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800246c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800246e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002470:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8002472:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002474:	d01d      	beq.n	80024b2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002476:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002478:	b14b      	cbz	r3, 800248e <chMtxUnlock+0x2e>
 800247a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	4291      	cmp	r1, r2
 8002484:	bf38      	it	cc
 8002486:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8002488:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f5      	bne.n	800247a <chMtxUnlock+0x1a>
 800248e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8002490:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8002492:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8002494:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8002496:	60a9      	str	r1, [r5, #8]
 8002498:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800249a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800249c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800249e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 80024a0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80024a2:	f7ff ff0d 	bl	80022c0 <chSchReadyI>
      chSchRescheduleS();
 80024a6:	f7ff fefb 	bl	80022a0 <chSchRescheduleS>
 80024aa:	2300      	movs	r3, #0
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	6083      	str	r3, [r0, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	bf00      	nop
 80024c0:	20000db0 	.word	0x20000db0
	...

080024d0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80024d2:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <chMtxLockS+0xc4>)
 80024d6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80024d8:	2a00      	cmp	r2, #0
 80024da:	d055      	beq.n	8002588 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80024dc:	68a1      	ldr	r1, [r4, #8]
 80024de:	6893      	ldr	r3, [r2, #8]
 80024e0:	4605      	mov	r5, r0
 80024e2:	4299      	cmp	r1, r3
 80024e4:	d906      	bls.n	80024f4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80024e6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80024e8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d033      	beq.n	8002556 <chMtxLockS+0x86>
 80024ee:	2b07      	cmp	r3, #7
 80024f0:	d01d      	beq.n	800252e <chMtxLockS+0x5e>
 80024f2:	b19b      	cbz	r3, 800251c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80024f4:	462b      	mov	r3, r5
 80024f6:	e003      	b.n	8002500 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	68a2      	ldr	r2, [r4, #8]
 80024fc:	4291      	cmp	r1, r2
 80024fe:	d302      	bcc.n	8002506 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8002500:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002502:	429d      	cmp	r5, r3
 8002504:	d1f8      	bne.n	80024f8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002506:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8002508:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800250a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 800250c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800250e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8002510:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8002512:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8002514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8002518:	f7ff bc6a 	b.w	8001df0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800251c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8002520:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8002522:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	6053      	str	r3, [r2, #4]
 8002528:	f7ff feca 	bl	80022c0 <chSchReadyI>
 800252c:	e7e2      	b.n	80024f4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800252e:	6817      	ldr	r7, [r2, #0]
 8002530:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8002532:	6a16      	ldr	r6, [r2, #32]
 8002534:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8002536:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8002538:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	e002      	b.n	8002544 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800253e:	6898      	ldr	r0, [r3, #8]
 8002540:	4288      	cmp	r0, r1
 8002542:	d302      	bcc.n	800254a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8002544:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002546:	429e      	cmp	r6, r3
 8002548:	d1f9      	bne.n	800253e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800254a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800254c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 800254e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8002550:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e7ce      	b.n	80024f4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8002556:	6817      	ldr	r7, [r2, #0]
 8002558:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800255a:	6a16      	ldr	r6, [r2, #32]
 800255c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800255e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8002560:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	e002      	b.n	800256c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002566:	6898      	ldr	r0, [r3, #8]
 8002568:	4288      	cmp	r0, r1
 800256a:	d302      	bcc.n	8002572 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800256c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800256e:	429e      	cmp	r6, r3
 8002570:	d1f9      	bne.n	8002566 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002572:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8002574:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8002576:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8002578:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800257a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800257c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800257e:	68a1      	ldr	r1, [r4, #8]
 8002580:	6893      	ldr	r3, [r2, #8]
 8002582:	428b      	cmp	r3, r1
 8002584:	d3af      	bcc.n	80024e6 <chMtxLockS+0x16>
 8002586:	e7b5      	b.n	80024f4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8002588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800258a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800258c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800258e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002592:	bf00      	nop
 8002594:	20000db0 	.word	0x20000db0
	...

080025a0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80025a0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80025a2:	6803      	ldr	r3, [r0, #0]
 80025a4:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 80025a6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80025a8:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 80025aa:	d009      	beq.n	80025c0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80025ac:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 80025ae:	4618      	mov	r0, r3
 80025b0:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80025b2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80025b4:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 80025b6:	f7ff fe83 	bl	80022c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	429c      	cmp	r4, r3
 80025be:	d1f5      	bne.n	80025ac <chThdDequeueAllI+0xc>
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	bf00      	nop
	...

080025d0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80025d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <chThdExitS+0x3c>)
 80025d4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80025d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80025d8:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80025dc:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80025de:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80025e0:	d007      	beq.n	80025f2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80025e2:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80025e4:	4618      	mov	r0, r3
 80025e6:	6262      	str	r2, [r4, #36]	; 0x24
 80025e8:	f7ff fe6a 	bl	80022c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80025ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80025ee:	42ab      	cmp	r3, r5
 80025f0:	d1f7      	bne.n	80025e2 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80025f2:	7f63      	ldrb	r3, [r4, #29]
 80025f4:	079b      	lsls	r3, r3, #30
 80025f6:	d104      	bne.n	8002602 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80025f8:	6922      	ldr	r2, [r4, #16]
 80025fa:	6963      	ldr	r3, [r4, #20]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	6922      	ldr	r2, [r4, #16]
 8002600:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002602:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002608:	f7ff bbf2 	b.w	8001df0 <chSchGoSleepS>
 800260c:	20000db0 	.word	0x20000db0

08002610 <chThdExit>:
 8002610:	2320      	movs	r3, #32
 8002612:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8002616:	f7ff bfdb 	b.w	80025d0 <chThdExitS>
 800261a:	bf00      	nop
 800261c:	0000      	movs	r0, r0
	...

08002620 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8002620:	e7fe      	b.n	8002620 <BusFault_Handler>
 8002622:	bf00      	nop
	...

08002630 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8002630:	e7fe      	b.n	8002630 <__default_exit>
 8002632:	bf00      	nop
	...

08002640 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
	...

08002650 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
	...

08002660 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 8002660:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002664:	46b0      	mov	r8, r6
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <Thread1+0x38>)
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <Thread1+0x3c>)
 800266a:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 800266c:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 800266e:	4d0c      	ldr	r5, [pc, #48]	; (80026a0 <Thread1+0x40>)
 8002670:	4f0c      	ldr	r7, [pc, #48]	; (80026a4 <Thread1+0x44>)
 8002672:	619a      	str	r2, [r3, #24]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 8002674:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 8002676:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf0c      	ite	eq
 800267e:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8002682:	f44f 64fa 	movne.w	r4, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fdf2 	bl	8002270 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 800268c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOC, 13);
 800268e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8002690:	f7ff fdee 	bl	8002270 <chThdSleep>
 8002694:	e7ee      	b.n	8002674 <Thread1+0x14>
 8002696:	bf00      	nop
 8002698:	20000db0 	.word	0x20000db0
 800269c:	080036a0 	.word	0x080036a0
 80026a0:	40011000 	.word	0x40011000
 80026a4:	200008c0 	.word	0x200008c0
	...

080026b0 <adcWatch>:

static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint16_t adc_vals[10];
  uint32_t qei;
  (void)argv;
  if (argc > 0) {
 80026b0:	2900      	cmp	r1, #0
 80026b2:	dc14      	bgt.n	80026de <adcWatch+0x2e>
    return;
  }
}


static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	4604      	mov	r4, r0
 80026b8:	4f0a      	ldr	r7, [pc, #40]	; (80026e4 <adcWatch+0x34>)
 80026ba:	2620      	movs	r6, #32
 80026bc:	2500      	movs	r5, #0
 80026be:	f386 8811 	msr	BASEPRI, r6
 */
qeicnt_t qeiGetCount(QEIDriver *qeip) {
  qeicnt_t cnt;

  osalSysLock();
  cnt = qeiGetCountI(qeip);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c6:	f385 8811 	msr	BASEPRI, r5
    return;
  }
  while(1)
  {
    qei = qeiGetCount(&ENCODER_DEV);
    chprintf(chp, "Value : %d \r\n",qei);
 80026ca:	4907      	ldr	r1, [pc, #28]	; (80026e8 <adcWatch+0x38>)
 80026cc:	b292      	uxth	r2, r2
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7fe fed6 	bl	8001480 <chprintf.lto_priv.48>
    chThdSleepMilliseconds(500);
 80026d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d8:	f7ff fdca 	bl	8002270 <chThdSleep>
 80026dc:	e7ef      	b.n	80026be <adcWatch+0xe>
static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint16_t adc_vals[10];
  uint32_t qei;
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
 80026de:	4903      	ldr	r1, [pc, #12]	; (80026ec <adcWatch+0x3c>)
 80026e0:	f7fe bece 	b.w	8001480 <chprintf.lto_priv.48>
 80026e4:	20000d44 	.word	0x20000d44
 80026e8:	080036a8 	.word	0x080036a8
 80026ec:	080036b8 	.word	0x080036b8

080026f0 <cmd_mem>:


static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80026f0:	2900      	cmp	r1, #0
 80026f2:	dd02      	ble.n	80026fa <cmd_mem+0xa>
    chprintf(chp, "Usage: mem\r\n");
 80026f4:	4901      	ldr	r1, [pc, #4]	; (80026fc <cmd_mem+0xc>)
 80026f6:	f7fe bec3 	b.w	8001480 <chprintf.lto_priv.48>
 80026fa:	4770      	bx	lr
 80026fc:	080036c8 	.word	0x080036c8

08002700 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002700:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8002702:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002704:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8002706:	460e      	mov	r6, r1
 8002708:	4bb7      	ldr	r3, [pc, #732]	; (80029e8 <main+0x2e8>)
 800270a:	f04f 34ff 	mov.w	r4, #4294967295
 800270e:	691d      	ldr	r5, [r3, #16]
  qeiEnable(&ENCODER_DEV);
}
/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8002710:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002714:	611c      	str	r4, [r3, #16]
 8002716:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002718:	68dd      	ldr	r5, [r3, #12]
 800271a:	60dc      	str	r4, [r3, #12]
 800271c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800271e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002720:	4db2      	ldr	r5, [pc, #712]	; (80029ec <main+0x2ec>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002722:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002726:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8002728:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800272a:	4fb1      	ldr	r7, [pc, #708]	; (80029f0 <main+0x2f0>)
 800272c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8002730:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8002a14 <main+0x314>
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	4cad      	ldr	r4, [pc, #692]	; (80029f4 <main+0x2f4>)
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	b089      	sub	sp, #36	; 0x24
 8002742:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8002744:	f85e 3002 	ldr.w	r3, [lr, r2]
 8002748:	320c      	adds	r2, #12
 800274a:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 800274c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002750:	3001      	adds	r0, #1
 8002752:	2807      	cmp	r0, #7
    _stm32_dma_streams[i].channel->CCR = 0;
 8002754:	f04f 0300 	mov.w	r3, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002758:	d1f4      	bne.n	8002744 <main+0x44>
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 800275a:	49a7      	ldr	r1, [pc, #668]	; (80029f8 <main+0x2f8>)
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 800275c:	f242 5c8a 	movw	ip, #9610	; 0x258a
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 8002760:	468b      	mov	fp, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 8002762:	4ca6      	ldr	r4, [pc, #664]	; (80029fc <main+0x2fc>)
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8002768:	489f      	ldr	r0, [pc, #636]	; (80029e8 <main+0x2e8>)
 800276a:	6062      	str	r2, [r4, #4]
 800276c:	6984      	ldr	r4, [r0, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800276e:	4fa4      	ldr	r7, [pc, #656]	; (8002a00 <main+0x300>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002770:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8002a4c <main+0x34c>

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002774:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8002a50 <main+0x350>
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8002778:	4ea2      	ldr	r6, [pc, #648]	; (8002a04 <main+0x304>)
  GPIOB->CRH = config->PBData.crh;
 800277a:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 8002a54 <main+0x354>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800277e:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 8002782:	6184      	str	r4, [r0, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002784:	4da0      	ldr	r5, [pc, #640]	; (8002a08 <main+0x308>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002786:	60fa      	str	r2, [r7, #12]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8002788:	4ca0      	ldr	r4, [pc, #640]	; (8002a0c <main+0x30c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 800278a:	f8c7 a004 	str.w	sl, [r7, #4]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 800278e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8002a58 <main+0x358>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002792:	f8c7 9000 	str.w	r9, [r7]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002796:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8002a5c <main+0x35c>
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 800279a:	60f2      	str	r2, [r6, #12]
  GPIOB->CRH = config->PBData.crh;
 800279c:	f8c6 e004 	str.w	lr, [r6, #4]
  GPIOB->CRL = config->PBData.crl;
 80027a0:	f8c6 e000 	str.w	lr, [r6]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80027a4:	f04f 3688 	mov.w	r6, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80027a8:	60ea      	str	r2, [r5, #12]
  GPIOC->CRH = config->PCData.crh;
 80027aa:	606e      	str	r6, [r5, #4]
  GPIOC->CRL = config->PCData.crl;
 80027ac:	602e      	str	r6, [r5, #0]
  GPIOD->ODR = config->PDData.odr;
 80027ae:	60e2      	str	r2, [r4, #12]
  GPIOD->CRH = config->PDData.crh;
 80027b0:	6066      	str	r6, [r4, #4]
  GPIOD->CRL = config->PDData.crl;
 80027b2:	f8c4 8000 	str.w	r8, [r4]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80027b6:	f8c9 200c 	str.w	r2, [r9, #12]
  GPIOE->CRH = config->PEData.crh;
 80027ba:	f8c9 6004 	str.w	r6, [r9, #4]
  GPIOE->CRL = config->PEData.crl;
 80027be:	f8c9 6000 	str.w	r6, [r9]
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 80027c2:	6982      	ldr	r2, [r0, #24]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80027c4:	4f92      	ldr	r7, [pc, #584]	; (8002a10 <main+0x310>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 80027c6:	4e93      	ldr	r6, [pc, #588]	; (8002a14 <main+0x314>)
 80027c8:	f04f 0e01 	mov.w	lr, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80027cc:	f107 0418 	add.w	r4, r7, #24
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 80027d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 80027d4:	2509      	movs	r5, #9
 80027d6:	f887 e000 	strb.w	lr, [r7]
  adcp->config   = NULL;
 80027da:	607b      	str	r3, [r7, #4]
  adcp->samples  = NULL;
 80027dc:	60bb      	str	r3, [r7, #8]
  adcp->depth    = 0;
 80027de:	60fb      	str	r3, [r7, #12]
  adcp->grpp     = NULL;
 80027e0:	613b      	str	r3, [r7, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80027e2:	617b      	str	r3, [r7, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80027e4:	623b      	str	r3, [r7, #32]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 80027e6:	62fe      	str	r6, [r7, #44]	; 0x2c
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 80027e8:	6182      	str	r2, [r0, #24]
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80027ea:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80027ee:	61bc      	str	r4, [r7, #24]
  tqp->p_prev = (thread_t *)tqp;
 80027f0:	61fc      	str	r4, [r7, #28]
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 80027f2:	62b9      	str	r1, [r7, #40]	; 0x28
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
  ADC1->CR1 = 0;
 80027f4:	604b      	str	r3, [r1, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 80027f6:	f8c1 e008 	str.w	lr, [r1, #8]

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 80027fa:	608d      	str	r5, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 80027fc:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002800:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <main+0x2f8>)
 8002802:	0712      	lsls	r2, r2, #28
 8002804:	d4fa      	bmi.n	80027fc <main+0xfc>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002806:	4619      	mov	r1, r3
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002808:	2205      	movs	r2, #5
 800280a:	609a      	str	r2, [r3, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 800280c:	688b      	ldr	r3, [r1, #8]
 800280e:	4a7a      	ldr	r2, [pc, #488]	; (80029f8 <main+0x2f8>)
 8002810:	f013 0304 	ands.w	r3, r3, #4
 8002814:	d1fa      	bne.n	800280c <main+0x10c>
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1(FALSE);
 8002816:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80029e8 <main+0x2e8>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
 800281a:	6093      	str	r3, [r2, #8]
  rccDisableADC1(FALSE);
 800281c:	f8de 5018 	ldr.w	r5, [lr, #24]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8002820:	4a7d      	ldr	r2, [pc, #500]	; (8002a18 <main+0x318>)

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002822:	4c7e      	ldr	r4, [pc, #504]	; (8002a1c <main+0x31c>)
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 8002824:	497e      	ldr	r1, [pc, #504]	; (8002a20 <main+0x320>)
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002826:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8002a60 <main+0x360>
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 800282a:	f8df a238 	ldr.w	sl, [pc, #568]	; 8002a64 <main+0x364>
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 800282e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8002a68 <main+0x368>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002832:	f102 070c 	add.w	r7, r2, #12
 8002836:	2001      	movs	r0, #1
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8002838:	f1a4 060c 	sub.w	r6, r4, #12
 800283c:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8002840:	f04f 0b08 	mov.w	fp, #8
 8002844:	f8ce 5018 	str.w	r5, [lr, #24]
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002848:	469c      	mov	ip, r3
  i2cp->config = NULL;
 800284a:	6053      	str	r3, [r2, #4]
 800284c:	6153      	str	r3, [r2, #20]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 800284e:	61d3      	str	r3, [r2, #28]
  I2CD1.i2c    = I2C1;
 8002850:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
 8002854:	60d7      	str	r7, [r2, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002856:	6117      	str	r7, [r2, #16]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002858:	62d4      	str	r4, [r2, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800285a:	6316      	str	r6, [r2, #48]	; 0x30
  uartp->txstate = UART_TX_IDLE;
 800285c:	704b      	strb	r3, [r1, #1]
  uartp->rxstate = UART_RX_IDLE;
 800285e:	708b      	strb	r3, [r1, #2]
  uartp->config  = NULL;
 8002860:	604b      	str	r3, [r1, #4]
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8002862:	7010      	strb	r0, [r2, #0]
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8002864:	f8c9 3004 	str.w	r3, [r9, #4]
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8002868:	610e      	str	r6, [r1, #16]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 800286a:	614c      	str	r4, [r1, #20]
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 800286c:	7008      	strb	r0, [r1, #0]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 800286e:	f8c1 8008 	str.w	r8, [r1, #8]
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8002872:	f8c1 b00c 	str.w	fp, [r1, #12]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002876:	f889 0000 	strb.w	r0, [r9]
 800287a:	f109 0328 	add.w	r3, r9, #40	; 0x28
 800287e:	f109 0244 	add.w	r2, r9, #68	; 0x44
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002882:	f843 cf04 	str.w	ip, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002886:	4293      	cmp	r3, r2
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 8002888:	f8c3 c01c 	str.w	ip, [r3, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800288c:	f04f 0400 	mov.w	r4, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002890:	d1f7      	bne.n	8002882 <main+0x182>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002892:	f64f 77ff 	movw	r7, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002896:	f648 489f 	movw	r8, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800289a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800289e:	4d52      	ldr	r5, [pc, #328]	; (80029e8 <main+0x2e8>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80028a0:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8002a6c <main+0x36c>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80028a4:	69e9      	ldr	r1, [r5, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80028a6:	4e5f      	ldr	r6, [pc, #380]	; (8002a24 <main+0x324>)
 80028a8:	f041 0101 	orr.w	r1, r1, #1
 80028ac:	61e9      	str	r1, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80028ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80028b2:	4d5d      	ldr	r5, [pc, #372]	; (8002a28 <main+0x328>)
 80028b4:	f441 6e00 	orr.w	lr, r1, #2048	; 0x800
 80028b8:	f8cc e004 	str.w	lr, [ip, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80028bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80028c0:	f04f 0a01 	mov.w	sl, #1
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80028c4:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80028c8:	f04f 0b80 	mov.w	fp, #128	; 0x80

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80028cc:	f8c1 8028 	str.w	r8, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80028d0:	62cf      	str	r7, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80028d2:	618c      	str	r4, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80028d4:	634c      	str	r4, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80028d6:	60cc      	str	r4, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 80028d8:	604c      	str	r4, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80028da:	f8c1 a014 	str.w	sl, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80028de:	f8c1 a000 	str.w	sl, [r1]
 80028e2:	f886 b31c 	strb.w	fp, [r6, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80028e6:	f8c6 e180 	str.w	lr, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80028ea:	f8c6 e000 	str.w	lr, [r6]
 80028ee:	60ac      	str	r4, [r5, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	68ee      	ldr	r6, [r5, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80028f2:	494e      	ldr	r1, [pc, #312]	; (8002a2c <main+0x32c>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80028f4:	4030      	ands	r0, r6
  reg_value  =  (reg_value                                 |
 80028f6:	4301      	orrs	r1, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80028f8:	4e4d      	ldr	r6, [pc, #308]	; (8002a30 <main+0x330>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80028fa:	60e9      	str	r1, [r5, #12]
 80028fc:	68f1      	ldr	r1, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80028fe:	484d      	ldr	r0, [pc, #308]	; (8002a34 <main+0x334>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002900:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002904:	60f1      	str	r1, [r6, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002906:	6801      	ldr	r1, [r0, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002908:	4e4b      	ldr	r6, [pc, #300]	; (8002a38 <main+0x338>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800290a:	f04f 0c10 	mov.w	ip, #16
 800290e:	ea41 010a 	orr.w	r1, r1, sl
 8002912:	f04f 0b20 	mov.w	fp, #32
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 8002916:	f8a9 4008 	strh.w	r4, [r9, #8]
  usbp->receiving    = 0;
 800291a:	f8a9 400a 	strh.w	r4, [r9, #10]
 800291e:	6001      	str	r1, [r0, #0]
 8002920:	f885 c01f 	strb.w	ip, [r5, #31]
  tqp->p_prev = (thread_t *)tqp;
 8002924:	6076      	str	r6, [r6, #4]
 8002926:	f885 b022 	strb.w	fp, [r5, #34]	; 0x22
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800292a:	4d44      	ldr	r5, [pc, #272]	; (8002a3c <main+0x33c>)
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800292c:	f106 0e1c 	add.w	lr, r6, #28
 8002930:	f8c6 e01c 	str.w	lr, [r6, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002934:	f8c6 e020 	str.w	lr, [r6, #32]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8002938:	60b4      	str	r4, [r6, #8]
 800293a:	6036      	str	r6, [r6, #0]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800293c:	6136      	str	r6, [r6, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800293e:	6176      	str	r6, [r6, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 8002940:	84b7      	strh	r7, [r6, #36]	; 0x24
 8002942:	462f      	mov	r7, r5

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8002944:	2200      	movs	r2, #0
 8002946:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800294c:	a802      	add	r0, sp, #8

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800294e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8002952:	9102      	str	r1, [sp, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8002954:	84f4      	strh	r4, [r6, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8002956:	6734      	str	r4, [r6, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8002958:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800295a:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
 800295c:	9405      	str	r4, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800295e:	f000 fb4f 	bl	8003000 <chTMStartMeasurementX.constprop.30>
  chTMStopMeasurementX(&tm);
 8002962:	a802      	add	r0, sp, #8
 8002964:	f7ff fc5c 	bl	8002220 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8002968:	9a04      	ldr	r2, [sp, #16]
 800296a:	61ac      	str	r4, [r5, #24]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800296c:	6970      	ldr	r0, [r6, #20]
 800296e:	3510      	adds	r5, #16
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002970:	4933      	ldr	r1, [pc, #204]	; (8002a40 <main+0x340>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <main+0x344>)
 8002974:	6732      	str	r2, [r6, #112]	; 0x70
 8002976:	613d      	str	r5, [r7, #16]
 8002978:	f106 022c 	add.w	r2, r6, #44	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 800297c:	617d      	str	r5, [r7, #20]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800297e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002a70 <main+0x370>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002982:	2540      	movs	r5, #64	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002984:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8002a74 <main+0x374>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002988:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8002a78 <main+0x378>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800298c:	6430      	str	r0, [r6, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800298e:	6375      	str	r5, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002990:	66b5      	str	r5, [r6, #104]	; 0x68
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002992:	f021 0107 	bic.w	r1, r1, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8002996:	f023 0307 	bic.w	r3, r3, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800299a:	f886 4049 	strb.w	r4, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800299e:	6674      	str	r4, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80029a0:	6634      	str	r4, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80029a2:	f886 a04a 	strb.w	sl, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80029a6:	6474      	str	r4, [r6, #68]	; 0x44
  REG_INSERT(tp);
 80029a8:	63f6      	str	r6, [r6, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80029aa:	f106 0550 	add.w	r5, r6, #80	; 0x50
 80029ae:	6102      	str	r2, [r0, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80029b0:	f106 0054 	add.w	r0, r6, #84	; 0x54
 80029b4:	6172      	str	r2, [r6, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80029b6:	61b2      	str	r2, [r6, #24]
  default_heap.h_free.h.u.next = NULL;
 80029b8:	60bc      	str	r4, [r7, #8]
  default_heap.h_free.h.size = 0;
 80029ba:	60fc      	str	r4, [r7, #12]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80029bc:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80029c0:	6535      	str	r5, [r6, #80]	; 0x50
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80029c2:	f8c7 8000 	str.w	r8, [r7]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80029c6:	6570      	str	r0, [r6, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 80029c8:	65b0      	str	r0, [r6, #88]	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80029ca:	f8cc 1000 	str.w	r1, [ip]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80029ce:	f8ce 3000 	str.w	r3, [lr]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80029d2:	2202      	movs	r2, #2
 80029d4:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80029d8:	b662      	cpsie	i
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <main+0x348>)
 80029dc:	69b3      	ldr	r3, [r6, #24]
 80029de:	6199      	str	r1, [r3, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80029e0:	f38b 8811 	msr	BASEPRI, fp
 80029e4:	e04a      	b.n	8002a7c <main+0x37c>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	20000da8 	.word	0x20000da8
 80029f4:	20000888 	.word	0x20000888
 80029f8:	40012400 	.word	0x40012400
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40010800 	.word	0x40010800
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	40011000 	.word	0x40011000
 8002a0c:	40011400 	.word	0x40011400
 8002a10:	20000b9c 	.word	0x20000b9c
 8002a14:	08003710 	.word	0x08003710
 8002a18:	20000d70 	.word	0x20000d70
 8002a1c:	08003758 	.word	0x08003758
 8002a20:	20000d28 	.word	0x20000d28
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00
 8002a2c:	05fa0300 	.word	0x05fa0300
 8002a30:	e000edf0 	.word	0xe000edf0
 8002a34:	e0001000 	.word	0xe0001000
 8002a38:	20000db0 	.word	0x20000db0
 8002a3c:	20000d50 	.word	0x20000d50
 8002a40:	20000f07 	.word	0x20000f07
 8002a44:	20005000 	.word	0x20005000
 8002a48:	08003650 	.word	0x08003650
 8002a4c:	88884b88 	.word	0x88884b88
 8002a50:	888884b8 	.word	0x888884b8
 8002a54:	88888838 	.word	0x88888838
 8002a58:	88888844 	.word	0x88888844
 8002a5c:	40011800 	.word	0x40011800
 8002a60:	200008c0 	.word	0x200008c0
 8002a64:	40005400 	.word	0x40005400
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	e0042000 	.word	0xe0042000
 8002a70:	08001c01 	.word	0x08001c01
 8002a74:	20000d24 	.word	0x20000d24
 8002a78:	20000d20 	.word	0x20000d20

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a7c:	48be      	ldr	r0, [pc, #760]	; (8002d78 <main+0x678>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a7e:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a80:	f8df 8340 	ldr.w	r8, [pc, #832]	; 8002dc4 <main+0x6c4>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a84:	f106 0178 	add.w	r1, r6, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a88:	f506 7596 	add.w	r5, r6, #300	; 0x12c
 8002a8c:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84
 8002a90:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a94:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a98:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002a9c:	f8c6 a080 	str.w	sl, [r6, #128]	; 0x80
  tp->p_state = CH_STATE_WTSTART;
 8002aa0:	f886 2094 	strb.w	r2, [r6, #148]	; 0x94
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002aa4:	f886 4095 	strb.w	r4, [r6, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002aa8:	f8c6 a0b4 	str.w	sl, [r6, #180]	; 0xb4
  tp->p_mtxlist = NULL;
 8002aac:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002ab0:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002ab4:	f886 a096 	strb.w	sl, [r6, #150]	; 0x96
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002ab8:	f8c6 4090 	str.w	r4, [r6, #144]	; 0x90
  REG_INSERT(tp);
 8002abc:	f8c6 6088 	str.w	r6, [r6, #136]	; 0x88

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002ac0:	f8c6 814c 	str.w	r8, [r6, #332]	; 0x14c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002ac4:	f106 059c 	add.w	r5, r6, #156	; 0x9c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002ac8:	6119      	str	r1, [r3, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002aca:	f106 03a0 	add.w	r3, r6, #160	; 0xa0
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002ace:	4608      	mov	r0, r1
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002ad0:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002ad4:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 8002ad8:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002adc:	9201      	str	r2, [sp, #4]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002ade:	6171      	str	r1, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002ae0:	f000 fa5e 	bl	8002fa0 <chSchWakeupS.constprop.33>
 8002ae4:	f384 8811 	msr	BASEPRI, r4
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 8002ae8:	4da4      	ldr	r5, [pc, #656]	; (8002d7c <main+0x67c>)
 8002aea:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8002dc8 <main+0x6c8>
 8002aee:	462b      	mov	r3, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002af0:	48a3      	ldr	r0, [pc, #652]	; (8002d80 <main+0x680>)
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8002af2:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 8002dcc <main+0x6cc>
 8002af6:	f843 eb04 	str.w	lr, [r3], #4
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8002afa:	49a2      	ldr	r1, [pc, #648]	; (8002d84 <main+0x684>)
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8002afc:	f44f 7e80 	mov.w	lr, #256	; 0x100
 8002b00:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002b04:	f505 7015 	add.w	r0, r5, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8002b08:	f885 a008 	strb.w	sl, [r5, #8]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8002b0c:	616c      	str	r4, [r5, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002b0e:	f105 0a0c 	add.w	sl, r5, #12
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8002b12:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8002b16:	f8c5 e038 	str.w	lr, [r5, #56]	; 0x38
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002b1a:	f105 0c54 	add.w	ip, r5, #84	; 0x54
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8002b1e:	f505 7eaa 	add.w	lr, r5, #340	; 0x154
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002b22:	6428      	str	r0, [r5, #64]	; 0x40
 8002b24:	f105 0030 	add.w	r0, r5, #48	; 0x30
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8002b28:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8002b2a:	652d      	str	r5, [r5, #80]	; 0x50
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8002b2c:	64e9      	str	r1, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 8002b2e:	606b      	str	r3, [r5, #4]
 8002b30:	f8c5 a00c 	str.w	sl, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 8002b34:	f8c5 a010 	str.w	sl, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8002b38:	f8c5 c018 	str.w	ip, [r5, #24]
  iqp->q_rdptr   = bp;
 8002b3c:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8002b40:	f8c5 c020 	str.w	ip, [r5, #32]
  iqp->q_top     = bp + size;
 8002b44:	f8c5 e01c 	str.w	lr, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8002b48:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8002b4c:	f8c5 e048 	str.w	lr, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8002b50:	f8c5 e044 	str.w	lr, [r5, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002b54:	6328      	str	r0, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8002b56:	6368      	str	r0, [r5, #52]	; 0x34
 8002b58:	f38b 8811 	msr	BASEPRI, fp
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002b5c:	4b8a      	ldr	r3, [pc, #552]	; (8002d88 <main+0x688>)
  sdup->state = SDU_READY;
 8002b5e:	9a01      	ldr	r2, [sp, #4]
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002b60:	f8c9 502c 	str.w	r5, [r9, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002b64:	f8c9 5048 	str.w	r5, [r9, #72]	; 0x48
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 8002b68:	f8c9 5030 	str.w	r5, [r9, #48]	; 0x30
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8002b6c:	722a      	strb	r2, [r5, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002b6e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 8002b72:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <main+0x68c>)
 8002b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7c:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8002b7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b82:	f7ff fb75 	bl	8002270 <chThdSleep>
 8002b86:	f38b 8811 	msr	BASEPRI, fp
 8002b8a:	4981      	ldr	r1, [pc, #516]	; (8002d90 <main+0x690>)
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8002b8c:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <main+0x694>)
 8002b8e:	460a      	mov	r2, r1
 8002b90:	eb01 0a0b 	add.w	sl, r1, fp
 8002b94:	f8c9 3004 	str.w	r3, [r9, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002b98:	f842 4f04 	str.w	r4, [r2, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b9c:	4552      	cmp	r2, sl
    usbp->epc[i] = NULL;
 8002b9e:	f04f 0300 	mov.w	r3, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002ba2:	d1f9      	bne.n	8002b98 <main+0x498>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8002ba4:	f899 e000 	ldrb.w	lr, [r9]
 8002ba8:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <main+0x698>)
 8002baa:	f1be 0f01 	cmp.w	lr, #1
 8002bae:	f000 81ad 	beq.w	8002f0c <main+0x80c>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	f889 0000 	strb.w	r0, [r9]
 8002bb8:	2400      	movs	r4, #0
 8002bba:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8002bbe:	4a73      	ldr	r2, [pc, #460]	; (8002d8c <main+0x68c>)
 8002bc0:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <main+0x69c>)
 8002bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bc6:	6151      	str	r1, [r2, #20]
 8002bc8:	f04f 0920 	mov.w	r9, #32
 8002bcc:	601b      	str	r3, [r3, #0]
 8002bce:	f389 8811 	msr	BASEPRI, r9

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002bd2:	4b73      	ldr	r3, [pc, #460]	; (8002da0 <main+0x6a0>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002bd4:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002bd6:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8002dd0 <main+0x6d0>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002bda:	2140      	movs	r1, #64	; 0x40
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002bdc:	f04f 0e01 	mov.w	lr, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002be0:	7718      	strb	r0, [r3, #28]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002be2:	f8c3 c124 	str.w	ip, [r3, #292]	; 0x124
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002be6:	f883 e01e 	strb.w	lr, [r3, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002bea:	615a      	str	r2, [r3, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002bec:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
 8002bf0:	f8c3 8144 	str.w	r8, [r3, #324]	; 0x144
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002bf4:	775c      	strb	r4, [r3, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002bf6:	639c      	str	r4, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002bf8:	635c      	str	r4, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002bfa:	619c      	str	r4, [r3, #24]
  REG_INSERT(tp);
 8002bfc:	611e      	str	r6, [r3, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002bfe:	f503 7c92 	add.w	ip, r3, #292	; 0x124
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002c02:	63d9      	str	r1, [r3, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002c04:	f103 0e24 	add.w	lr, r3, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c08:	6113      	str	r3, [r2, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002c0a:	f103 0228 	add.w	r2, r3, #40	; 0x28
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002c0e:	4618      	mov	r0, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002c10:	f8c3 c00c 	str.w	ip, [r3, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002c14:	6099      	str	r1, [r3, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002c16:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002c1e:	6173      	str	r3, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002c20:	f000 f9be 	bl	8002fa0 <chSchWakeupS.constprop.33>
 8002c24:	f384 8811 	msr	BASEPRI, r4
    QEI_MODE_QUADRATURE,
    QEI_BOTH_EDGES,
    QEI_DIRINV_FALSE,
  };

  AFIO->MAPR |= AFIO_MAPR_TIM3_REMAP_FULLREMAP;
 8002c28:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <main+0x6a4>)
 8002c2a:	6853      	ldr	r3, [r2, #4]
 8002c2c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002c30:	6053      	str	r3, [r2, #4]
 8002c32:	f389 8811 	msr	BASEPRI, r9
  osalDbgCheck((qeip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((qeip->state == QEI_STOP) || (qeip->state == QEI_READY),
                "invalid state");
  qeip->config = config;
 8002c36:	4a5c      	ldr	r2, [pc, #368]	; (8002da8 <main+0x6a8>)
 8002c38:	485c      	ldr	r0, [pc, #368]	; (8002dac <main+0x6ac>)
 */
void qei_lld_start(QEIDriver *qeip) {
  osalDbgAssert((qeip->config->min == 0) || (qeip->config->max == 0),
		"only min/max set to 0 is supported");

  if (qeip->state == QEI_STOP) {
 8002c3a:	7813      	ldrb	r3, [r2, #0]
 8002c3c:	6050      	str	r0, [r2, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f000 8159 	beq.w	8002ef6 <main+0x7f6>
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
  qeip->tim->CR2  = 0;
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;
 8002c44:	f64f 74ff 	movw	r4, #65535	; 0xffff
      rccResetTIM8();
    }
#endif
  }
   /* Timer configuration.*/
  qeip->tim->CR1  = 0;                      /* Initially stopped.           */
 8002c48:	6893      	ldr	r3, [r2, #8]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	6019      	str	r1, [r3, #0]
  qeip->tim->CR2  = 0;
 8002c4e:	6059      	str	r1, [r3, #4]
  qeip->tim->PSC  = 0;
 8002c50:	6299      	str	r1, [r3, #40]	; 0x28
  qeip->tim->DIER = 0;
 8002c52:	60d9      	str	r1, [r3, #12]
  qeip->tim->ARR   = 0xFFFF;
 8002c54:	62dc      	str	r4, [r3, #44]	; 0x2c

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002c56:	6999      	ldr	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 8002c58:	7804      	ldrb	r4, [r0, #0]
  qeip->tim->PSC  = 0;
  qeip->tim->DIER = 0;
  qeip->tim->ARR   = 0xFFFF;

  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002c5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c5e:	f041 0101 	orr.w	r1, r1, #1
 8002c62:	6199      	str	r1, [r3, #24]

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
 8002c64:	4951      	ldr	r1, [pc, #324]	; (8002dac <main+0x6ac>)
 8002c66:	b91c      	cbnz	r4, 8002c70 <main+0x570>
    if (qeip->config->resolution == QEI_BOTH_EDGES)
 8002c68:	7849      	ldrb	r1, [r1, #1]
 8002c6a:	2901      	cmp	r1, #1
 8002c6c:	f000 8188 	beq.w	8002f80 <main+0x880>
    else
      qeip->tim->SMCR  = TIM_SMCR_SMS_0;
  } else {
    /* Direction/Clock mode.
     * Direction input on TI1, Clock input on TI2. */
    qeip->tim->SMCR  = TIM_SMCR_SMS_0;
 8002c70:	2101      	movs	r1, #1
 8002c72:	6099      	str	r1, [r3, #8]
  }

  if (qeip->config->dirinv == QEI_DIRINV_TRUE)
 8002c74:	7881      	ldrb	r1, [r0, #2]
 8002c76:	2400      	movs	r4, #0
 8002c78:	2901      	cmp	r1, #1
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC2E;
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2113      	moveq	r1, #19
  else
    qeip->tim->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;
 8002c7e:	2111      	movne	r1, #17
 8002c80:	6219      	str	r1, [r3, #32]
  qei_lld_start(qeip);
  qeip->state = QEI_READY;
 8002c82:	2302      	movs	r3, #2
 8002c84:	7013      	strb	r3, [r2, #0]
 8002c86:	f384 8811 	msr	BASEPRI, r4
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void qei_lld_enable(QEIDriver *qeip) {

  qeip->tim->CR1 = TIM_CR1_CEN;            /* Timer enabled.               */
 8002c90:	6891      	ldr	r1, [r2, #8]
 8002c92:	2001      	movs	r0, #1
  osalDbgCheck(qeip != NULL);

  osalSysLock();
  osalDbgAssert(qeip->state == QEI_READY, "invalid state");
  qei_lld_enable(qeip);
  qeip->state = QEI_ACTIVE;
 8002c94:	2303      	movs	r3, #3
 8002c96:	6008      	str	r0, [r1, #0]
 8002c98:	7013      	strb	r3, [r2, #0]
 8002c9a:	f384 8811 	msr	BASEPRI, r4
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8002c9e:	b14c      	cbz	r4, 8002cb4 <main+0x5b4>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8002ca0:	7f23      	ldrb	r3, [r4, #28]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	f000 8096 	beq.w	8002dd4 <main+0x6d4>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 8002ca8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cac:	f7ff fae0 	bl	8002270 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8002cb0:	2c00      	cmp	r4, #0
 8002cb2:	d1f5      	bne.n	8002ca0 <main+0x5a0>
 8002cb4:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d1ef      	bne.n	8002ca0 <main+0x5a0>
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chMtxLock(mutex_t *mp) {

  chSysLock();
  chMtxLockS(mp);
 8002cc6:	483a      	ldr	r0, [pc, #232]	; (8002db0 <main+0x6b0>)
 8002cc8:	f7ff fc02 	bl	80024d0 <chMtxLockS>
 8002ccc:	f384 8811 	msr	BASEPRI, r4
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <main+0x6b4>)

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002cd2:	f640 00c7 	movw	r0, #2247	; 0x8c7
 8002cd6:	e004      	b.n	8002ce2 <main+0x5e2>
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	4281      	cmp	r1, r0
 8002cdc:	f200 80df 	bhi.w	8002e9e <main+0x79e>
 8002ce0:	461a      	mov	r2, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f7      	bne.n	8002cd8 <main+0x5d8>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 8002ce8:	4831      	ldr	r0, [pc, #196]	; (8002db0 <main+0x6b0>)
 8002cea:	f7ff fbb9 	bl	8002460 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <main+0x6b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0d8      	beq.n	8002ca8 <main+0x5a8>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002cf6:	f44f 600d 	mov.w	r0, #2256	; 0x8d0
 8002cfa:	4798      	blx	r3
    if (hp != NULL) {
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0d3      	beq.n	8002ca8 <main+0x5a8>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8002d00:	f640 03c8 	movw	r3, #2248	; 0x8c8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 8002d04:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <main+0x6b8>)
      hp->h.size = size;
      hp++;
 8002d06:	f100 0408 	add.w	r4, r0, #8
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
      hp->h.size = size;
 8002d0a:	e880 000c 	stmia.w	r0, {r2, r3}
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 8002d0e:	2c00      	cmp	r4, #0
 8002d10:	d0ca      	beq.n	8002ca8 <main+0x5a8>
 8002d12:	2320      	movs	r3, #32
 8002d14:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002d18:	4f28      	ldr	r7, [pc, #160]	; (8002dbc <main+0x6bc>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002d1a:	6970      	ldr	r0, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002d1c:	f8c4 78a4 	str.w	r7, [r4, #2212]	; 0x8a4
 8002d20:	f604 01a4 	addw	r1, r4, #2212	; 0x8a4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002d24:	2302      	movs	r3, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002d26:	4f26      	ldr	r7, [pc, #152]	; (8002dc0 <main+0x6c0>)
 8002d28:	60e1      	str	r1, [r4, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002d2a:	f04f 0e40 	mov.w	lr, #64	; 0x40
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002d2e:	f04f 0900 	mov.w	r9, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002d32:	2101      	movs	r1, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002d34:	7723      	strb	r3, [r4, #28]
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8002d36:	f104 0224 	add.w	r2, r4, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8002d3a:	f104 0328 	add.w	r3, r4, #40	; 0x28
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002d3e:	6160      	str	r0, [r4, #20]
 8002d40:	6126      	str	r6, [r4, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002d42:	f8c4 e008 	str.w	lr, [r4, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002d46:	f8c4 78a8 	str.w	r7, [r4, #2216]	; 0x8a8
 8002d4a:	f8c4 88c4 	str.w	r8, [r4, #2244]	; 0x8c4
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002d4e:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8002d52:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002d56:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002d5a:	f8c4 9018 	str.w	r9, [r4, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002d5e:	77a1      	strb	r1, [r4, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002d60:	6104      	str	r4, [r0, #16]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002d62:	4620      	mov	r0, r4
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002d64:	6262      	str	r2, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002d66:	7761      	strb	r1, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002d68:	62a3      	str	r3, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002d6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d6c:	6174      	str	r4, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 8002d6e:	f000 f917 	bl	8002fa0 <chSchWakeupS.constprop.33>
 8002d72:	f389 8811 	msr	BASEPRI, r9
 8002d76:	e797      	b.n	8002ca8 <main+0x5a8>
 8002d78:	08001cb1 	.word	0x08001cb1
 8002d7c:	20000944 	.word	0x20000944
 8002d80:	080036d8 	.word	0x080036d8
 8002d84:	08001d41 	.word	0x08001d41
 8002d88:	080036f0 	.word	0x080036f0
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	200008c8 	.word	0x200008c8
 8002d94:	08003690 	.word	0x08003690
 8002d98:	200008c0 	.word	0x200008c0
 8002d9c:	20000bd0 	.word	0x20000bd0
 8002da0:	20000bd8 	.word	0x20000bd8
 8002da4:	40010000 	.word	0x40010000
 8002da8:	20000d44 	.word	0x20000d44
 8002dac:	20000820 	.word	0x20000820
 8002db0:	20000d60 	.word	0x20000d60
 8002db4:	20000d58 	.word	0x20000d58
 8002db8:	20000d50 	.word	0x20000d50
 8002dbc:	08001241 	.word	0x08001241
 8002dc0:	08003700 	.word	0x08003700
 8002dc4:	08000211 	.word	0x08000211
 8002dc8:	08003770 	.word	0x08003770
 8002dcc:	08001cc1 	.word	0x08001cc1
 8002dd0:	08002661 	.word	0x08002661
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	f381 8811 	msr	BASEPRI, r1
void chThdRelease(thread_t *tp) {
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8002dda:	7fa3      	ldrb	r3, [r4, #30]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	77a3      	strb	r3, [r4, #30]
 8002de4:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8002de8:	b9d3      	cbnz	r3, 8002e20 <main+0x720>
 8002dea:	7f22      	ldrb	r2, [r4, #28]
 8002dec:	2a0f      	cmp	r2, #15
 8002dee:	d001      	beq.n	8002df4 <main+0x6f4>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8002df0:	461c      	mov	r4, r3
 8002df2:	e759      	b.n	8002ca8 <main+0x5a8>
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8002df4:	7f62      	ldrb	r2, [r4, #29]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	2a01      	cmp	r2, #1
 8002dfc:	d012      	beq.n	8002e24 <main+0x724>
 8002dfe:	2a02      	cmp	r2, #2
 8002e00:	d1f6      	bne.n	8002df0 <main+0x6f0>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002e02:	6927      	ldr	r7, [r4, #16]
 8002e04:	6960      	ldr	r0, [r4, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8002e06:	6c22      	ldr	r2, [r4, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002e08:	6107      	str	r7, [r0, #16]
 8002e0a:	6927      	ldr	r7, [r4, #16]
 8002e0c:	6178      	str	r0, [r7, #20]
 8002e0e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002e12:	6811      	ldr	r1, [r2, #0]
 8002e14:	6021      	str	r1, [r4, #0]
  mp->mp_next = php;
 8002e16:	6014      	str	r4, [r2, #0]
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	e743      	b.n	8002ca8 <main+0x5a8>
 8002e20:	4614      	mov	r4, r2
 8002e22:	e741      	b.n	8002ca8 <main+0x5a8>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002e24:	6922      	ldr	r2, [r4, #16]
 8002e26:	6960      	ldr	r0, [r4, #20]
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	6102      	str	r2, [r0, #16]
 8002e2c:	6922      	ldr	r2, [r4, #16]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8002e2e:	f1a4 0908 	sub.w	r9, r4, #8
 8002e32:	6150      	str	r0, [r2, #20]
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8002e34:	f854 2c08 	ldr.w	r2, [r4, #-8]
  qp = &heapp->h_free;
 8002e38:	f102 0a08 	add.w	sl, r2, #8

  H_LOCK(heapp);
 8002e3c:	f102 0b10 	add.w	fp, r2, #16
 8002e40:	f381 8811 	msr	BASEPRI, r1
 8002e44:	4658      	mov	r0, fp
 8002e46:	f7ff fb43 	bl	80024d0 <chMtxLockS>
 8002e4a:	9b01      	ldr	r3, [sp, #4]
 8002e4c:	f383 8811 	msr	BASEPRI, r3

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002e50:	4653      	mov	r3, sl

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002e52:	459a      	cmp	sl, r3
 8002e54:	d004      	beq.n	8002e60 <main+0x760>
 8002e56:	4599      	cmp	r9, r3
 8002e58:	d802      	bhi.n	8002e60 <main+0x760>
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	459a      	cmp	sl, r3
 8002e5e:	d1fa      	bne.n	8002e56 <main+0x756>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002e60:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002e62:	b11a      	cbz	r2, 8002e6c <main+0x76c>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002e64:	4591      	cmp	r9, r2
 8002e66:	d301      	bcc.n	8002e6c <main+0x76c>
 8002e68:	4613      	mov	r3, r2
 8002e6a:	e7f2      	b.n	8002e52 <main+0x752>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002e6c:	f854 1c04 	ldr.w	r1, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002e70:	f844 2c08 	str.w	r2, [r4, #-8]
      qp->h.u.next = hp;
 8002e74:	f8c3 9000 	str.w	r9, [r3]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002e78:	f101 0008 	add.w	r0, r1, #8
 8002e7c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002e80:	eb09 0e00 	add.w	lr, r9, r0
 8002e84:	4596      	cmp	lr, r2
 8002e86:	d02d      	beq.n	8002ee4 <main+0x7e4>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	f101 0208 	add.w	r2, r1, #8
 8002e8e:	441a      	add	r2, r3
 8002e90:	4591      	cmp	r9, r2
 8002e92:	d020      	beq.n	8002ed6 <main+0x7d6>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002e94:	4658      	mov	r0, fp
 8002e96:	f7ff fae3 	bl	8002460 <chMtxUnlock>
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	e704      	b.n	8002ca8 <main+0x5a8>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8002e9e:	f5b1 6f0d 	cmp.w	r1, #2256	; 0x8d0
 8002ea2:	d20a      	bcs.n	8002eba <main+0x7ba>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	6011      	str	r1, [r2, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002ea8:	461c      	mov	r4, r3
      H_UNLOCK(heapp);
 8002eaa:	4837      	ldr	r0, [pc, #220]	; (8002f88 <main+0x888>)
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002eac:	f1a0 0310 	sub.w	r3, r0, #16
 8002eb0:	f844 3b08 	str.w	r3, [r4], #8
      H_UNLOCK(heapp);
 8002eb4:	f7ff fad4 	bl	8002460 <chMtxUnlock>
 8002eb8:	e729      	b.n	8002d0e <main+0x60e>
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
 8002eba:	f640 04c8 	movw	r4, #2248	; 0x8c8
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002ebe:	681f      	ldr	r7, [r3, #0]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002ec0:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8002ec4:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
 8002ec8:	f8c3 78d0 	str.w	r7, [r3, #2256]	; 0x8d0
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8002ecc:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
        qp->h.u.next = fp;
 8002ed0:	6010      	str	r0, [r2, #0]
        hp->h.size = size;
 8002ed2:	605c      	str	r4, [r3, #4]
 8002ed4:	e7e8      	b.n	8002ea8 <main+0x7a8>
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8002ed6:	e914 0005 	ldmdb	r4, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002eda:	440a      	add	r2, r1
 8002edc:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002ede:	e883 0005 	stmia.w	r3, {r0, r2}
 8002ee2:	e7d7      	b.n	8002e94 <main+0x794>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002ee4:	f8de 2004 	ldr.w	r2, [lr, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002ee8:	f859 0000 	ldr.w	r0, [r9, r0]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002eec:	4411      	add	r1, r2
 8002eee:	3108      	adds	r1, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002ef0:	e904 0003 	stmdb	r4, {r0, r1}
 8002ef4:	e7c8      	b.n	8002e88 <main+0x788>
      rccResetTIM3();
    }
#endif
#if STM32_QEI_USE_TIM4
    if (&QEID4 == qeip) {
      rccEnableTIM4(FALSE);
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <main+0x88c>)
 8002ef8:	69d9      	ldr	r1, [r3, #28]
 8002efa:	f041 0104 	orr.w	r1, r1, #4
 8002efe:	61d9      	str	r1, [r3, #28]
      rccResetTIM4();
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	f041 0104 	orr.w	r1, r1, #4
 8002f06:	6119      	str	r1, [r3, #16]
 8002f08:	611c      	str	r4, [r3, #16]
 8002f0a:	e69b      	b.n	8002c44 <main+0x544>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002f0c:	469b      	mov	fp, r3
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002f0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8002f8c <main+0x88c>
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002f12:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
 8002f16:	f8dc 001c 	ldr.w	r0, [ip, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002f1a:	4c1d      	ldr	r4, [pc, #116]	; (8002f90 <main+0x890>)
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002f1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  usbp->address       = 0;
 8002f20:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
  usbp->configuration = 0;
 8002f24:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
  usbp->transmitting  = 0;
 8002f28:	8113      	strh	r3, [r2, #8]
  usbp->receiving     = 0;
 8002f2a:	8153      	strh	r3, [r2, #10]
 8002f2c:	f8cc 001c 	str.w	r0, [ip, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002f30:	4818      	ldr	r0, [pc, #96]	; (8002f94 <main+0x894>)
 8002f32:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002f36:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
 8002f3a:	f880 c313 	strb.w	ip, [r0, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002f3e:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002f42:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002f46:	f8c0 e180 	str.w	lr, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002f4a:	f8c0 e000 	str.w	lr, [r0]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002f4e:	f880 c314 	strb.w	ip, [r0, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002f52:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002f56:	f04f 0c02 	mov.w	ip, #2
 8002f5a:	f8c0 e180 	str.w	lr, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002f5e:	f8c0 e000 	str.w	lr, [r0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8002f62:	6423      	str	r3, [r4, #64]	; 0x40
 8002f64:	f882 c000 	strb.w	ip, [r2]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002f68:	f841 bf04 	str.w	fp, [r1, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002f6c:	4551      	cmp	r1, sl
    usbp->epc[i] = NULL;
 8002f6e:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002f72:	d1f9      	bne.n	8002f68 <main+0x868>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002f74:	4808      	ldr	r0, [pc, #32]	; (8002f98 <main+0x898>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002f76:	f889 3064 	strb.w	r3, [r9, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002f7a:	f7fe fbf1 	bl	8001760 <usb_lld_reset>
 8002f7e:	e618      	b.n	8002bb2 <main+0x4b2>
  /* Set Capture Compare 1 and Capture Compare 2 as input. */
   qeip->tim->CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  if (qeip->config->mode == QEI_MODE_QUADRATURE) {
    if (qeip->config->resolution == QEI_BOTH_EDGES)
      qeip->tim->SMCR  = TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0;
 8002f80:	2103      	movs	r1, #3
 8002f82:	6099      	str	r1, [r3, #8]
 8002f84:	e676      	b.n	8002c74 <main+0x574>
 8002f86:	bf00      	nop
 8002f88:	20000d60 	.word	0x20000d60
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40005c00 	.word	0x40005c00
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	200008c0 	.word	0x200008c0
 8002f9c:	00000000 	.word	0x00000000

08002fa0 <chSchWakeupS.constprop.33>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002fa0:	b470      	push	{r4, r5, r6}
 8002fa2:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <chSchWakeupS.constprop.33+0x54>)
 8002fa6:	6881      	ldr	r1, [r0, #8]
 8002fa8:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002faa:	2600      	movs	r6, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002fac:	68a8      	ldr	r0, [r5, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002fae:	6226      	str	r6, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002fb0:	4281      	cmp	r1, r0
 8002fb2:	d80b      	bhi.n	8002fcc <chSchWakeupS.constprop.33+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002fb4:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002fb6:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	4291      	cmp	r1, r2
 8002fbc:	d9fb      	bls.n	8002fb6 <chSchWakeupS.constprop.33+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002fbe:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002fc0:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8002fc2:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8002fc4:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002fc6:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002fc8:	bc70      	pop	{r4, r5, r6}
 8002fca:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8002fcc:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002fce:	772e      	strb	r6, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002fd0:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002fd2:	6891      	ldr	r1, [r2, #8]
 8002fd4:	4288      	cmp	r0, r1
 8002fd6:	d9fb      	bls.n	8002fd0 <chSchWakeupS.constprop.33+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002fd8:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002fda:	2601      	movs	r6, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002fdc:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002fde:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002fe0:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002fe2:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002fe4:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8002fea:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002fec:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8002fee:	f7fd b907 	b.w	8000200 <_port_switch>
 8002ff2:	bf00      	nop
 8002ff4:	20000db0 	.word	0x20000db0
	...

08003000 <chTMStartMeasurementX.constprop.30>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <chTMStartMeasurementX.constprop.30+0x8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003004:	6083      	str	r3, [r0, #8]
 8003006:	4770      	bx	lr
 8003008:	e0001000 	.word	0xe0001000
 800300c:	00000000 	.word	0x00000000

08003010 <_strtok.constprop.4>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	460d      	mov	r5, r1
  char *token;
  if (str)
 8003014:	4604      	mov	r4, r0
 8003016:	b190      	cbz	r0, 800303e <_strtok.constprop.4+0x2e>
    *saveptr = str;
 8003018:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800301a:	4620      	mov	r0, r4
 800301c:	490b      	ldr	r1, [pc, #44]	; (800304c <_strtok.constprop.4+0x3c>)
 800301e:	f000 f8d7 	bl	80031d0 <strspn>
 8003022:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8003024:	4620      	mov	r0, r4
 8003026:	4909      	ldr	r1, [pc, #36]	; (800304c <_strtok.constprop.4+0x3c>)
 8003028:	f000 f8aa 	bl	8003180 <strpbrk>
  if (*saveptr)
 800302c:	b160      	cbz	r0, 8003048 <_strtok.constprop.4+0x38>
    *(*saveptr)++ = '\0';
 800302e:	1c42      	adds	r2, r0, #1
 8003030:	2300      	movs	r3, #0
 8003032:	602a      	str	r2, [r5, #0]
 8003034:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8003036:	7823      	ldrb	r3, [r4, #0]
 8003038:	b123      	cbz	r3, 8003044 <_strtok.constprop.4+0x34>
 800303a:	4620      	mov	r0, r4
}
 800303c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800303e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8003040:	2c00      	cmp	r4, #0
 8003042:	d1ea      	bne.n	800301a <_strtok.constprop.4+0xa>
    return NULL;
 8003044:	2000      	movs	r0, #0
 8003046:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8003048:	6028      	str	r0, [r5, #0]
 800304a:	e7f4      	b.n	8003036 <_strtok.constprop.4+0x26>
 800304c:	08003790 	.word	0x08003790

08003050 <long_to_string_with_divisor.constprop.3>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8003050:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8003052:	f100 070b 	add.w	r7, r0, #11
 8003056:	463c      	mov	r4, r7
 8003058:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 800305a:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 800305e:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8003062:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8003066:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 800306a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800306c:	bfc8      	it	gt
 800306e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8003078:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800307a:	2d00      	cmp	r5, #0
 800307c:	d1ed      	bne.n	800305a <long_to_string_with_divisor.constprop.3+0xa>

  i = (int)(p + MAX_FILLER - q);
 800307e:	1b3a      	subs	r2, r7, r4
 8003080:	4402      	add	r2, r0
 8003082:	e001      	b.n	8003088 <long_to_string_with_divisor.constprop.3+0x38>
 8003084:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8003088:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 800308c:	4290      	cmp	r0, r2
 800308e:	d1f9      	bne.n	8003084 <long_to_string_with_divisor.constprop.3+0x34>

  return p;
}
 8003090:	bcf0      	pop	{r4, r5, r6, r7}
 8003092:	4770      	bx	lr
	...

080030a0 <memset>:
 80030a0:	b470      	push	{r4, r5, r6}
 80030a2:	0784      	lsls	r4, r0, #30
 80030a4:	d046      	beq.n	8003134 <memset+0x94>
 80030a6:	1e54      	subs	r4, r2, #1
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d041      	beq.n	8003130 <memset+0x90>
 80030ac:	b2cd      	uxtb	r5, r1
 80030ae:	4603      	mov	r3, r0
 80030b0:	e002      	b.n	80030b8 <memset+0x18>
 80030b2:	1e62      	subs	r2, r4, #1
 80030b4:	b3e4      	cbz	r4, 8003130 <memset+0x90>
 80030b6:	4614      	mov	r4, r2
 80030b8:	f803 5b01 	strb.w	r5, [r3], #1
 80030bc:	079a      	lsls	r2, r3, #30
 80030be:	d1f8      	bne.n	80030b2 <memset+0x12>
 80030c0:	2c03      	cmp	r4, #3
 80030c2:	d92e      	bls.n	8003122 <memset+0x82>
 80030c4:	b2cd      	uxtb	r5, r1
 80030c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80030ca:	2c0f      	cmp	r4, #15
 80030cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80030d0:	d919      	bls.n	8003106 <memset+0x66>
 80030d2:	4626      	mov	r6, r4
 80030d4:	f103 0210 	add.w	r2, r3, #16
 80030d8:	3e10      	subs	r6, #16
 80030da:	2e0f      	cmp	r6, #15
 80030dc:	f842 5c10 	str.w	r5, [r2, #-16]
 80030e0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80030e4:	f842 5c08 	str.w	r5, [r2, #-8]
 80030e8:	f842 5c04 	str.w	r5, [r2, #-4]
 80030ec:	f102 0210 	add.w	r2, r2, #16
 80030f0:	d8f2      	bhi.n	80030d8 <memset+0x38>
 80030f2:	f1a4 0210 	sub.w	r2, r4, #16
 80030f6:	f022 020f 	bic.w	r2, r2, #15
 80030fa:	f004 040f 	and.w	r4, r4, #15
 80030fe:	3210      	adds	r2, #16
 8003100:	2c03      	cmp	r4, #3
 8003102:	4413      	add	r3, r2
 8003104:	d90d      	bls.n	8003122 <memset+0x82>
 8003106:	461e      	mov	r6, r3
 8003108:	4622      	mov	r2, r4
 800310a:	3a04      	subs	r2, #4
 800310c:	2a03      	cmp	r2, #3
 800310e:	f846 5b04 	str.w	r5, [r6], #4
 8003112:	d8fa      	bhi.n	800310a <memset+0x6a>
 8003114:	1f22      	subs	r2, r4, #4
 8003116:	f022 0203 	bic.w	r2, r2, #3
 800311a:	3204      	adds	r2, #4
 800311c:	4413      	add	r3, r2
 800311e:	f004 0403 	and.w	r4, r4, #3
 8003122:	b12c      	cbz	r4, 8003130 <memset+0x90>
 8003124:	b2c9      	uxtb	r1, r1
 8003126:	441c      	add	r4, r3
 8003128:	f803 1b01 	strb.w	r1, [r3], #1
 800312c:	42a3      	cmp	r3, r4
 800312e:	d1fb      	bne.n	8003128 <memset+0x88>
 8003130:	bc70      	pop	{r4, r5, r6}
 8003132:	4770      	bx	lr
 8003134:	4614      	mov	r4, r2
 8003136:	4603      	mov	r3, r0
 8003138:	e7c2      	b.n	80030c0 <memset+0x20>
 800313a:	bf00      	nop
 800313c:	0000      	movs	r0, r0
	...

08003140 <strcasecmp>:
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <strcasecmp+0x3c>)
 8003142:	b430      	push	{r4, r5}
 8003144:	681d      	ldr	r5, [r3, #0]
 8003146:	e002      	b.n	800314e <strcasecmp+0xe>
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	d114      	bne.n	8003176 <strcasecmp+0x36>
 800314c:	b19a      	cbz	r2, 8003176 <strcasecmp+0x36>
 800314e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003152:	18ea      	adds	r2, r5, r3
 8003154:	7852      	ldrb	r2, [r2, #1]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	2a01      	cmp	r2, #1
 800315c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003160:	bf08      	it	eq
 8003162:	3320      	addeq	r3, #32
 8003164:	18ac      	adds	r4, r5, r2
 8003166:	7864      	ldrb	r4, [r4, #1]
 8003168:	f004 0403 	and.w	r4, r4, #3
 800316c:	2c01      	cmp	r4, #1
 800316e:	d1eb      	bne.n	8003148 <strcasecmp+0x8>
 8003170:	3220      	adds	r2, #32
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	d0eb      	beq.n	800314e <strcasecmp+0xe>
 8003176:	4618      	mov	r0, r3
 8003178:	bc30      	pop	{r4, r5}
 800317a:	4770      	bx	lr
 800317c:	20000830 	.word	0x20000830

08003180 <strpbrk>:
 8003180:	b430      	push	{r4, r5}
 8003182:	7804      	ldrb	r4, [r0, #0]
 8003184:	b1ec      	cbz	r4, 80031c2 <strpbrk+0x42>
 8003186:	780d      	ldrb	r5, [r1, #0]
 8003188:	b1ad      	cbz	r5, 80031b6 <strpbrk+0x36>
 800318a:	42ac      	cmp	r4, r5
 800318c:	d00e      	beq.n	80031ac <strpbrk+0x2c>
 800318e:	460a      	mov	r2, r1
 8003190:	e001      	b.n	8003196 <strpbrk+0x16>
 8003192:	429c      	cmp	r4, r3
 8003194:	d009      	beq.n	80031aa <strpbrk+0x2a>
 8003196:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f9      	bne.n	8003192 <strpbrk+0x12>
 800319e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80031a2:	2c00      	cmp	r4, #0
 80031a4:	d1f0      	bne.n	8003188 <strpbrk+0x8>
 80031a6:	7815      	ldrb	r5, [r2, #0]
 80031a8:	e000      	b.n	80031ac <strpbrk+0x2c>
 80031aa:	4625      	mov	r5, r4
 80031ac:	2d00      	cmp	r5, #0
 80031ae:	bf08      	it	eq
 80031b0:	2000      	moveq	r0, #0
 80031b2:	bc30      	pop	{r4, r5}
 80031b4:	4770      	bx	lr
 80031b6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80031ba:	460a      	mov	r2, r1
 80031bc:	2c00      	cmp	r4, #0
 80031be:	d1e3      	bne.n	8003188 <strpbrk+0x8>
 80031c0:	e7f1      	b.n	80031a6 <strpbrk+0x26>
 80031c2:	4620      	mov	r0, r4
 80031c4:	bc30      	pop	{r4, r5}
 80031c6:	4770      	bx	lr
	...

080031d0 <strspn>:
 80031d0:	b470      	push	{r4, r5, r6}
 80031d2:	7804      	ldrb	r4, [r0, #0]
 80031d4:	b1a4      	cbz	r4, 8003200 <strspn+0x30>
 80031d6:	4605      	mov	r5, r0
 80031d8:	780e      	ldrb	r6, [r1, #0]
 80031da:	b14e      	cbz	r6, 80031f0 <strspn+0x20>
 80031dc:	42b4      	cmp	r4, r6
 80031de:	d00a      	beq.n	80031f6 <strspn+0x26>
 80031e0:	460a      	mov	r2, r1
 80031e2:	e001      	b.n	80031e8 <strspn+0x18>
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d006      	beq.n	80031f6 <strspn+0x26>
 80031e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f9      	bne.n	80031e4 <strspn+0x14>
 80031f0:	1a28      	subs	r0, r5, r0
 80031f2:	bc70      	pop	{r4, r5, r6}
 80031f4:	4770      	bx	lr
 80031f6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80031fa:	2c00      	cmp	r4, #0
 80031fc:	d1ed      	bne.n	80031da <strspn+0xa>
 80031fe:	e7f7      	b.n	80031f0 <strspn+0x20>
 8003200:	4620      	mov	r0, r4
 8003202:	e7f6      	b.n	80031f2 <strspn+0x22>
	...

08003210 <zero_status>:
	...

08003220 <active_status>:
	...

08003230 <halted_status>:
 8003230:	0001 0000 0000 0000 0000 0000 0000 0000     ................

08003240 <ep1config>:
 8003240:	0002 0000 0000 0000 23d1 0800 2351 0800     .........#..Q#..
 8003250:	0040 0040 0848 2000 0858 2000 0002 0000     @.@.H.. X.. ....
	...

08003270 <vcom_configuration_descriptor_data>:
 8003270:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 8003280:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 8003290:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 80032a0:	0a02 0000 0700 0105 4002 0000 0507 0281     .........@......
 80032b0:	0040 0000 0000 0000 0000 0000 0000 0000     @...............

080032c0 <vcom_string1>:
 80032c0:	0312 004c 0065 0061 0066 004c 0061 0062     ..L.e.a.f.L.a.b.
 80032d0:	0073 0000 0000 0000 0000 0000 0000 0000     s...............

080032e0 <vcom_string2>:
 80032e0:	0338 0043 0068 0069 0062 0069 004f 0053     8.C.h.i.b.i.O.S.
 80032f0:	002f 0052 0054 0020 0056 0069 0072 0074     /.R.T. .V.i.r.t.
 8003300:	0075 0061 006c 0020 0043 004f 004d 0020     u.a.l. .C.O.M. .
 8003310:	0050 006f 0072 0074 0000 0000 0000 0000     P.o.r.t.........

08003320 <vcom_configuration_descriptor>:
 8003320:	0043 0000 3270 0800 0000 0000 0000 0000     C...p2..........

08003330 <ep2config>:
 8003330:	0003 0000 0000 0000 1b91 0800 0000 0000     ................
 8003340:	0010 0000 0838 2000 0000 0000 0001 0000     ....8.. ........
	...
 8003360:	6e28 6c75 296c 0000 7355 6761 3a65 2520     (null)..Usage: %
 8003370:	0d73 000a 7973 7473 6d69 0065 6c25 0d75     s...systime.%lu.
 8003380:	000a 0000 6e69 6f66 0000 0000 654b 6e72     ....info....Kern
 8003390:	6c65 203a 2020 2020 2020 7325 0a0d 0000     el:       %s....
 80033a0:	2e33 2e30 0031 0000 6f43 706d 6c69 7265     3.0.1...Compiler
 80033b0:	203a 2020 2020 7325 0a0d 0000 4347 2043     :     %s....GCC 
 80033c0:	2e34 2e39 2033 3032 3531 3530 3932 2820     4.9.3 20150529 (
 80033d0:	6572 656c 7361 2965 5b20 5241 2f4d 6d65     release) [ARM/em
 80033e0:	6562 6464 6465 342d 395f 622d 6172 636e     bedded-4_9-branc
 80033f0:	2068 6572 6976 6973 6e6f 3220 3732 3739     h revision 22797
 8003400:	5d37 0000 7241 6863 7469 6365 7574 6572     7]..Architecture
 8003410:	203a 7325 0a0d 0000 5241 764d 2d37 004d     : %s....ARMv7-M.
 8003420:	6f43 6572 5620 7261 6169 746e 203a 7325     Core Variant: %s
 8003430:	0a0d 0000 6f43 7472 7865 4d2d 0033 0000     ....Cortex-M3...
 8003440:	6f50 7472 4920 666e 3a6f 2020 2020 7325     Port Info:    %s
 8003450:	0a0d 0000 6441 6176 636e 6465 6b20 7265     ....Advanced ker
 8003460:	656e 206c 6f6d 6564 0000 0000 6c50 7461     nel mode....Plat
 8003470:	6f66 6d72 203a 2020 2020 7325 0a0d 0000     form:     %s....
 8003480:	5453 334d 4632 3031 2078 6550 6672 726f     STM32F10x Perfor
 8003490:	616d 636e 2065 694c 656e 4d20 6465 7569     mance Line Mediu
 80034a0:	206d 6544 736e 7469 0079 0000 6f42 7261     m Density...Boar
 80034b0:	3a64 2020 2020 2020 2020 7325 0a0d 0000     d:        %s....
 80034c0:	654c 6661 614c 7362 4d20 7061 656c 4d20     LeafLabs Maple M
 80034d0:	6e69 0069 7542 6c69 2064 6974 656d 203a     ini.Build time: 
 80034e0:	2020 7325 7325 7325 0a0d 0000 6f4e 2076       %s%s%s....Nov 
 80034f0:	3231 3220 3130 0037 2d20 0020 3130 313a     12 2017. - .01:1
 8003500:	3a31 3730 0000 0000 6873 6c65 006c 0000     1:07....shell...
 8003510:	0a0d 5453 6365 2868 6173 6761 7261 742e     ..STech(saagar.t
 8003520:	6365 4068 6d67 6961 2e6c 6f63 296d 0a0d     ech@gmail.com)..
 8003530:	0000 0000 7567 7365 3e74 0020 445e 0000     ....guest> .^D..
 8003540:	6f74 206f 616d 796e 6120 6772 6d75 6e65     too many argumen
 8003550:	7374 0a0d 0000 0000 7865 7469 0000 0000     ts......exit....
 8003560:	6568 706c 0000 0000 6f43 6d6d 6e61 7364     help....Commands
 8003570:	203a 6568 706c 6520 6978 2074 0000 0000     : help exit ....
 8003580:	7325 0020 7325 0000 3f20 0a0d 0000 0000     %s .%s.. ?......
 8003590:	0a0d 6f6c 6f67 7475 0000 0000 0000 0000     ..logout........

080035a0 <vcom_device_descriptor_data>:
 80035a0:	0112 0110 0002 4000 1eaf 0004 0200 0201     .......@........
 80035b0:	0103 0000 0000 0000 0000 0000 0000 0000     ................

080035c0 <ep0config>:
 80035c0:	0000 0000 09b1 0800 08c1 0800 07c1 0800     ................
 80035d0:	0040 0040 086c 2000 086c 2000 0001 0000     @.@.l.. l.. ....
 80035e0:	0880 2000 0000 0000 0000 0000 0000 0000     ... ............

080035f0 <vcom_string0>:
 80035f0:	0304 0409 0000 0000 0000 0000 0000 0000     ................

08003600 <vcom_string3>:
 8003600:	0308 0033 0030 0031 0000 0000 0000 0000     ..3.0.1.........

08003610 <CSWTCH.32>:
 8003610:	0400 0000 0600 0000 0000 0000 0000 0000     ................

08003620 <vcom_strings>:
 8003620:	0004 0000 35f0 0800 0012 0000 32c0 0800     .....5.......2..
 8003630:	0038 0000 32e0 0800 0008 0000 3600 0800     8....2.......6..

08003640 <vcom_device_descriptor>:
 8003640:	0012 0000 35a0 0800 0000 0000 0000 0000     .....5..........

08003650 <ch_debug>:
 8003650:	616d 6e69 1600 1801 0204 0844 100c 1814     main......D.....
 8003660:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................

08003670 <commands>:
 8003670:	36e0 0800 26f1 0800 36e4 0800 26b1 0800     .6...&...6...&..
	...

08003690 <usbcfg>:
 8003690:	15d1 0800 0de1 0800 1ba1 0800 0000 0000     ................
 80036a0:	6c62 6e69 656b 0072 6156 756c 2065 203a     blinker.Value : 
 80036b0:	6425 0d20 000a 0000 7355 6761 3a65 7420     %d .....Usage: t
 80036c0:	7365 0d74 000a 0000 7355 6761 3a65 6d20     est.....Usage: m
 80036d0:	6d65 0a0d 0000 0000 6469 656c 0000 0000     em......idle....
 80036e0:	656d 006d 6461 5f63 6177 6374 0068 0000     mem.adc_watch...

080036f0 <serusbcfg>:
 80036f0:	08c0 2000 0101 0002 0000 0000 0000 0000     ... ............

08003700 <shell_cfg1>:
 8003700:	0944 2000 3670 0800 0000 0000 0000 0000     D.. p6..........

08003710 <_stm32_dma_streams>:
 8003710:	0008 4002 0004 4002 0000 000b 001c 4002     ...@...@.......@
 8003720:	0004 4002 0104 000c 0030 4002 0004 4002     ...@....0..@...@
 8003730:	0208 000d 0044 4002 0004 4002 030c 000e     ....D..@...@....
 8003740:	0058 4002 0004 4002 0410 000f 006c 4002     X..@...@....l..@
 8003750:	0004 4002 0514 0010 0080 4002 0004 4002     ...@.......@...@
 8003760:	0618 0011 0000 0000 0000 0000 0000 0000     ................

08003770 <vmt>:
 8003770:	2021 0800 2141 0800 20a1 0800 21b1 0800     ! ..A!... ...!..
 8003780:	2091 0800 21a1 0800 2011 0800 2131 0800     . ...!... ..1!..
 8003790:	0920 0000 0000 0000 0000 0000 0000 0000      ...............

080037a0 <_ctype_>:
 80037a0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80037b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80037c0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80037d0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80037e0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80037f0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8003800:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8003810:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8003820:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
