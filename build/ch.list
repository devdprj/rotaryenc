
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <Reset_Handler>:
 8000140:	b672      	cpsid	i
 8000142:	4821      	ldr	r0, [pc, #132]	; (80001c8 <endfiniloop+0x4>)
 8000144:	f380 8809 	msr	PSP, r0
 8000148:	2002      	movs	r0, #2
 800014a:	f380 8814 	msr	CONTROL, r0
 800014e:	f3bf 8f6f 	isb	sy
 8000152:	f001 fa25 	bl	80015a0 <__core_init>
 8000156:	f001 fd7b 	bl	8001c50 <__early_init>
 800015a:	481c      	ldr	r0, [pc, #112]	; (80001cc <endfiniloop+0x8>)
 800015c:	491c      	ldr	r1, [pc, #112]	; (80001d0 <endfiniloop+0xc>)
 800015e:	4a1d      	ldr	r2, [pc, #116]	; (80001d4 <endfiniloop+0x10>)

08000160 <msloop>:
 8000160:	4291      	cmp	r1, r2
 8000162:	bf3c      	itt	cc
 8000164:	f841 0b04 	strcc.w	r0, [r1], #4
 8000168:	e7fa      	bcc.n	8000160 <msloop>
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <endfiniloop+0x14>)
 800016c:	4a16      	ldr	r2, [pc, #88]	; (80001c8 <endfiniloop+0x4>)

0800016e <psloop>:
 800016e:	4291      	cmp	r1, r2
 8000170:	bf3c      	itt	cc
 8000172:	f841 0b04 	strcc.w	r0, [r1], #4
 8000176:	e7fa      	bcc.n	800016e <psloop>
 8000178:	4918      	ldr	r1, [pc, #96]	; (80001dc <endfiniloop+0x18>)
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <endfiniloop+0x1c>)
 800017c:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <endfiniloop+0x20>)

0800017e <dloop>:
 800017e:	429a      	cmp	r2, r3
 8000180:	bf3e      	ittt	cc
 8000182:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000186:	f842 0b04 	strcc.w	r0, [r2], #4
 800018a:	e7f8      	bcc.n	800017e <dloop>
 800018c:	2000      	movs	r0, #0
 800018e:	4916      	ldr	r1, [pc, #88]	; (80001e8 <endfiniloop+0x24>)
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <endfiniloop+0x28>)

08000192 <bloop>:
 8000192:	4291      	cmp	r1, r2
 8000194:	bf3c      	itt	cc
 8000196:	f841 0b04 	strcc.w	r0, [r1], #4
 800019a:	e7fa      	bcc.n	8000192 <bloop>
 800019c:	f001 f9f8 	bl	8001590 <__late_init>
 80001a0:	4c13      	ldr	r4, [pc, #76]	; (80001f0 <endfiniloop+0x2c>)
 80001a2:	4d14      	ldr	r5, [pc, #80]	; (80001f4 <endfiniloop+0x30>)

080001a4 <initloop>:
 80001a4:	42ac      	cmp	r4, r5
 80001a6:	da03      	bge.n	80001b0 <endinitloop>
 80001a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001ac:	4788      	blx	r1
 80001ae:	e7f9      	b.n	80001a4 <initloop>

080001b0 <endinitloop>:
 80001b0:	f002 f8de 	bl	8002370 <main>
 80001b4:	4c10      	ldr	r4, [pc, #64]	; (80001f8 <endfiniloop+0x34>)
 80001b6:	4d11      	ldr	r5, [pc, #68]	; (80001fc <endfiniloop+0x38>)

080001b8 <finiloop>:
 80001b8:	42ac      	cmp	r4, r5
 80001ba:	da03      	bge.n	80001c4 <endfiniloop>
 80001bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80001c0:	4788      	blx	r1
 80001c2:	e7f9      	b.n	80001b8 <finiloop>

080001c4 <endfiniloop>:
 80001c4:	f001 b9dc 	b.w	8001580 <__default_exit>
 80001c8:	20000800 	.word	0x20000800
 80001cc:	55555555 	.word	0x55555555
 80001d0:	20000000 	.word	0x20000000
 80001d4:	20000400 	.word	0x20000400
 80001d8:	20000400 	.word	0x20000400
 80001dc:	08004498 	.word	0x08004498
 80001e0:	20000800 	.word	0x20000800
 80001e4:	20000844 	.word	0x20000844
 80001e8:	20000848 	.word	0x20000848
 80001ec:	20001090 	.word	0x20001090
 80001f0:	08000140 	.word	0x08000140
 80001f4:	08000140 	.word	0x08000140
 80001f8:	08000140 	.word	0x08000140
 80001fc:	08000140 	.word	0x08000140

08000200 <_port_switch>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000208:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800020c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000210 <_port_thread_start>:
 8000210:	2300      	movs	r3, #0
 8000212:	f383 8811 	msr	BASEPRI, r3
 8000216:	4628      	mov	r0, r5
 8000218:	47a0      	blx	r4
 800021a:	2000      	movs	r0, #0
 800021c:	f000 ffc0 	bl	80011a0 <chThdExit>

08000220 <_port_switch_from_isr>:
 8000220:	f000 fece 	bl	8000fc0 <chSchDoReschedule>

08000224 <_port_exit_from_isr>:
 8000224:	df00      	svc	0
 8000226:	e7fe      	b.n	8000226 <_port_exit_from_isr+0x2>
	...

08000230 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000230:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8000232:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
 8000234:	fa02 f301 	lsl.w	r3, r2, r1
 8000238:	8904      	ldrh	r4, [r0, #8]
 800023a:	b29b      	uxth	r3, r3
 800023c:	ea13 0504 	ands.w	r5, r3, r4
 8000240:	d002      	beq.n	8000248 <usbStartTransmitI+0x18>
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000242:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
 8000244:	4610      	mov	r0, r2
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_in(usbp, ep);
  return false;
}
 8000246:	4770      	bx	lr
 8000248:	0089      	lsls	r1, r1, #2
 800024a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800024e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000252:	680a      	ldr	r2, [r1, #0]

  if (usbGetTransmitStatusI(usbp, ep)) {
    return true;
  }

  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000254:	4323      	orrs	r3, r4
 8000256:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800025a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800025e:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8000262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000266:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800026a:	8103      	strh	r3, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return false;
 800026c:	4628      	mov	r0, r5
}
 800026e:	bc30      	pop	{r4, r5}
 8000270:	600a      	str	r2, [r1, #0]
 8000272:	4770      	bx	lr
	...

08000280 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000280:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000284:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8000286:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800028a:	4906      	ldr	r1, [pc, #24]	; (80002a4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8000292:	b510      	push	{r4, lr}
 8000294:	4604      	mov	r4, r0
 8000296:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000298:	b10a      	cbz	r2, 800029e <set_address+0x1e>
 800029a:	2101      	movs	r1, #1
 800029c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800029e:	2303      	movs	r3, #3
 80002a0:	7023      	strb	r3, [r4, #0]
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	40005c00 	.word	0x40005c00
	...

080002b0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
	...

080002c0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80002c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80002c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80002c8:	2b20      	cmp	r3, #32
 80002ca:	d001      	beq.n	80002d0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80002cc:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80002ce:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80002d0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80002d4:	2b21      	cmp	r3, #33	; 0x21
 80002d6:	d003      	beq.n	80002e0 <sduRequestsHook+0x20>
 80002d8:	2b22      	cmp	r3, #34	; 0x22
 80002da:	d009      	beq.n	80002f0 <sduRequestsHook+0x30>
 80002dc:	2b20      	cmp	r3, #32
 80002de:	d1f5      	bne.n	80002cc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <sduRequestsHook+0x3c>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	2300      	movs	r3, #0
 80002e6:	6681      	str	r1, [r0, #104]	; 0x68
 80002e8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80002ea:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002ec:	2001      	movs	r0, #1
 80002ee:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002f0:	2300      	movs	r3, #0
 80002f2:	6683      	str	r3, [r0, #104]	; 0x68
 80002f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80002f6:	6703      	str	r3, [r0, #112]	; 0x70
      return true;
 80002f8:	2001      	movs	r0, #1
 80002fa:	4770      	bx	lr
 80002fc:	20000800 	.word	0x20000800

08000300 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000300:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000304:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000306:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800030a:	2300      	movs	r3, #0
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
	...

08000320 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000320:	b410      	push	{r4}
 8000322:	2320      	movs	r3, #32
 8000324:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000328:	4c09      	ldr	r4, [pc, #36]	; (8000350 <chCoreAlloc+0x30>)
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <chCoreAlloc+0x34>)
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000330:	1dc3      	adds	r3, r0, #7
 8000332:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000336:	1a89      	subs	r1, r1, r2
 8000338:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800033a:	bf9d      	ittte	ls
 800033c:	189b      	addls	r3, r3, r2
 800033e:	6023      	strls	r3, [r4, #0]

  return p;
 8000340:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000342:	2000      	movhi	r0, #0
 8000344:	2300      	movs	r3, #0
 8000346:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800034a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	20000a0c 	.word	0x20000a0c
 8000354:	20000a08 	.word	0x20000a08
	...

08000360 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000360:	b410      	push	{r4}
 8000362:	2320      	movs	r3, #32
 8000364:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000368:	7f03      	ldrb	r3, [r0, #28]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d80e      	bhi.n	800038c <wakeup+0x2c>
 800036e:	e8df f003 	tbb	[pc, r3]
 8000372:	0d27      	.short	0x0d27
 8000374:	0408230d 	.word	0x0408230d
 8000378:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800037a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000382:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000386:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000388:	6802      	ldr	r2, [r0, #0]
 800038a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800038c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000390:	2200      	movs	r2, #0
 8000392:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000396:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000398:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800039a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	428a      	cmp	r2, r1
 80003a0:	d2fb      	bcs.n	800039a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003a2:	685a      	ldr	r2, [r3, #4]
 80003a4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003a6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80003a8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80003aa:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003ac:	6058      	str	r0, [r3, #4]
 80003ae:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003b6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80003b8:	6a03      	ldr	r3, [r0, #32]
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	e7e5      	b.n	800038c <wakeup+0x2c>
 80003c0:	2300      	movs	r3, #0
 80003c2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20000f20 	.word	0x20000f20

080003d0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80003d0:	b410      	push	{r4}
 80003d2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003d4:	2200      	movs	r2, #0
 80003d6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80003da:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80003dc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	428a      	cmp	r2, r1
 80003e2:	d2fb      	bcs.n	80003dc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80003e4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80003e6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80003e8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80003ea:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80003ec:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80003ee:	605c      	str	r4, [r3, #4]

  return tp;
}
 80003f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	20000f20 	.word	0x20000f20
 80003fc:	00000000 	.word	0x00000000

08000400 <_idle_thread.lto_priv.55>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000400:	e7fe      	b.n	8000400 <_idle_thread.lto_priv.55>
 8000402:	bf00      	nop
	...

08000410 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8000410:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000414:	b538      	push	{r3, r4, r5, lr}
 8000416:	2a06      	cmp	r2, #6
 8000418:	d80a      	bhi.n	8000430 <_usb_ep0out+0x20>
 800041a:	2301      	movs	r3, #1
 800041c:	4093      	lsls	r3, r2
 800041e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8000422:	4604      	mov	r4, r0
 8000424:	d111      	bne.n	800044a <_usb_ep0out+0x3a>
 8000426:	f013 0508 	ands.w	r5, r3, #8
 800042a:	d102      	bne.n	8000432 <_usb_ep0out+0x22>
 800042c:	06db      	lsls	r3, r3, #27
 800042e:	d42e      	bmi.n	800048e <_usb_ep0out+0x7e>
 8000430:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 8000432:	68c3      	ldr	r3, [r0, #12]
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f9      	bne.n	8000430 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800043c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800043e:	b103      	cbz	r3, 8000442 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8000440:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000442:	2300      	movs	r3, #0
 8000444:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000448:	bd38      	pop	{r3, r4, r5, pc}
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <_usb_ep0out+0xac>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800044c:	6841      	ldr	r1, [r0, #4]
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	680d      	ldr	r5, [r1, #0]
 8000452:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800045a:	f083 0310 	eor.w	r3, r3, #16
 800045e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000468:	6813      	ldr	r3, [r2, #0]
 800046a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800046e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000472:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047e:	6013      	str	r3, [r2, #0]
 8000480:	b10d      	cbz	r5, 8000486 <_usb_ep0out+0x76>
 8000482:	2105      	movs	r1, #5
 8000484:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000486:	2306      	movs	r3, #6
 8000488:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800048c:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800048e:	68c3      	ldr	r3, [r0, #12]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000490:	2205      	movs	r2, #5
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000492:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000494:	4629      	mov	r1, r5

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000496:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 800049a:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800049c:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 800049e:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 80004a0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80004a2:	f001 fc1d 	bl	8001ce0 <usb_lld_prepare_transmit>
 80004a6:	2320      	movs	r3, #32
 80004a8:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, 0);
 80004ac:	4620      	mov	r0, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	f7ff febe 	bl	8000230 <usbStartTransmitI>
 80004b4:	f385 8811 	msr	BASEPRI, r5
 80004b8:	bd38      	pop	{r3, r4, r5, pc}
 80004ba:	bf00      	nop
 80004bc:	40005c00 	.word	0x40005c00

080004c0 <onotify.lto_priv.52>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 80004c2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80004c4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80004c8:	6813      	ldr	r3, [r2, #0]
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	2904      	cmp	r1, #4
 80004ce:	d000      	beq.n	80004d2 <onotify.lto_priv.52+0x12>
 80004d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d2:	7a21      	ldrb	r1, [r4, #8]
 80004d4:	2902      	cmp	r1, #2
 80004d6:	d1fb      	bne.n	80004d0 <onotify.lto_priv.52+0x10>
    return;
  }

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	891b      	ldrh	r3, [r3, #8]
 80004dc:	2601      	movs	r6, #1
 80004de:	fa06 f202 	lsl.w	r2, r6, r2
 80004e2:	ea12 0503 	ands.w	r5, r2, r3
 80004e6:	d1f3      	bne.n	80004d0 <onotify.lto_priv.52+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 80004e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80004ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80004ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80004ee:	1ad3      	subs	r3, r2, r3
    if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	d0ed      	beq.n	80004d0 <onotify.lto_priv.52+0x10>
 80004f4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      usbPrepareQueuedTransmit(sdup->config->usbp,
 80004f8:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80004fc:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8000500:	680a      	ldr	r2, [r1, #0]
 8000502:	7909      	ldrb	r1, [r1, #4]
  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000504:	4610      	mov	r0, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000506:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800050a:	68d2      	ldr	r2, [r2, #12]
 800050c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 800050e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8000510:	7016      	strb	r6, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000512:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8000514:	60d7      	str	r7, [r2, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000516:	f001 fbe3 	bl	8001ce0 <usb_lld_prepare_transmit>
 800051a:	2320      	movs	r3, #32
 800051c:	f383 8811 	msr	BASEPRI, r3
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8000520:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000524:	6818      	ldr	r0, [r3, #0]
 8000526:	7919      	ldrb	r1, [r3, #4]
    }
  }
}
 8000528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedTransmit(sdup->config->usbp,
                               sdup->config->bulk_in,
                               &sdup->oqueue, n);

      osalSysLock();
      (void) usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800052c:	f7ff be80 	b.w	8000230 <usbStartTransmitI>

08000530 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000532:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000534:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000536:	6994      	ldr	r4, [r2, #24]

  tqp->p_next = tp->p_next;
 8000538:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800053a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800053c:	2600      	movs	r6, #0
 800053e:	68a1      	ldr	r1, [r4, #8]
 8000540:	462b      	mov	r3, r5
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000542:	606a      	str	r2, [r5, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000544:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000546:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000548:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800054a:	7726      	strb	r6, [r4, #28]
 800054c:	e000      	b.n	8000550 <chSchDoRescheduleAhead+0x20>
 800054e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	428a      	cmp	r2, r1
 8000554:	d8fb      	bhi.n	800054e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000556:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000558:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800055a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800055c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = otp;
 800055e:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000560:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000562:	bcf0      	pop	{r4, r5, r6, r7}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000564:	f7ff be4c 	b.w	8000200 <_port_switch>
 8000568:	20000f20 	.word	0x20000f20
 800056c:	00000000 	.word	0x00000000

08000570 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8000572:	4f22      	ldr	r7, [pc, #136]	; (80005fc <dmaStreamAllocate+0x8c>)
 8000574:	7a46      	ldrb	r6, [r0, #9]
 8000576:	2401      	movs	r4, #1
 8000578:	683d      	ldr	r5, [r7, #0]
 800057a:	fa04 fe06 	lsl.w	lr, r4, r6
 800057e:	ea1e 0f05 	tst.w	lr, r5
 8000582:	d136      	bne.n	80005f2 <dmaStreamAllocate+0x82>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8000584:	4c1e      	ldr	r4, [pc, #120]	; (8000600 <dmaStreamAllocate+0x90>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8000586:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800058a:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
 800058e:	f8ce 3004 	str.w	r3, [lr, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8000592:	066b      	lsls	r3, r5, #25
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8000594:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8000596:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800059a:	d004      	beq.n	80005a6 <dmaStreamAllocate+0x36>
    rccEnableDMA1(FALSE);
 800059c:	4c19      	ldr	r4, [pc, #100]	; (8000604 <dmaStreamAllocate+0x94>)
 800059e:	6963      	ldr	r3, [r4, #20]
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6163      	str	r3, [r4, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80005a6:	6803      	ldr	r3, [r0, #0]
 80005a8:	6846      	ldr	r6, [r0, #4]
 80005aa:	681c      	ldr	r4, [r3, #0]
 80005ac:	250f      	movs	r5, #15
 80005ae:	f024 040f 	bic.w	r4, r4, #15
 80005b2:	601c      	str	r4, [r3, #0]
 80005b4:	7a07      	ldrb	r7, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80005b6:	2400      	movs	r4, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80005b8:	40bd      	lsls	r5, r7
 80005ba:	6035      	str	r5, [r6, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80005bc:	601c      	str	r4, [r3, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80005be:	b1d2      	cbz	r2, 80005f6 <dmaStreamAllocate+0x86>
    nvicEnableVector(dmastp->vector, priority);
 80005c0:	7a82      	ldrb	r2, [r0, #10]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005c2:	0109      	lsls	r1, r1, #4
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005c4:	0953      	lsrs	r3, r2, #5
 80005c6:	009b      	lsls	r3, r3, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005c8:	f102 4560 	add.w	r5, r2, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005d2:	f002 021f 	and.w	r2, r2, #31
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005de:	b2c9      	uxtb	r1, r1
 80005e0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80005e4:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	4620      	mov	r0, r4
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80005f2:	4620      	mov	r0, r4
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80005f6:	4610      	mov	r0, r2
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
}
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000880 	.word	0x20000880
 8000600:	20000c68 	.word	0x20000c68
 8000604:	40021000 	.word	0x40021000
	...

08000610 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000610:	2201      	movs	r2, #1
 * @retval false        Operation started successfully.
 * @retval true         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8000612:	b430      	push	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
 8000614:	fa02 f301 	lsl.w	r3, r2, r1
 8000618:	8944      	ldrh	r4, [r0, #10]
 800061a:	b29b      	uxth	r3, r3
 800061c:	ea13 0504 	ands.w	r5, r3, r4
 8000620:	d002      	beq.n	8000628 <usbStartReceiveI+0x18>
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000622:	bc30      	pop	{r4, r5}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
 8000624:	4610      	mov	r0, r2
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  usb_lld_start_out(usbp, ep);
  return false;
}
 8000626:	4770      	bx	lr
 8000628:	0089      	lsls	r1, r1, #2
 800062a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800062e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8000632:	680a      	ldr	r2, [r1, #0]

  if (usbGetReceiveStatusI(usbp, ep)) {
    return true;
  }

  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000634:	4323      	orrs	r3, r4
 8000636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800063a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800063e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8000642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800064a:	8143      	strh	r3, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return false;
 800064c:	4628      	mov	r0, r5
}
 800064e:	bc30      	pop	{r4, r5}
 8000650:	600a      	str	r2, [r1, #0]
 8000652:	4770      	bx	lr
	...

08000660 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000660:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000662:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000666:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8000668:	2b06      	cmp	r3, #6
 800066a:	d826      	bhi.n	80006ba <_usb_ep0in+0x5a>
 800066c:	e8df f003 	tbb	[pc, r3]
 8000670:	042d4504 	.word	0x042d4504
 8000674:	2604      	.short	0x2604
 8000676:	04          	.byte	0x04
 8000677:	00          	.byte	0x00
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000678:	4a33      	ldr	r2, [pc, #204]	; (8000748 <_usb_ep0in+0xe8>)
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800067a:	6841      	ldr	r1, [r0, #4]
 800067c:	6813      	ldr	r3, [r2, #0]
 800067e:	680d      	ldr	r5, [r1, #0]
 8000680:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000688:	f083 0310 	eor.w	r3, r3, #16
 800068c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000696:	6813      	ldr	r3, [r2, #0]
 8000698:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800069c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80006a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	b10d      	cbz	r5, 80006b4 <_usb_ep0in+0x54>
 80006b0:	2105      	movs	r1, #5
 80006b2:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80006b4:	2306      	movs	r3, #6
 80006b6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 80006bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80006be:	b103      	cbz	r3, 80006c2 <_usb_ep0in+0x62>
      usbp->ep0endcb(usbp);
 80006c0:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80006c8:	bd38      	pop	{r3, r4, r5, pc}
 80006ca:	68c3      	ldr	r3, [r0, #12]
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80006cc:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = false;
 80006ce:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 80006d0:	2203      	movs	r2, #3
 80006d2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80006d6:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80006d8:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 80006da:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80006dc:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 80006de:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80006e0:	4620      	mov	r0, r4
 80006e2:	f001 fb3d 	bl	8001d60 <usb_lld_prepare_receive>
 80006e6:	2320      	movs	r3, #32
 80006e8:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, 0);
 80006ec:	4620      	mov	r0, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	f7ff ff8e 	bl	8000610 <usbStartReceiveI>
 80006f4:	f385 8811 	msr	BASEPRI, r5
 80006f8:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80006fa:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 80006fe:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000702:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8000704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000708:	428b      	cmp	r3, r1
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800070a:	68c3      	ldr	r3, [r0, #12]
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 800070c:	d9de      	bls.n	80006cc <_usb_ep0in+0x6c>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800070e:	8a1d      	ldrh	r5, [r3, #16]
 8000710:	fbb1 f2f5 	udiv	r2, r1, r5
 8000714:	fb05 1512 	mls	r5, r5, r2, r1
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8000718:	2d00      	cmp	r5, #0
 800071a:	d1d7      	bne.n	80006cc <_usb_ep0in+0x6c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800071c:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800071e:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000720:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8000722:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8000724:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8000726:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000728:	f001 fada 	bl	8001ce0 <usb_lld_prepare_transmit>
 800072c:	2320      	movs	r3, #32
 800072e:	f383 8811 	msr	BASEPRI, r3
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000732:	4620      	mov	r0, r4
 8000734:	4629      	mov	r1, r5
 8000736:	f7ff fd7b 	bl	8000230 <usbStartTransmitI>
 800073a:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800073e:	2302      	movs	r3, #2
 8000740:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000744:	bd38      	pop	{r3, r4, r5, pc}
 8000746:	bf00      	nop
 8000748:	40005c00 	.word	0x40005c00
 800074c:	00000000 	.word	0x00000000

08000750 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8000754:	4bbc      	ldr	r3, [pc, #752]	; (8000a48 <_usb_ep0setup+0x2f8>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000756:	2200      	movs	r2, #0
 8000758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800075a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800075e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000762:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000766:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800076a:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 800076c:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 800076e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8000772:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000776:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	f100 067c 	add.w	r6, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000780:	f853 1b04 	ldr.w	r1, [r3], #4
 8000784:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8000788:	42b2      	cmp	r2, r6
 800078a:	d1f9      	bne.n	8000780 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800078c:	6863      	ldr	r3, [r4, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	b36b      	cbz	r3, 80007ee <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000792:	4620      	mov	r0, r4
 8000794:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000796:	b350      	cbz	r0, 80007ee <_usb_ep0setup+0x9e>
 8000798:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800079a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 800079e:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 80007a2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80007a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80007aa:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80007ac:	bf3c      	itt	cc
 80007ae:	4615      	movcc	r5, r2
 80007b0:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80007b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80007b6:	68e3      	ldr	r3, [r4, #12]
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80007b8:	f040 80b2 	bne.w	8000920 <_usb_ep0setup+0x1d0>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80007bc:	2d00      	cmp	r5, #0
 80007be:	f040 8097 	bne.w	80008f0 <_usb_ep0setup+0x1a0>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80007c2:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80007c4:	2205      	movs	r2, #5
 80007c6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80007ca:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 80007cc:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 80007ce:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 80007d0:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 80007d2:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80007d4:	4629      	mov	r1, r5
 80007d6:	f001 fa83 	bl	8001ce0 <usb_lld_prepare_transmit>
 80007da:	2320      	movs	r3, #32
 80007dc:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 80007e0:	4620      	mov	r0, r4
 80007e2:	4629      	mov	r1, r5
 80007e4:	f7ff fd24 	bl	8000230 <usbStartTransmitI>
 80007e8:	f385 8811 	msr	BASEPRI, r5
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80007ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80007f2:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 80007f6:	d022      	beq.n	800083e <_usb_ep0setup+0xee>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80007f8:	4a93      	ldr	r2, [pc, #588]	; (8000a48 <_usb_ep0setup+0x2f8>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80007fa:	6861      	ldr	r1, [r4, #4]
 80007fc:	6813      	ldr	r3, [r2, #0]
 80007fe:	680d      	ldr	r5, [r1, #0]
 8000800:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	f083 0310 	eor.w	r3, r3, #16
 800080c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800081c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	b115      	cbz	r5, 8000836 <_usb_ep0setup+0xe6>
 8000830:	4620      	mov	r0, r4
 8000832:	2105      	movs	r1, #5
 8000834:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000836:	2306      	movs	r3, #6
 8000838:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800083e:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000846:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800084a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800084e:	f000 811a 	beq.w	8000a86 <_usb_ep0setup+0x336>
 8000852:	d918      	bls.n	8000886 <_usb_ep0setup+0x136>
 8000854:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8000858:	f000 80fc 	beq.w	8000a54 <_usb_ep0setup+0x304>
 800085c:	f240 808f 	bls.w	800097e <_usb_ep0setup+0x22e>
 8000860:	f5b5 6f10 	cmp.w	r5, #2304	; 0x900
 8000864:	f000 8099 	beq.w	800099a <_usb_ep0setup+0x24a>
 8000868:	f640 4202 	movw	r2, #3074	; 0xc02
 800086c:	4295      	cmp	r5, r2
 800086e:	f000 80e3 	beq.w	8000a38 <_usb_ep0setup+0x2e8>
 8000872:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000876:	d1bf      	bne.n	80007f8 <_usb_ep0setup+0xa8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000878:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 800087c:	2501      	movs	r5, #1
 800087e:	6727      	str	r7, [r4, #112]	; 0x70
 8000880:	66a2      	str	r2, [r4, #104]	; 0x68
 8000882:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000884:	e78b      	b.n	800079e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000886:	2d02      	cmp	r5, #2
 8000888:	f000 810d 	beq.w	8000aa6 <_usb_ep0setup+0x356>
 800088c:	f240 80ca 	bls.w	8000a24 <_usb_ep0setup+0x2d4>
 8000890:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000894:	f000 8094 	beq.w	80009c0 <_usb_ep0setup+0x270>
 8000898:	f5b5 7f81 	cmp.w	r5, #258	; 0x102
 800089c:	d1ac      	bne.n	80007f8 <_usb_ep0setup+0xa8>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800089e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d1a8      	bne.n	80007f8 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80008a6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80008aa:	f011 020f 	ands.w	r2, r1, #15
 80008ae:	d01a      	beq.n	80008e6 <_usb_ep0setup+0x196>
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008b6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80008ba:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80008be:	6811      	ldr	r1, [r2, #0]
 80008c0:	f040 8115 	bne.w	8000aee <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 80008c4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 80008c8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80008cc:	d00b      	beq.n	80008e6 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80008d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008d8:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80008e6:	2500      	movs	r5, #0
 80008e8:	66a5      	str	r5, [r4, #104]	; 0x68
 80008ea:	66e5      	str	r5, [r4, #108]	; 0x6c
 80008ec:	6725      	str	r5, [r4, #112]	; 0x70
 80008ee:	e756      	b.n	800079e <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80008f0:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 80008f2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 80008f4:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80008f6:	2104      	movs	r1, #4
 80008f8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80008fc:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
 80008fe:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8000900:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 8000902:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000904:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000906:	4631      	mov	r1, r6
 8000908:	f001 fa2a 	bl	8001d60 <usb_lld_prepare_receive>
 800090c:	2320      	movs	r3, #32
 800090e:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000912:	4620      	mov	r0, r4
 8000914:	4631      	mov	r1, r6
 8000916:	f7ff fe7b 	bl	8000610 <usbStartReceiveI>
 800091a:	f386 8811 	msr	BASEPRI, r6
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 8000920:	b1bd      	cbz	r5, 8000952 <_usb_ep0setup+0x202>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000922:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000924:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000926:	2600      	movs	r6, #0
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8000928:	2101      	movs	r1, #1
 800092a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800092e:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
  isp->mode.linear.txbuf  = buf;
 8000930:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 8000932:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = false;
 8000934:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8000936:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8000938:	4631      	mov	r1, r6
 800093a:	f001 f9d1 	bl	8001ce0 <usb_lld_prepare_transmit>
 800093e:	2320      	movs	r3, #32
 8000940:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n != 0U) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      (void) usbStartTransmitI(usbp, 0);
 8000944:	4620      	mov	r0, r4
 8000946:	4631      	mov	r1, r6
 8000948:	f7ff fc72 	bl	8000230 <usbStartTransmitI>
 800094c:	f386 8811 	msr	BASEPRI, r6
 8000950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000952:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000954:	2203      	movs	r2, #3
 8000956:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = false;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800095a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = false;
 800095c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800095e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8000960:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8000962:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8000964:	4629      	mov	r1, r5
 8000966:	f001 f9fb 	bl	8001d60 <usb_lld_prepare_receive>
 800096a:	2320      	movs	r3, #32
 800096c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      (void) usbStartReceiveI(usbp, 0);
 8000970:	4620      	mov	r0, r4
 8000972:	4629      	mov	r1, r5
 8000974:	f7ff fe4c 	bl	8000610 <usbStartReceiveI>
 8000978:	f385 8811 	msr	BASEPRI, r5
 800097c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800097e:	f240 3202 	movw	r2, #770	; 0x302
 8000982:	4295      	cmp	r5, r2
 8000984:	d02c      	beq.n	80009e0 <_usb_ep0setup+0x290>
 8000986:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 800098a:	f47f af35 	bne.w	80007f8 <_usb_ep0setup+0xa8>
        (usbp->setup[1] == USB_REQ_SET_ADDRESS)) {
      set_address(usbp);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <_usb_ep0setup+0x2fc>)
 8000990:	66a7      	str	r7, [r4, #104]	; 0x68
 8000992:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000994:	463d      	mov	r5, r7
 8000996:	6722      	str	r2, [r4, #112]	; 0x70
 8000998:	e701      	b.n	800079e <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 800099a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800099e:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0U) {
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	f040 8095 	bne.w	8000ad2 <_usb_ep0setup+0x382>
      usbp->state = USB_SELECTED;
 80009a8:	2203      	movs	r2, #3
 80009aa:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80009ac:	6862      	ldr	r2, [r4, #4]
 80009ae:	6812      	ldr	r2, [r2, #0]
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d098      	beq.n	80008e6 <_usb_ep0setup+0x196>
 80009b4:	4620      	mov	r0, r4
 80009b6:	2102      	movs	r1, #2
 80009b8:	4790      	blx	r2
 80009ba:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80009be:	e792      	b.n	80008e6 <_usb_ep0setup+0x196>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80009c0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	f47f af17 	bne.w	80007f8 <_usb_ep0setup+0xa8>
      usbp->status &= ~2U;
 80009ca:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009ce:	66a7      	str	r7, [r4, #104]	; 0x68
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80009d0:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80009d4:	66e7      	str	r7, [r4, #108]	; 0x6c
 80009d6:	6727      	str	r7, [r4, #112]	; 0x70
 80009d8:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 80009da:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 80009de:	e6de      	b.n	800079e <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 80009e0:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	f47f af07 	bne.w	80007f8 <_usb_ep0setup+0xa8>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80009ea:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80009ee:	f011 020f 	ands.w	r2, r1, #15
 80009f2:	f43f af78 	beq.w	80008e6 <_usb_ep0setup+0x196>
 80009f6:	0093      	lsls	r3, r2, #2
 80009f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009fc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000a00:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f100 8087 	bmi.w	8000b16 <_usb_ep0setup+0x3c6>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a10:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8000a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000a22:	e760      	b.n	80008e6 <_usb_ep0setup+0x196>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000a24:	b92d      	cbnz	r5, 8000a32 <_usb_ep0setup+0x2e2>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000a26:	2202      	movs	r2, #2
 8000a28:	6725      	str	r5, [r4, #112]	; 0x70
 8000a2a:	66a6      	str	r6, [r4, #104]	; 0x68
 8000a2c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8000a2e:	4615      	mov	r5, r2
 8000a30:	e6b5      	b.n	800079e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000a32:	2d01      	cmp	r5, #1
 8000a34:	f47f aee0 	bne.w	80007f8 <_usb_ep0setup+0xa8>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000a38:	4905      	ldr	r1, [pc, #20]	; (8000a50 <_usb_ep0setup+0x300>)
 8000a3a:	2502      	movs	r5, #2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	66a1      	str	r1, [r4, #104]	; 0x68
 8000a40:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000a42:	6722      	str	r2, [r4, #112]	; 0x70
 8000a44:	e6ab      	b.n	800079e <_usb_ep0setup+0x4e>
 8000a46:	bf00      	nop
 8000a48:	40005c00 	.word	0x40005c00
 8000a4c:	08000281 	.word	0x08000281
 8000a50:	08003cb0 	.word	0x08003cb0
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000a54:	6861      	ldr	r1, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8000a56:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8000a5a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000a5e:	684d      	ldr	r5, [r1, #4]
 8000a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a64:	4620      	mov	r0, r4
 8000a66:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000a6a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000a6e:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 8000a70:	2800      	cmp	r0, #0
 8000a72:	f43f aec1 	beq.w	80007f8 <_usb_ep0setup+0xa8>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000a76:	6843      	ldr	r3, [r0, #4]
 8000a78:	6805      	ldr	r5, [r0, #0]
 8000a7a:	66a3      	str	r3, [r4, #104]	; 0x68
 8000a7c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000a7e:	6727      	str	r7, [r4, #112]	; 0x70
 8000a80:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000a84:	e68b      	b.n	800079e <_usb_ep0setup+0x4e>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000a86:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000a8a:	2a01      	cmp	r2, #1
 8000a8c:	f47f aeb4 	bne.w	80007f8 <_usb_ep0setup+0xa8>
      usbp->status |= 2U;
 8000a90:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000a94:	66a7      	str	r7, [r4, #104]	; 0x68
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000a96:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000a9a:	66e7      	str	r7, [r4, #108]	; 0x6c
 8000a9c:	6727      	str	r7, [r4, #112]	; 0x70
 8000a9e:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8000aa0:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8000aa4:	e67b      	b.n	800079e <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000aa6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000aaa:	4922      	ldr	r1, [pc, #136]	; (8000b34 <_usb_ep0setup+0x3e4>)
 8000aac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000ab0:	f002 020f 	and.w	r2, r2, #15
 8000ab4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ab8:	d10e      	bne.n	8000ad8 <_usb_ep0setup+0x388>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8000aba:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8000abe:	f43f ae9b 	beq.w	80007f8 <_usb_ep0setup+0xa8>
 8000ac2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ac6:	d10d      	bne.n	8000ae4 <_usb_ep0setup+0x394>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <_usb_ep0setup+0x3e8>)
 8000aca:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000acc:	6727      	str	r7, [r4, #112]	; 0x70
 8000ace:	66a2      	str	r2, [r4, #104]	; 0x68
 8000ad0:	e665      	b.n	800079e <_usb_ep0setup+0x4e>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	7022      	strb	r2, [r4, #0]
 8000ad6:	e769      	b.n	80009ac <_usb_ep0setup+0x25c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000ad8:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000adc:	f43f ae8c 	beq.w	80007f8 <_usb_ep0setup+0xa8>
 8000ae0:	2a10      	cmp	r2, #16
 8000ae2:	d0f1      	beq.n	8000ac8 <_usb_ep0setup+0x378>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <_usb_ep0setup+0x3ec>)
 8000ae6:	66e5      	str	r5, [r4, #108]	; 0x6c
 8000ae8:	6727      	str	r7, [r4, #112]	; 0x70
 8000aea:	66a2      	str	r2, [r4, #104]	; 0x68
 8000aec:	e657      	b.n	800079e <_usb_ep0setup+0x4e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000aee:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000af2:	2930      	cmp	r1, #48	; 0x30
 8000af4:	f43f aef7 	beq.w	80008e6 <_usb_ep0setup+0x196>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b02:	f083 0320 	eor.w	r3, r3, #32
 8000b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000b14:	e6e7      	b.n	80008e6 <_usb_ep0setup+0x196>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000b16:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b1e:	f082 0210 	eor.w	r2, r2, #16
 8000b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8000b30:	e6d9      	b.n	80008e6 <_usb_ep0setup+0x196>
 8000b32:	bf00      	nop
 8000b34:	40005c00 	.word	0x40005c00
 8000b38:	08003cd0 	.word	0x08003cd0
 8000b3c:	08003cc0 	.word	0x08003cc0

08000b40 <inotify.lto_priv.51>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8000b42:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000b44:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8000b48:	6813      	ldr	r3, [r2, #0]
 8000b4a:	7819      	ldrb	r1, [r3, #0]
 8000b4c:	2904      	cmp	r1, #4
 8000b4e:	d000      	beq.n	8000b52 <inotify.lto_priv.51+0x12>
 8000b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b52:	7a21      	ldrb	r1, [r4, #8]
 8000b54:	2902      	cmp	r1, #2
 8000b56:	d1fb      	bne.n	8000b50 <inotify.lto_priv.51+0x10>
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000b58:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000b5a:	2601      	movs	r6, #1
 8000b5c:	895a      	ldrh	r2, [r3, #10]
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000b5e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000b62:	68db      	ldr	r3, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000b64:	fa06 f101 	lsl.w	r1, r6, r1
 8000b68:	ea11 0502 	ands.w	r5, r1, r2
  }

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8000b6c:	8a58      	ldrh	r0, [r3, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8000b6e:	d1ef      	bne.n	8000b50 <inotify.lto_priv.51+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 8000b70:	69a3      	ldr	r3, [r4, #24]
 8000b72:	69e2      	ldr	r2, [r4, #28]
 8000b74:	6961      	ldr	r1, [r4, #20]
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	1a53      	subs	r3, r2, r1
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d8e8      	bhi.n	8000b50 <inotify.lto_priv.51+0x10>
 8000b7e:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000b82:	fbb3 f3f0 	udiv	r3, r3, r0
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000b86:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
      osalSysUnlock();

      n = (n / maxsize) * maxsize;
 8000b8a:	fb00 f303 	mul.w	r3, r0, r3
      usbPrepareQueuedReceive(sdup->config->usbp,
 8000b8e:	7951      	ldrb	r1, [r2, #5]
 8000b90:	6810      	ldr	r0, [r2, #0]
 8000b92:	f104 070c 	add.w	r7, r4, #12
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000b96:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8000b9a:	68d2      	ldr	r2, [r2, #12]
 8000b9c:	6992      	ldr	r2, [r2, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8000b9e:	6053      	str	r3, [r2, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8000ba0:	7016      	strb	r6, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8000ba2:	6095      	str	r5, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8000ba4:	60d7      	str	r7, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000ba6:	f001 f8db 	bl	8001d60 <usb_lld_prepare_receive>
 8000baa:	2320      	movs	r3, #32
 8000bac:	f383 8811 	msr	BASEPRI, r3
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000bb0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8000bb4:	6818      	ldr	r0, [r3, #0]
 8000bb6:	7959      	ldrb	r1, [r3, #5]
    }
  }
}
 8000bb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      usbPrepareQueuedReceive(sdup->config->usbp,
                              sdup->config->bulk_out,
                              &sdup->iqueue, n);

      osalSysLock();
      (void) usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8000bbc:	f7ff bd28 	b.w	8000610 <usbStartReceiveI>

08000bc0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000bc0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8000bc2:	b570      	push	{r4, r5, r6, lr}
 8000bc4:	4614      	mov	r4, r2
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL) {
 8000bca:	b123      	cbz	r3, 8000bd6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8000bcc:	4618      	mov	r0, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	f002 ffb5 	bl	8003b40 <memset>
  }
  if (epcp->out_state != NULL) {
 8000bd6:	69a0      	ldr	r0, [r4, #24]
 8000bd8:	b118      	cbz	r0, 8000be2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2214      	movs	r2, #20
 8000bde:	f002 ffaf 	bl	8003b40 <memset>
  }

  usbp->epc[ep] = epcp;
 8000be2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000be6:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000be8:	4630      	mov	r0, r6
 8000bea:	4629      	mov	r1, r5
}
 8000bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8000bf0:	f001 b8c6 	b.w	8001d80 <usb_lld_init_endpoint>
	...

08000c00 <_port_irq_epilogue>:
 8000c00:	2320      	movs	r3, #32
 8000c02:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <_port_irq_epilogue+0x44>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000c0e:	d102      	bne.n	8000c16 <_port_irq_epilogue+0x16>
 8000c10:	f383 8811 	msr	BASEPRI, r3
 8000c14:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000c16:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c1e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000c22:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000c26:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <_port_irq_epilogue+0x48>)
 8000c2c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000c2e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000c30:	6889      	ldr	r1, [r1, #8]
 8000c32:	6892      	ldr	r2, [r2, #8]
 8000c34:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000c36:	bf8c      	ite	hi
 8000c38:	4a04      	ldrhi	r2, [pc, #16]	; (8000c4c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000c3a:	4a05      	ldrls	r2, [pc, #20]	; (8000c50 <_port_irq_epilogue+0x50>)
 8000c3c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	20000f20 	.word	0x20000f20
 8000c4c:	08000221 	.word	0x08000221
 8000c50:	08000224 	.word	0x08000224
	...

08000c60 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000c64:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8000c66:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8000c68:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8000c6c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8000c6e:	060c      	lsls	r4, r1, #24
 8000c70:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000c72:	b10a      	cbz	r2, 8000c78 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000c74:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000c76:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000c7c:	f7ff bfc0 	b.w	8000c00 <_port_irq_epilogue>
 8000c80:	40020000 	.word	0x40020000
 8000c84:	20000c68 	.word	0x20000c68
	...

08000c90 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000c94:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8000c96:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8000c98:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8000c9c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8000c9e:	050c      	lsls	r4, r1, #20
 8000ca0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000ca2:	b10a      	cbz	r2, 8000ca8 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000ca4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000ca6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000cac:	f7ff bfa8 	b.w	8000c00 <_port_irq_epilogue>
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	20000c68 	.word	0x20000c68
	...

08000cc0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000cc4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8000cc6:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8000cc8:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8000ccc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 8000cce:	040c      	lsls	r4, r1, #16
 8000cd0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000cd2:	b10a      	cbz	r2, 8000cd8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000cd6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000cdc:	f7ff bf90 	b.w	8000c00 <_port_irq_epilogue>
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	20000c68 	.word	0x20000c68
	...

08000cf0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000cf4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8000cf6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8000cf8:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8000cfc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 8000cfe:	030c      	lsls	r4, r1, #12
 8000d00:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 8000d02:	b10a      	cbz	r2, 8000d08 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000d04:	69c0      	ldr	r0, [r0, #28]
 8000d06:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000d0c:	f7ff bf78 	b.w	8000c00 <_port_irq_epilogue>
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20000c68 	.word	0x20000c68
	...

08000d20 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000d24:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8000d26:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8000d28:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8000d2c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8000d2e:	020c      	lsls	r4, r1, #8
 8000d30:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8000d32:	b10a      	cbz	r2, 8000d38 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000d34:	6940      	ldr	r0, [r0, #20]
 8000d36:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000d3c:	f7ff bf60 	b.w	8000c00 <_port_irq_epilogue>
 8000d40:	40020000 	.word	0x40020000
 8000d44:	20000c68 	.word	0x20000c68
	...

08000d50 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000d54:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8000d56:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8000d58:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8000d5c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8000d5e:	010c      	lsls	r4, r1, #4
 8000d60:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8000d62:	b10a      	cbz	r2, 8000d68 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000d64:	68c0      	ldr	r0, [r0, #12]
 8000d66:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8000d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000d6c:	f7ff bf48 	b.w	8000c00 <_port_irq_epilogue>
 8000d70:	40020000 	.word	0x40020000
 8000d74:	20000c68 	.word	0x20000c68
	...

08000d80 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8000d80:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8000d8c:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	b10b      	cbz	r3, 8000d96 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000d92:	6850      	ldr	r0, [r2, #4]
 8000d94:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8000d9a:	f7ff bf31 	b.w	8000c00 <_port_irq_epilogue>
 8000d9e:	bf00      	nop
 8000da0:	40020000 	.word	0x40020000
 8000da4:	20000c68 	.word	0x20000c68
	...

08000db0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000db0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000db2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000db4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000db6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000db8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000dba:	d00a      	beq.n	8000dd2 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000dbc:	2a0b      	cmp	r2, #11
 8000dbe:	d000      	beq.n	8000dc2 <chEvtSignalI+0x12>
 8000dc0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000dc2:	6a03      	ldr	r3, [r0, #32]
 8000dc4:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d1fa      	bne.n	8000dc0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000dce:	f7ff baff 	b.w	80003d0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000dd2:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000dd4:	4219      	tst	r1, r3
 8000dd6:	d1f8      	bne.n	8000dca <chEvtSignalI+0x1a>
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000de0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000de2:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000de4:	4606      	mov	r6, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000de6:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000de8:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000dea:	d00d      	beq.n	8000e08 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000dec:	68e3      	ldr	r3, [r4, #12]
 8000dee:	432b      	orrs	r3, r5
 8000df0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000df2:	b115      	cbz	r5, 8000dfa <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000df4:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000df6:	4213      	tst	r3, r2
 8000df8:	d003      	beq.n	8000e02 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000dfa:	6860      	ldr	r0, [r4, #4]
 8000dfc:	68a1      	ldr	r1, [r4, #8]
 8000dfe:	f7ff ffd7 	bl	8000db0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8000e02:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000e04:	42a6      	cmp	r6, r4
 8000e06:	d1f1      	bne.n	8000dec <chEvtBroadcastFlagsI+0xc>
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000e10:	f101 0311 	add.w	r3, r1, #17
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8000e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000e18:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  if (sdup == NULL) {
 8000e1c:	b1bc      	cbz	r4, 8000e4e <sduDataReceived+0x3e>
 8000e1e:	4607      	mov	r7, r0
 8000e20:	460d      	mov	r5, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e22:	f04f 0820 	mov.w	r8, #32
 8000e26:	f388 8811 	msr	BASEPRI, r8
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	1860      	adds	r0, r4, r1
 8000e2e:	f7ff ffd7 	bl	8000de0 <chEvtBroadcastFlagsI>
 8000e32:	eb07 0085 	add.w	r0, r7, r5, lsl #2
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8000e36:	68c1      	ldr	r1, [r0, #12]
 8000e38:	69e2      	ldr	r2, [r4, #28]
 8000e3a:	69a6      	ldr	r6, [r4, #24]
 8000e3c:	6963      	ldr	r3, [r4, #20]
 8000e3e:	8a49      	ldrh	r1, [r1, #18]
 8000e40:	1b92      	subs	r2, r2, r6
 8000e42:	1ad3      	subs	r3, r2, r3
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d904      	bls.n	8000e52 <sduDataReceived+0x42>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f383 8811 	msr	BASEPRI, r3
 8000e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e52:	f04f 0e00 	mov.w	lr, #0
 8000e56:	f38e 8811 	msr	BASEPRI, lr
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000e5e:	68c2      	ldr	r2, [r0, #12]
 8000e60:	fb01 f303 	mul.w	r3, r1, r3
 8000e64:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8000e66:	340c      	adds	r4, #12

  osp->rxqueued           = true;
 8000e68:	2101      	movs	r1, #1
 8000e6a:	7011      	strb	r1, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8000e6c:	6053      	str	r3, [r2, #4]
  osp->rxcnt              = 0;
 8000e6e:	f8c2 e008 	str.w	lr, [r2, #8]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
 8000e72:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8000e74:	4638      	mov	r0, r7
 8000e76:	4629      	mov	r1, r5
 8000e78:	f000 ff72 	bl	8001d60 <usb_lld_prepare_receive>
 8000e7c:	f388 8811 	msr	BASEPRI, r8

    osalSysLockFromISR();
    (void) usbStartReceiveI(usbp, ep);
 8000e80:	4638      	mov	r0, r7
 8000e82:	4629      	mov	r1, r5
 8000e84:	f7ff fbc4 	bl	8000610 <usbStartReceiveI>
 8000e88:	e7de      	b.n	8000e48 <sduDataReceived+0x38>
 8000e8a:	bf00      	nop
 8000e8c:	0000      	movs	r0, r0
	...

08000e90 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8000e92:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8000e96:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  if (sdup == NULL) {
 8000e98:	b1bc      	cbz	r4, 8000eca <sduDataTransmitted+0x3a>
 8000e9a:	460e      	mov	r6, r1
 8000e9c:	4605      	mov	r5, r0
 8000e9e:	2720      	movs	r7, #32
 8000ea0:	f387 8811 	msr	BASEPRI, r7
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	1d20      	adds	r0, r4, #4
 8000ea8:	f7ff ff9a 	bl	8000de0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 8000eac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000eb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000eb2:	1ad3      	subs	r3, r2, r3

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	d118      	bne.n	8000eea <sduDataTransmitted+0x5a>
 8000eb8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8000ebc:	68cb      	ldr	r3, [r1, #12]
 8000ebe:	695a      	ldr	r2, [r3, #20]
 8000ec0:	6852      	ldr	r2, [r2, #4]
 8000ec2:	b91a      	cbnz	r2, 8000ecc <sduDataTransmitted+0x3c>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8000ecc:	8a1b      	ldrh	r3, [r3, #16]
 8000ece:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d1f7      	bne.n	8000ec4 <sduDataTransmitted+0x34>
 8000ed4:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000ed8:	68ca      	ldr	r2, [r1, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 8000eda:	3430      	adds	r4, #48	; 0x30
 8000edc:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 8000ede:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8000ee0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8000ee2:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
  isp->mode.queue.txqueue = oqp;
 8000ee4:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8000ee6:	7011      	strb	r1, [r2, #0]
 8000ee8:	e00c      	b.n	8000f04 <sduDataTransmitted+0x74>
 8000eea:	2100      	movs	r1, #0
 8000eec:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000ef0:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 8000ef4:	68d2      	ldr	r2, [r2, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0U) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8000ef6:	3430      	adds	r4, #48	; 0x30
 8000ef8:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = true;
 8000efa:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
 8000efc:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 8000efe:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8000f00:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = true;
 8000f02:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8000f04:	4628      	mov	r0, r5
 8000f06:	4631      	mov	r1, r6
 8000f08:	f000 feea 	bl	8001ce0 <usb_lld_prepare_transmit>
 8000f0c:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    (void) usbStartTransmitI(usbp, ep);
 8000f10:	4628      	mov	r0, r5
 8000f12:	4631      	mov	r1, r6
 8000f14:	f7ff f98c 	bl	8000230 <usbStartTransmitI>
 8000f18:	e7d4      	b.n	8000ec4 <sduDataTransmitted+0x34>
 8000f1a:	bf00      	nop
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000f22:	490f      	ldr	r1, [pc, #60]	; (8000f60 <chTMStopMeasurementX+0x40>)
 8000f24:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000f26:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000f28:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000f2e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000f30:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000f32:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000f34:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8000f38:	18e4      	adds	r4, r4, r3
 8000f3a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000f3e:	3201      	adds	r2, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000f40:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000f42:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000f44:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000f46:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000f4a:	d805      	bhi.n	8000f58 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000f4c:	6802      	ldr	r2, [r0, #0]
 8000f4e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000f50:	bf38      	it	cc
 8000f52:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000f54:	bc30      	pop	{r4, r5}
 8000f56:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000f58:	6043      	str	r3, [r0, #4]
 8000f5a:	e7fb      	b.n	8000f54 <chTMStopMeasurementX+0x34>
 8000f5c:	e0001000 	.word	0xe0001000
 8000f60:	20000f20 	.word	0x20000f20
	...

08000f70 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000f70:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000f72:	6803      	ldr	r3, [r0, #0]
 8000f74:	4604      	mov	r4, r0

  while (queue_notempty(tqp)) {
 8000f76:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000f78:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 8000f7a:	d009      	beq.n	8000f90 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000f7c:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 8000f7e:	4618      	mov	r0, r3
 8000f80:	6022      	str	r2, [r4, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f82:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000f84:	621d      	str	r5, [r3, #32]
  (void) chSchReadyI(tp);
 8000f86:	f7ff fa23 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	429c      	cmp	r4, r3
 8000f8e:	d1f5      	bne.n	8000f7c <chThdDequeueAllI+0xc>
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
	...

08000fa0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000fa0:	6803      	ldr	r3, [r0, #0]
 8000fa2:	b12b      	cbz	r3, 8000fb0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000fa8:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000faa:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 8000fac:	f7ff ba10 	b.w	80003d0 <chSchReadyI>
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
	...

08000fc0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8000fc0:	f7ff bab6 	b.w	8000530 <chSchDoRescheduleAhead>
	...

08000fd0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <chSchRescheduleS+0x14>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000fd6:	6892      	ldr	r2, [r2, #8]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d800      	bhi.n	8000fe0 <chSchRescheduleS+0x10>
 8000fde:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8000fe0:	f7ff baa6 	b.w	8000530 <chSchDoRescheduleAhead>
 8000fe4:	20000f20 	.word	0x20000f20
	...

08000ff0 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000ff2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8000ff4:	699d      	ldr	r5, [r3, #24]
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000ffc:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000ffe:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001000:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001002:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001004:	d01d      	beq.n	8001042 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001006:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001008:	b14b      	cbz	r3, 800101e <chMtxUnlock+0x2e>
 800100a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800100c:	4293      	cmp	r3, r2
 800100e:	d003      	beq.n	8001018 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001010:	6892      	ldr	r2, [r2, #8]
 8001012:	4291      	cmp	r1, r2
 8001014:	bf38      	it	cc
 8001016:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001018:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f5      	bne.n	800100a <chMtxUnlock+0x1a>
 800101e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001020:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001022:	6ba6      	ldr	r6, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001024:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001026:	60a9      	str	r1, [r5, #8]
 8001028:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800102a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800102c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800102e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001030:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001032:	f7ff f9cd 	bl	80003d0 <chSchReadyI>
      chSchRescheduleS();
 8001036:	f7ff ffcb 	bl	8000fd0 <chSchRescheduleS>
 800103a:	2300      	movs	r3, #0
 800103c:	f383 8811 	msr	BASEPRI, r3
 8001040:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 8001042:	2300      	movs	r3, #0
 8001044:	6083      	str	r3, [r0, #8]
 8001046:	2300      	movs	r3, #0
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	bd70      	pop	{r4, r5, r6, pc}
 800104e:	bf00      	nop
 8001050:	20000f20 	.word	0x20000f20
	...

08001060 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001062:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001064:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001066:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001068:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800106a:	2501      	movs	r5, #1
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
  otp->p_state = newstate;
 800106c:	7708      	strb	r0, [r1, #28]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800106e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001070:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001072:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001074:	4610      	mov	r0, r2
}
 8001076:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001078:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800107a:	f7ff b8c1 	b.w	8000200 <_port_switch>
 800107e:	bf00      	nop
 8001080:	20000f20 	.word	0x20000f20
	...

08001090 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001092:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <chMtxLockS+0xc4>)
 8001096:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001098:	2a00      	cmp	r2, #0
 800109a:	d055      	beq.n	8001148 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800109c:	68a1      	ldr	r1, [r4, #8]
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	4605      	mov	r5, r0
 80010a2:	4299      	cmp	r1, r3
 80010a4:	d906      	bls.n	80010b4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80010a6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80010a8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d033      	beq.n	8001116 <chMtxLockS+0x86>
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d01d      	beq.n	80010ee <chMtxLockS+0x5e>
 80010b2:	b19b      	cbz	r3, 80010dc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010b4:	462b      	mov	r3, r5
 80010b6:	e003      	b.n	80010c0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010b8:	6899      	ldr	r1, [r3, #8]
 80010ba:	68a2      	ldr	r2, [r4, #8]
 80010bc:	4291      	cmp	r1, r2
 80010be:	d302      	bcc.n	80010c6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80010c0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010c2:	429d      	cmp	r5, r3
 80010c4:	d1f8      	bne.n	80010b8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010c6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010c8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80010ca:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 80010cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80010ce:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80010d0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80010d2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80010d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80010d8:	f7ff bfc2 	b.w	8001060 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010dc:	e892 000a 	ldmia.w	r2, {r1, r3}
 80010e0:	6019      	str	r1, [r3, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80010e2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	6053      	str	r3, [r2, #4]
 80010e8:	f7ff f972 	bl	80003d0 <chSchReadyI>
 80010ec:	e7e2      	b.n	80010b4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010ee:	6817      	ldr	r7, [r2, #0]
 80010f0:	6850      	ldr	r0, [r2, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010f2:	6a16      	ldr	r6, [r2, #32]
 80010f4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010f6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010f8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	e002      	b.n	8001104 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010fe:	6898      	ldr	r0, [r3, #8]
 8001100:	4288      	cmp	r0, r1
 8001102:	d302      	bcc.n	800110a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001104:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001106:	429e      	cmp	r6, r3
 8001108:	d1f9      	bne.n	80010fe <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800110a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800110c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 800110e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001110:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	e7ce      	b.n	80010b4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001116:	6817      	ldr	r7, [r2, #0]
 8001118:	6850      	ldr	r0, [r2, #4]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 800111a:	6a16      	ldr	r6, [r2, #32]
 800111c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800111e:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001120:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	e002      	b.n	800112c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001126:	6898      	ldr	r0, [r3, #8]
 8001128:	4288      	cmp	r0, r1
 800112a:	d302      	bcc.n	8001132 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800112c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800112e:	429e      	cmp	r6, r3
 8001130:	d1f9      	bne.n	8001126 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001132:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001134:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8001136:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tp;
 8001138:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800113a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800113c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800113e:	68a1      	ldr	r1, [r4, #8]
 8001140:	6893      	ldr	r3, [r2, #8]
 8001142:	428b      	cmp	r3, r1
 8001144:	d3af      	bcc.n	80010a6 <chMtxLockS+0x16>
 8001146:	e7b5      	b.n	80010b4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800114a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800114c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800114e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001152:	bf00      	nop
 8001154:	20000f20 	.word	0x20000f20
	...

08001160 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001160:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <chThdExitS+0x3c>)
 8001164:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001166:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001168:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800116c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800116e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 8001170:	d007      	beq.n	8001182 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001172:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001174:	4618      	mov	r0, r3
 8001176:	6262      	str	r2, [r4, #36]	; 0x24
 8001178:	f7ff f92a 	bl	80003d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800117c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800117e:	42ab      	cmp	r3, r5
 8001180:	d1f7      	bne.n	8001172 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001182:	7f63      	ldrb	r3, [r4, #29]
 8001184:	079b      	lsls	r3, r3, #30
 8001186:	d104      	bne.n	8001192 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001188:	6922      	ldr	r2, [r4, #16]
 800118a:	6963      	ldr	r3, [r4, #20]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001192:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001198:	f7ff bf62 	b.w	8001060 <chSchGoSleepS>
 800119c:	20000f20 	.word	0x20000f20

080011a0 <chThdExit>:
 80011a0:	2320      	movs	r3, #32
 80011a2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80011a6:	f7ff bfdb 	b.w	8001160 <chThdExitS>
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80011b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80011b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80011b8:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80011ba:	b086      	sub	sp, #24

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80011bc:	d051      	beq.n	8001262 <chSchGoSleepTimeoutS+0xb2>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80011be:	4c49      	ldr	r4, [pc, #292]	; (80012e4 <chSchGoSleepTimeoutS+0x134>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80011c0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011c4:	4625      	mov	r5, r4
 80011c6:	f855 2f1c 	ldr.w	r2, [r5, #28]!
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80011cc:	2901      	cmp	r1, #1
 80011ce:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80011d0:	f8df e114 	ldr.w	lr, [pc, #276]	; 80012e8 <chSchGoSleepTimeoutS+0x138>
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80011d4:	69a0      	ldr	r0, [r4, #24]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80011d6:	bf98      	it	ls
 80011d8:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011da:	42aa      	cmp	r2, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80011dc:	9005      	str	r0, [sp, #20]
 80011de:	b29b      	uxth	r3, r3
  vtp->vt_func = vtfunc;
 80011e0:	f8cd e010 	str.w	lr, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80011e4:	d064      	beq.n	80012b0 <chSchGoSleepTimeoutS+0x100>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80011e6:	4419      	add	r1, r3
 80011e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011ea:	b289      	uxth	r1, r1
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80011ec:	8910      	ldrh	r0, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80011f2:	4283      	cmp	r3, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80011f4:	bf38      	it	cc
 80011f6:	6379      	strcc	r1, [r7, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80011f8:	4283      	cmp	r3, r0
 80011fa:	d905      	bls.n	8001208 <chSchGoSleepTimeoutS+0x58>
    delta -= p->vt_delta;
    p = p->vt_next;
 80011fc:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80011fe:	1a1b      	subs	r3, r3, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001200:	8910      	ldrh	r0, [r2, #8]
    delta -= p->vt_delta;
 8001202:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001204:	4298      	cmp	r0, r3
 8001206:	d3f9      	bcc.n	80011fc <chSchGoSleepTimeoutS+0x4c>
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001208:	f64f 70ff 	movw	r0, #65535	; 0xffff
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800120c:	6851      	ldr	r1, [r2, #4]
  vtp->vt_prev->vt_next = vtp;
 800120e:	f10d 0804 	add.w	r8, sp, #4
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001212:	9102      	str	r1, [sp, #8]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001214:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001216:	f8c1 8000 	str.w	r8, [r1]
  p->vt_prev = vtp;
 800121a:	f8c2 8004 	str.w	r8, [r2, #4]
  vtp->vt_delta = delta
 800121e:	f8ad 300c 	strh.w	r3, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001222:	8911      	ldrh	r1, [r2, #8]
 8001224:	1acb      	subs	r3, r1, r3
 8001226:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001228:	84a0      	strh	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff ff18 	bl	8001060 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001230:	9b04      	ldr	r3, [sp, #16]
 8001232:	b18b      	cbz	r3, 8001258 <chSchGoSleepTimeoutS+0xa8>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001234:	69e3      	ldr	r3, [r4, #28]
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <chSchGoSleepTimeoutS+0x134>)
 8001238:	4543      	cmp	r3, r8
 800123a:	d01a      	beq.n	8001272 <chSchGoSleepTimeoutS+0xc2>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800123c:	9a02      	ldr	r2, [sp, #8]
 800123e:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;
 8001240:	2100      	movs	r1, #0

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001242:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001244:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001246:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001248:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800124a:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800124c:	d004      	beq.n	8001258 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800124e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8001252:	891a      	ldrh	r2, [r3, #8]
 8001254:	440a      	add	r2, r1
 8001256:	811a      	strh	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001258:	69a3      	ldr	r3, [r4, #24]
}
 800125a:	6a18      	ldr	r0, [r3, #32]
 800125c:	b006      	add	sp, #24
 800125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001262:	f7ff fefd 	bl	8001060 <chSchGoSleepS>
 8001266:	4c1f      	ldr	r4, [pc, #124]	; (80012e4 <chSchGoSleepTimeoutS+0x134>)
  }

  return currp->p_u.rdymsg;
 8001268:	69a3      	ldr	r3, [r4, #24]
}
 800126a:	6a18      	ldr	r0, [r3, #32]
 800126c:	b006      	add	sp, #24
 800126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001272:	9e01      	ldr	r6, [sp, #4]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8001274:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001276:	42ae      	cmp	r6, r5

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001278:	61d6      	str	r6, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800127a:	6075      	str	r5, [r6, #4]
  vtp->vt_func = NULL;
 800127c:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800127e:	d02c      	beq.n	80012da <chSchGoSleepTimeoutS+0x12a>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001280:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001284:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001286:	8cd5      	ldrh	r5, [r2, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001288:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 800128c:	8933      	ldrh	r3, [r6, #8]
 800128e:	b28a      	uxth	r2, r1
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001290:	1b51      	subs	r1, r2, r5

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001292:	443b      	add	r3, r7
 8001294:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001296:	b289      	uxth	r1, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001298:	428b      	cmp	r3, r1

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800129a:	8133      	strh	r3, [r6, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 800129c:	d9dc      	bls.n	8001258 <chSchGoSleepTimeoutS+0xa8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800129e:	1a5b      	subs	r3, r3, r1
 80012a0:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	bf98      	it	ls
 80012a6:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 80012a8:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	6343      	str	r3, [r0, #52]	; 0x34
 80012ae:	e7d3      	b.n	8001258 <chSchGoSleepTimeoutS+0xa8>
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 80012b0:	18ca      	adds	r2, r1, r3
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80012b2:	f10d 0804 	add.w	r8, sp, #4
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012b6:	b292      	uxth	r2, r2
  STM32_ST_TIM->SR     = 0;
 80012b8:	f04f 0e00 	mov.w	lr, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80012bc:	2002      	movs	r0, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80012be:	84e3      	strh	r3, [r4, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80012c0:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80012c2:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 80012c4:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80012c8:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 80012cc:	f8c4 8020 	str.w	r8, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80012d0:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80012d2:	f8c7 e010 	str.w	lr, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	e7a7      	b.n	800122a <chSchGoSleepTimeoutS+0x7a>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80012da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012de:	60d3      	str	r3, [r2, #12]
 80012e0:	e7ba      	b.n	8001258 <chSchGoSleepTimeoutS+0xa8>
 80012e2:	bf00      	nop
 80012e4:	20000f20 	.word	0x20000f20
 80012e8:	08000361 	.word	0x08000361
 80012ec:	00000000 	.word	0x00000000

080012f0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80012f0:	b169      	cbz	r1, 800130e <chThdEnqueueTimeoutS+0x1e>
 80012f2:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80012f6:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80012f8:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80012fa:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80012fc:	2004      	movs	r0, #4
 80012fe:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001302:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001304:	6053      	str	r3, [r2, #4]
}
 8001306:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800130a:	f7ff bf51 	b.w	80011b0 <chSchGoSleepTimeoutS>
}
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	4770      	bx	lr
 8001314:	20000f20 	.word	0x20000f20
	...

08001320 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	b083      	sub	sp, #12
 8001326:	4604      	mov	r4, r0
 8001328:	468b      	mov	fp, r1
 800132a:	4615      	mov	r5, r2
 800132c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800132e:	69c7      	ldr	r7, [r0, #28]
 8001330:	f04f 0820 	mov.w	r8, #32
 8001334:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001338:	2600      	movs	r6, #0
 800133a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800133c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800133e:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001342:	b1fb      	cbz	r3, 8001384 <chOQWriteTimeout+0x64>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001344:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001346:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001348:	1c50      	adds	r0, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800134a:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800134c:	6160      	str	r0, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800134e:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001350:	f89b 3000 	ldrb.w	r3, [fp]
 8001354:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001356:	6923      	ldr	r3, [r4, #16]
 8001358:	6962      	ldr	r2, [r4, #20]
 800135a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800135c:	bf24      	itt	cs
 800135e:	68e3      	ldrcs	r3, [r4, #12]
 8001360:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001362:	b10f      	cbz	r7, 8001368 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001364:	4620      	mov	r0, r4
 8001366:	47b8      	blx	r7
 8001368:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800136c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800136e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001372:	d011      	beq.n	8001398 <chOQWriteTimeout+0x78>
 8001374:	f388 8811 	msr	BASEPRI, r8
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001378:	46d3      	mov	fp, sl
 800137a:	68a3      	ldr	r3, [r4, #8]
 800137c:	f10b 0a01 	add.w	sl, fp, #1

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1df      	bne.n	8001344 <chOQWriteTimeout+0x24>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001384:	4620      	mov	r0, r4
 8001386:	9901      	ldr	r1, [sp, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	f7ff ffb1 	bl	80012f0 <chThdEnqueueTimeoutS>
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	2800      	cmp	r0, #0
 8001392:	d0d3      	beq.n	800133c <chOQWriteTimeout+0x1c>
 8001394:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 8001398:	4630      	mov	r0, r6
 800139a:	b003      	add	sp, #12
 800139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080013a0 <writet.lto_priv.68>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
 80013a0:	3030      	adds	r0, #48	; 0x30
 80013a2:	f7ff bfbd 	b.w	8001320 <chOQWriteTimeout>
 80013a6:	bf00      	nop
	...

080013b0 <write.lto_priv.62>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 80013b0:	3030      	adds	r0, #48	; 0x30
 80013b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b6:	f7ff bfb3 	b.w	8001320 <chOQWriteTimeout>
 80013ba:	bf00      	nop
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	4604      	mov	r4, r0
 80013c4:	460f      	mov	r7, r1
 80013c6:	4616      	mov	r6, r2
 80013c8:	2320      	movs	r3, #32
 80013ca:	f383 8811 	msr	BASEPRI, r3
 80013ce:	e005      	b.n	80013dc <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80013d0:	4620      	mov	r0, r4
 80013d2:	4631      	mov	r1, r6
 80013d4:	f7ff ff8c 	bl	80012f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80013d8:	2800      	cmp	r0, #0
 80013da:	db17      	blt.n	800140c <chOQPutTimeout+0x4c>
 80013dc:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80013de:	2d00      	cmp	r5, #0
 80013e0:	d0f6      	beq.n	80013d0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80013e2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80013e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013e6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80013e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80013ea:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80013ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80013f0:	6923      	ldr	r3, [r4, #16]
 80013f2:	6962      	ldr	r2, [r4, #20]
 80013f4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80013f6:	bf24      	itt	cs
 80013f8:	68e3      	ldrcs	r3, [r4, #12]
 80013fa:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80013fc:	69e3      	ldr	r3, [r4, #28]
 80013fe:	b10b      	cbz	r3, 8001404 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001400:	4620      	mov	r0, r4
 8001402:	4798      	blx	r3
 8001404:	2000      	movs	r0, #0
 8001406:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140c:	f385 8811 	msr	BASEPRI, r5
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001412:	bf00      	nop
	...

08001420 <putt.lto_priv.66>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8001420:	3030      	adds	r0, #48	; 0x30
 8001422:	f7ff bfcd 	b.w	80013c0 <chOQPutTimeout>
 8001426:	bf00      	nop
	...

08001430 <put.lto_priv.64>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001430:	3030      	adds	r0, #48	; 0x30
 8001432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001436:	f7ff bfc3 	b.w	80013c0 <chOQPutTimeout>
 800143a:	bf00      	nop
 800143c:	0000      	movs	r0, r0
	...

08001440 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	4604      	mov	r4, r0
 8001446:	b083      	sub	sp, #12
 8001448:	4689      	mov	r9, r1
 800144a:	4693      	mov	fp, r2
 800144c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800144e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001452:	2720      	movs	r7, #32
 8001454:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001458:	2600      	movs	r6, #0
 800145a:	46b2      	mov	sl, r6
 800145c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800145e:	f1b8 0f00 	cmp.w	r8, #0
 8001462:	d007      	beq.n	8001474 <chIQReadTimeout+0x34>
      nfy(iqp);
 8001464:	4620      	mov	r0, r4
 8001466:	47c0      	blx	r8
 8001468:	e004      	b.n	8001474 <chIQReadTimeout+0x34>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7ff ff3f 	bl	80012f0 <chThdEnqueueTimeoutS>
 8001472:	b9d0      	cbnz	r0, 80014aa <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001474:	68a7      	ldr	r7, [r4, #8]
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001476:	2f00      	cmp	r7, #0
 8001478:	d0f7      	beq.n	800146a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800147a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800147c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800147e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001480:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001482:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001484:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001486:	7813      	ldrb	r3, [r2, #0]
 8001488:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	69a2      	ldr	r2, [r4, #24]
 8001490:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001492:	bf24      	itt	cs
 8001494:	68e3      	ldrcs	r3, [r4, #12]
 8001496:	61a3      	strcs	r3, [r4, #24]
 8001498:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800149c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800149e:	45b3      	cmp	fp, r6
 80014a0:	d005      	beq.n	80014ae <chIQReadTimeout+0x6e>
 80014a2:	9b01      	ldr	r3, [sp, #4]
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	e7d9      	b.n	800145e <chIQReadTimeout+0x1e>
 80014aa:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 80014ae:	4630      	mov	r0, r6
 80014b0:	b003      	add	sp, #12
 80014b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b6:	bf00      	nop
	...

080014c0 <readt.lto_priv.69>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, timeout);
 80014c0:	300c      	adds	r0, #12
 80014c2:	f7ff bfbd 	b.w	8001440 <chIQReadTimeout>
 80014c6:	bf00      	nop
	...

080014d0 <read.lto_priv.63>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 80014d0:	300c      	adds	r0, #12
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	f7ff bfb3 	b.w	8001440 <chIQReadTimeout>
 80014da:	bf00      	nop
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	2320      	movs	r3, #32
 80014e4:	460e      	mov	r6, r1
 80014e6:	4604      	mov	r4, r0
 80014e8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80014ec:	69c3      	ldr	r3, [r0, #28]
 80014ee:	b13b      	cbz	r3, 8001500 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80014f0:	4798      	blx	r3
 80014f2:	e005      	b.n	8001500 <chIQGetTimeout+0x20>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80014f4:	4620      	mov	r0, r4
 80014f6:	4631      	mov	r1, r6
 80014f8:	f7ff fefa 	bl	80012f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80014fc:	2800      	cmp	r0, #0
 80014fe:	db13      	blt.n	8001528 <chIQGetTimeout+0x48>
 8001500:	68a5      	ldr	r5, [r4, #8]
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 8001502:	2d00      	cmp	r5, #0
 8001504:	d0f6      	beq.n	80014f4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001506:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001508:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800150a:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800150c:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 800150e:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001510:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001512:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001514:	bf28      	it	cs
 8001516:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001518:	61a2      	str	r2, [r4, #24]
 800151a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800151c:	bf28      	it	cs
 800151e:	61a3      	strcs	r3, [r4, #24]
 8001520:	2300      	movs	r3, #0
 8001522:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001526:	bd70      	pop	{r4, r5, r6, pc}
 8001528:	f385 8811 	msr	BASEPRI, r5
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	bf00      	nop

08001530 <gett.lto_priv.67>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8001530:	300c      	adds	r0, #12
 8001532:	f7ff bfd5 	b.w	80014e0 <chIQGetTimeout>
 8001536:	bf00      	nop
	...

08001540 <get.lto_priv.65>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8001540:	300c      	adds	r0, #12
 8001542:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001546:	f7ff bfcb 	b.w	80014e0 <chIQGetTimeout>
 800154a:	bf00      	nop
 800154c:	0000      	movs	r0, r0
	...

08001550 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001550:	b508      	push	{r3, lr}
 8001552:	4601      	mov	r1, r0
 8001554:	2320      	movs	r3, #32
 8001556:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800155a:	2008      	movs	r0, #8
 800155c:	f7ff fe28 	bl	80011b0 <chSchGoSleepTimeoutS>
 8001560:	2300      	movs	r3, #0
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	bd08      	pop	{r3, pc}
	...

08001570 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001570:	e7fe      	b.n	8001570 <BusFault_Handler>
 8001572:	bf00      	nop
	...

08001580 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001580:	e7fe      	b.n	8001580 <__default_exit>
 8001582:	bf00      	nop
	...

08001590 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
	...

080015a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
	...

080015b0 <uart_lld_serve_tx_end_irq.lto_priv.54>:
 * @brief   TX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80015b2:	070b      	lsls	r3, r1, #28
 80015b4:	d415      	bmi.n	80015e2 <uart_lld_serve_tx_end_irq.lto_priv.54+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 80015b6:	6942      	ldr	r2, [r0, #20]

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
  if (uartp->config->txend1_cb != NULL)
 80015b8:	6847      	ldr	r7, [r0, #4]
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 80015ba:	e892 0060 	ldmia.w	r2, {r5, r6}
 80015be:	6829      	ldr	r1, [r5, #0]
 80015c0:	230f      	movs	r3, #15
 80015c2:	f021 010f 	bic.w	r1, r1, #15
 80015c6:	6029      	str	r1, [r5, #0]
 80015c8:	7a11      	ldrb	r1, [r2, #8]

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
  if (uartp->config->txend1_cb != NULL)
 80015ca:	683a      	ldr	r2, [r7, #0]
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 80015cc:	408b      	lsls	r3, r1

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
 80015ce:	2102      	movs	r1, #2
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 80015d0:	6033      	str	r3, [r6, #0]
 80015d2:	4604      	mov	r4, r0

  /* A callback is generated, if enabled, after a completed transfer.*/
  uartp->txstate = UART_TX_COMPLETE;
 80015d4:	7041      	strb	r1, [r0, #1]
  if (uartp->config->txend1_cb != NULL)
 80015d6:	b14a      	cbz	r2, 80015ec <uart_lld_serve_tx_end_irq.lto_priv.54+0x3c>
    uartp->config->txend1_cb(uartp);
 80015d8:	4790      	blx	r2

  /* If the callback didn't explicitly change state then the transmitter
     automatically returns to the idle state.*/
  if (uartp->txstate == UART_TX_COMPLETE)
 80015da:	7863      	ldrb	r3, [r4, #1]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d005      	beq.n	80015ec <uart_lld_serve_tx_end_irq.lto_priv.54+0x3c>
 80015e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e2:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <uart_lld_serve_tx_end_irq.lto_priv.54+0x44>)
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <uart_lld_serve_tx_end_irq.lto_priv.54+0x48>)
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	e7fe      	b.n	80015ea <uart_lld_serve_tx_end_irq.lto_priv.54+0x3a>
    uartp->txstate = UART_TX_IDLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	7063      	strb	r3, [r4, #1]
 80015f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000f20 	.word	0x20000f20
 80015f8:	08003d00 	.word	0x08003d00
 80015fc:	00000000 	.word	0x00000000

08001600 <uart_lld_serve_rx_end_irq.lto_priv.53>:
 */
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001600:	070b      	lsls	r3, r1, #28
 8001602:	d40d      	bmi.n	8001620 <uart_lld_serve_rx_end_irq.lto_priv.53+0x20>
  }
#else
  (void)flags;
#endif

  if (uartp->rxstate == UART_RX_IDLE) {
 8001604:	7883      	ldrb	r3, [r0, #2]
 * @brief   RX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	4604      	mov	r4, r0
  }
#else
  (void)flags;
#endif

  if (uartp->rxstate == UART_RX_IDLE) {
 800160c:	b96b      	cbnz	r3, 800162a <uart_lld_serve_rx_end_irq.lto_priv.53+0x2a>
    /* Receiver in idle state, a callback is generated, if enabled, for each
       received character and then the driver stays in the same state.*/
    if (uartp->config->rxchar_cb != NULL)
 800160e:	6843      	ldr	r3, [r0, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d032      	beq.n	800167c <uart_lld_serve_rx_end_irq.lto_priv.53+0x7c>
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
      set_rx_idle_loop(uartp);
    }
  }
}
 8001616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  if (uartp->rxstate == UART_RX_IDLE) {
    /* Receiver in idle state, a callback is generated, if enabled, for each
       received character and then the driver stays in the same state.*/
    if (uartp->config->rxchar_cb != NULL)
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
 800161a:	8b01      	ldrh	r1, [r0, #24]
 800161c:	b289      	uxth	r1, r1
 800161e:	4718      	bx	r3
 8001620:	b672      	cpsid	i
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <uart_lld_serve_rx_end_irq.lto_priv.53+0x80>)
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <uart_lld_serve_rx_end_irq.lto_priv.53+0x84>)
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
 8001628:	e7fe      	b.n	8001628 <uart_lld_serve_rx_end_irq.lto_priv.53+0x28>
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 800162a:	6905      	ldr	r5, [r0, #16]
    uartp->rxstate = UART_RX_COMPLETE;
    if (uartp->config->rxend_cb != NULL)
 800162c:	6842      	ldr	r2, [r0, #4]
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 800162e:	e895 0088 	ldmia.w	r5, {r3, r7}
 8001632:	681e      	ldr	r6, [r3, #0]
 8001634:	210f      	movs	r1, #15
 8001636:	f026 060f 	bic.w	r6, r6, #15
 800163a:	601e      	str	r6, [r3, #0]
 800163c:	7a2e      	ldrb	r6, [r5, #8]
    uartp->rxstate = UART_RX_COMPLETE;
    if (uartp->config->rxend_cb != NULL)
 800163e:	6895      	ldr	r5, [r2, #8]
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001640:	40b1      	lsls	r1, r6
    uartp->rxstate = UART_RX_COMPLETE;
 8001642:	2602      	movs	r6, #2
      uartp->config->rxchar_cb(uartp, uartp->rxbuf);
  }
  else {
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
 8001644:	6039      	str	r1, [r7, #0]
    uartp->rxstate = UART_RX_COMPLETE;
 8001646:	7086      	strb	r6, [r0, #2]
    if (uartp->config->rxend_cb != NULL)
 8001648:	b135      	cbz	r5, 8001658 <uart_lld_serve_rx_end_irq.lto_priv.53+0x58>
      uartp->config->rxend_cb(uartp);
 800164a:	47a8      	blx	r5

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
 800164c:	78a3      	ldrb	r3, [r4, #2]
 800164e:	42b3      	cmp	r3, r6
 8001650:	d114      	bne.n	800167c <uart_lld_serve_rx_end_irq.lto_priv.53+0x7c>
 8001652:	6923      	ldr	r3, [r4, #16]
 8001654:	6862      	ldr	r2, [r4, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 8001658:	68d1      	ldr	r1, [r2, #12]
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800165a:	68e2      	ldr	r2, [r4, #12]
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 800165c:	2900      	cmp	r1, #0
 800165e:	bf0c      	ite	eq
 8001660:	2120      	moveq	r1, #32
 8001662:	2122      	movne	r1, #34	; 0x22
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001664:	430a      	orrs	r2, r1
      uartp->config->rxend_cb(uartp);

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
 8001666:	2500      	movs	r5, #0
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001668:	2101      	movs	r1, #1
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800166a:	f104 0018 	add.w	r0, r4, #24
      uartp->config->rxend_cb(uartp);

    /* If the callback didn't explicitly change state then the receiver
       automatically returns to the idle state.*/
    if (uartp->rxstate == UART_RX_COMPLETE) {
      uartp->rxstate = UART_RX_IDLE;
 800166e:	70a5      	strb	r5, [r4, #2]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001670:	60d8      	str	r0, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001672:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001674:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001680:	20000f20 	.word	0x20000f20
 8001684:	08003d00 	.word	0x08003d00
	...

08001690 <i2c_lld_serve_tx_end_irq.lto_priv.49>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001690:	070b      	lsls	r3, r1, #28
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001692:	b430      	push	{r4, r5}
  I2C_TypeDef *dp = i2cp->i2c;
 8001694:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001696:	d411      	bmi.n	80016bc <i2c_lld_serve_tx_end_irq.lto_priv.49+0x2c>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8001698:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800169a:	230f      	movs	r3, #15
 800169c:	e892 0021 	ldmia.w	r2, {r0, r5}
 80016a0:	6801      	ldr	r1, [r0, #0]
 80016a2:	f021 010f 	bic.w	r1, r1, #15
 80016a6:	6001      	str	r1, [r0, #0]
 80016a8:	7a12      	ldrb	r2, [r2, #8]
 80016aa:	4093      	lsls	r3, r2
 80016ac:	602b      	str	r3, [r5, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80016ae:	88a3      	ldrh	r3, [r4, #4]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	80a3      	strh	r3, [r4, #4]
}
 80016b8:	bc30      	pop	{r4, r5}
 80016ba:	4770      	bx	lr
 80016bc:	b672      	cpsid	i
 80016be:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <i2c_lld_serve_tx_end_irq.lto_priv.49+0x38>)
 80016c0:	4a02      	ldr	r2, [pc, #8]	; (80016cc <i2c_lld_serve_tx_end_irq.lto_priv.49+0x3c>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
 80016c4:	e7fe      	b.n	80016c4 <i2c_lld_serve_tx_end_irq.lto_priv.49+0x34>
 80016c6:	bf00      	nop
 80016c8:	20000f20 	.word	0x20000f20
 80016cc:	08003d00 	.word	0x08003d00

080016d0 <Vector8C>:
 */
OSAL_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  OSAL_IRQ_EPILOGUE();
 80016d0:	f7ff ba96 	b.w	8000c00 <_port_irq_epilogue>
	...

080016e0 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80016e2:	f240 130f 	movw	r3, #271	; 0x10f
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 80016e6:	4f1d      	ldr	r7, [pc, #116]	; (800175c <VectorD8+0x7c>)
 80016e8:	68be      	ldr	r6, [r7, #8]
  uint32_t cr1 = u->CR1;
 80016ea:	89b2      	ldrh	r2, [r6, #12]

  sr = u->SR;   /* SR reset step 1.*/
 80016ec:	8834      	ldrh	r4, [r6, #0]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void serve_usart_irq(UARTDriver *uartp) {
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;
 80016ee:	b295      	uxth	r5, r2

  sr = u->SR;   /* SR reset step 1.*/
 80016f0:	b2a4      	uxth	r4, r4
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80016f2:	4023      	ands	r3, r4
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
  uint32_t cr1 = u->CR1;

  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/
 80016f4:	88b2      	ldrh	r2, [r6, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80016f6:	b1e3      	cbz	r3, 8001732 <VectorD8+0x52>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 80016f8:	f64f 62ff 	movw	r2, #65279	; 0xfeff
    if (uartp->config->rxerr_cb != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
  sr = u->SR;   /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 80016fe:	8032      	strh	r2, [r6, #0]
    if (uartp->config->rxerr_cb != NULL)
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	b1b3      	cbz	r3, 8001732 <VectorD8+0x52>
 */
static uartflags_t translate_errors(uint16_t sr) {
  uartflags_t sts = 0;

  if (sr & USART_SR_ORE)
    sts |= UART_OVERRUN_ERROR;
 8001704:	f014 0f08 	tst.w	r4, #8
 8001708:	bf0c      	ite	eq
 800170a:	2100      	moveq	r1, #0
 800170c:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 800170e:	07e2      	lsls	r2, r4, #31
    sts |= UART_PARITY_ERROR;
 8001710:	bf48      	it	mi
 8001712:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8001716:	07a0      	lsls	r0, r4, #30
    sts |= UART_FRAMING_ERROR;
 8001718:	bf48      	it	mi
 800171a:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 800171e:	0762      	lsls	r2, r4, #29
    sts |= UART_NOISE_ERROR;
 8001720:	bf48      	it	mi
 8001722:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8001726:	05e0      	lsls	r0, r4, #23
    sts |= UART_BREAK_DETECTED;
 8001728:	bf48      	it	mi
 800172a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
    if (uartp->config->rxerr_cb != NULL)
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <VectorD8+0x7c>)
 8001730:	4798      	blx	r3
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8001732:	0662      	lsls	r2, r4, #25
 8001734:	d50d      	bpl.n	8001752 <VectorD8+0x72>
 8001736:	066b      	lsls	r3, r5, #25
 8001738:	d50b      	bpl.n	8001752 <VectorD8+0x72>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 800173a:	f64f 71bf 	movw	r1, #65471	; 0xffbf
    u->CR1 = cr1 & ~USART_CR1_TCIE;

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800173e:	687a      	ldr	r2, [r7, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001740:	f025 0340 	bic.w	r3, r5, #64	; 0x40

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 8001744:	6852      	ldr	r2, [r2, #4]
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001746:	b29b      	uxth	r3, r3
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 8001748:	8031      	strh	r1, [r6, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800174a:	81b3      	strh	r3, [r6, #12]

    /* End of transmission, a callback is generated.*/
    if (uartp->config->txend2_cb != NULL)
 800174c:	b10a      	cbz	r2, 8001752 <VectorD8+0x72>
      uartp->config->txend2_cb(uartp);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <VectorD8+0x7c>)
 8001750:	4790      	blx	r2
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
}
 8001752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
 8001756:	f7ff ba53 	b.w	8000c00 <_port_irq_epilogue>
 800175a:	bf00      	nop
 800175c:	20000864 	.word	0x20000864

08001760 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001764:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001768:	6923      	ldr	r3, [r4, #16]
 800176a:	079b      	lsls	r3, r3, #30
 800176c:	d403      	bmi.n	8001776 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800176e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001772:	f7ff ba45 	b.w	8000c00 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8001776:	2700      	movs	r7, #0
 8001778:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800177a:	2520      	movs	r5, #32
 800177c:	f385 8811 	msr	BASEPRI, r5
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001780:	4e1e      	ldr	r6, [pc, #120]	; (80017fc <VectorB0+0x9c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001782:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8001784:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8001788:	69f3      	ldr	r3, [r6, #28]
 800178a:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800178c:	ebce 0100 	rsb	r1, lr, r0
 8001790:	891a      	ldrh	r2, [r3, #8]
 8001792:	b289      	uxth	r1, r1
 8001794:	4291      	cmp	r1, r2
 8001796:	f106 081c 	add.w	r8, r6, #28
 800179a:	d31b      	bcc.n	80017d4 <VectorB0+0x74>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800179c:	6819      	ldr	r1, [r3, #0]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 800179e:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80017a0:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80017a2:	84f2      	strh	r2, [r6, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80017a4:	68da      	ldr	r2, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80017a6:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80017aa:	61f1      	str	r1, [r6, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80017ac:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80017ae:	bf08      	it	eq
 80017b0:	60e7      	streq	r7, [r4, #12]
 80017b2:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80017b6:	6918      	ldr	r0, [r3, #16]
 80017b8:	4790      	blx	r2
 80017ba:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80017be:	6a62      	ldr	r2, [r4, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80017c0:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80017c4:	69f3      	ldr	r3, [r6, #28]
 80017c6:	b290      	uxth	r0, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80017c8:	ebce 0100 	rsb	r1, lr, r0
 80017cc:	891a      	ldrh	r2, [r3, #8]
 80017ce:	b289      	uxth	r1, r1
 80017d0:	428a      	cmp	r2, r1
 80017d2:	d9e3      	bls.n	800179c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80017d4:	4543      	cmp	r3, r8
 80017d6:	d00a      	beq.n	80017ee <VectorB0+0x8e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80017d8:	4472      	add	r2, lr
 80017da:	1a12      	subs	r2, r2, r0
 80017dc:	b292      	uxth	r2, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80017de:	2a01      	cmp	r2, #1
 80017e0:	bf98      	it	ls
 80017e2:	2202      	movls	r2, #2
  }
  port_timer_set_alarm(now + delta);
 80017e4:	4402      	add	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
 80017ee:	2300      	movs	r3, #0
 80017f0:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80017f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80017f8:	f7ff ba02 	b.w	8000c00 <_port_irq_epilogue>
 80017fc:	20000f20 	.word	0x20000f20

08001800 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001802:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8001804:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001808:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 800180c:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8001810:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001814:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8001816:	d018      	beq.n	800184a <usb_packet_write_from_queue+0x4a>
 8001818:	4677      	mov	r7, lr
 800181a:	4664      	mov	r4, ip
 800181c:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800181e:	6988      	ldr	r0, [r1, #24]
 8001820:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8001822:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001824:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001826:	bf28      	it	cs
 8001828:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800182a:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800182c:	1c5d      	adds	r5, r3, #1
 800182e:	618d      	str	r5, [r1, #24]
 8001830:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8001832:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8001834:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001838:	bf24      	itt	cs
 800183a:	68c8      	ldrcs	r0, [r1, #12]
 800183c:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 800183e:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8001840:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8001844:	d1eb      	bne.n	800181e <usb_packet_write_from_queue+0x1e>
 8001846:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 800184a:	07d3      	lsls	r3, r2, #31
 800184c:	d50b      	bpl.n	8001866 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800184e:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8001850:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001852:	1c43      	adds	r3, r0, #1
 8001854:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8001856:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8001858:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800185a:	bf28      	it	cs
 800185c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800185e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8001862:	bf28      	it	cs
 8001864:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8001866:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 800186a:	b9cb      	cbnz	r3, 80018a0 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800186c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001870:	2320      	movs	r3, #32
 8001872:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8001876:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001878:	4608      	mov	r0, r1
 800187a:	441a      	add	r2, r3
 800187c:	608a      	str	r2, [r1, #8]
 800187e:	2100      	movs	r1, #0
 8001880:	f7ff fb76 	bl	8000f70 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001884:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8001888:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 800188c:	b11c      	cbz	r4, 8001896 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800188e:	2300      	movs	r3, #0
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    }
    else {
      chSchRescheduleS();
 8001896:	f7ff fb9b 	bl	8000fd0 <chSchRescheduleS>
 800189a:	f384 8811 	msr	BASEPRI, r4
 800189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a0:	688b      	ldr	r3, [r1, #8]
 80018a2:	4608      	mov	r0, r1
 80018a4:	441a      	add	r2, r3
 80018a6:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 80018a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80018ac:	2100      	movs	r1, #0
 80018ae:	f7ff bb5f 	b.w	8000f70 <chThdDequeueAllI>
 80018b2:	bf00      	nop
	...

080018c0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80018c0:	4936      	ldr	r1, [pc, #216]	; (800199c <VectorC0+0xdc>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80018c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80018c4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80018c6:	6b0d      	ldr	r5, [r1, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80018c8:	8a82      	ldrh	r2, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80018ca:	682f      	ldr	r7, [r5, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80018cc:	b292      	uxth	r2, r2

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80018ce:	f402 435f 	and.w	r3, r2, #57088	; 0xdf00
 80018d2:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 80018d6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80018da:	8283      	strh	r3, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80018dc:	683e      	ldr	r6, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 80018de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80018e0:	f026 060f 	bic.w	r6, r6, #15
 80018e4:	603e      	str	r6, [r7, #0]
 80018e6:	7a2e      	ldrb	r6, [r5, #8]
 80018e8:	240f      	movs	r4, #15
 80018ea:	686d      	ldr	r5, [r5, #4]
 80018ec:	fa04 f706 	lsl.w	r7, r4, r6
  dmaStreamDisable(i2cp->dmarx);
 80018f0:	681e      	ldr	r6, [r3, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 80018f2:	602f      	str	r7, [r5, #0]
  dmaStreamDisable(i2cp->dmarx);
 80018f4:	6835      	ldr	r5, [r6, #0]
 80018f6:	685f      	ldr	r7, [r3, #4]
 80018f8:	f025 050f 	bic.w	r5, r5, #15
 80018fc:	6035      	str	r5, [r6, #0]
 80018fe:	7a1d      	ldrb	r5, [r3, #8]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001900:	f402 7380 	and.w	r3, r2, #256	; 0x100
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8001904:	40ac      	lsls	r4, r5

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001906:	b29b      	uxth	r3, r3
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8001908:	603c      	str	r4, [r7, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800190a:	2b00      	cmp	r3, #0
 800190c:	d13d      	bne.n	800198a <VectorC0+0xca>

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;
 800190e:	608b      	str	r3, [r1, #8]

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001910:	0594      	lsls	r4, r2, #22
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001912:	bf44      	itt	mi
 8001914:	f043 0302 	orrmi.w	r3, r3, #2
 8001918:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800191a:	0557      	lsls	r7, r2, #21
 800191c:	d50d      	bpl.n	800193a <VectorC0+0x7a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800191e:	8884      	ldrh	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 8001920:	f043 0304 	orr.w	r3, r3, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001924:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8001928:	0424      	lsls	r4, r4, #16
 800192a:	0c24      	lsrs	r4, r4, #16
 800192c:	8084      	strh	r4, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800192e:	8804      	ldrh	r4, [r0, #0]
 8001930:	b2a4      	uxth	r4, r4
 8001932:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001936:	8004      	strh	r4, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001938:	608b      	str	r3, [r1, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800193a:	0516      	lsls	r6, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 800193c:	bf44      	itt	mi
 800193e:	f043 0308 	orrmi.w	r3, r3, #8
 8001942:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8001944:	0455      	lsls	r5, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 8001946:	bf44      	itt	mi
 8001948:	f043 0320 	orrmi.w	r3, r3, #32
 800194c:	608b      	strmi	r3, [r1, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800194e:	04d4      	lsls	r4, r2, #19
 8001950:	d513      	bpl.n	800197a <VectorC0+0xba>
    i2cp->errors |= I2C_PEC_ERROR;
 8001952:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001956:	0410      	lsls	r0, r2, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8001958:	608b      	str	r3, [r1, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800195a:	d41a      	bmi.n	8001992 <VectorC0+0xd2>
 800195c:	2320      	movs	r3, #32
 800195e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <VectorC0+0xe0>)
 8001964:	f06f 0101 	mvn.w	r1, #1
 8001968:	f7ff fb1a 	bl	8000fa0 <chThdResumeI>
 800196c:	2300      	movs	r3, #0
 800196e:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8001972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8001976:	f7ff b943 	b.w	8000c00 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800197a:	0412      	lsls	r2, r2, #16
 800197c:	d409      	bmi.n	8001992 <VectorC0+0xd2>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ec      	bne.n	800195c <VectorC0+0x9c>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8001982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8001986:	f7ff b93b 	b.w	8000c00 <_port_irq_epilogue>
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 800198a:	2401      	movs	r4, #1
 800198c:	4623      	mov	r3, r4
 800198e:	608c      	str	r4, [r1, #8]
 8001990:	e7be      	b.n	8001910 <VectorC0+0x50>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 8001992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001996:	608b      	str	r3, [r1, #8]
 8001998:	e7e0      	b.n	800195c <VectorC0+0x9c>
 800199a:	bf00      	nop
 800199c:	20000cd8 	.word	0x20000cd8
 80019a0:	20000cf4 	.word	0x20000cf4
	...

080019b0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80019b0:	4840      	ldr	r0, [pc, #256]	; (8001ab4 <VectorBC+0x104>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80019b2:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80019b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80019b6:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <VectorBC+0x108>)
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 80019b8:	8b23      	ldrh	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80019ba:	8aa5      	ldrh	r5, [r4, #20]
 80019bc:	b2ad      	uxth	r5, r5

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80019be:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80019c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d052      	beq.n	8001a70 <VectorBC+0xc0>
 80019ca:	d821      	bhi.n	8001a10 <VectorBC+0x60>
 80019cc:	3a07      	subs	r2, #7
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d042      	beq.n	8001a58 <VectorBC+0xa8>
 80019d2:	3201      	adds	r2, #1
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d113      	bne.n	8001a00 <VectorBC+0x50>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80019d8:	88a3      	ldrh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80019da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80019dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019e0:	041b      	lsls	r3, r3, #16
    dmaStreamEnable(i2cp->dmarx);
 80019e2:	6812      	ldr	r2, [r2, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	80a3      	strh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80019e8:	6813      	ldr	r3, [r2, #0]
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6013      	str	r3, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80019f0:	88a3      	ldrh	r3, [r4, #4]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f8:	80a3      	strh	r3, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80019fa:	6853      	ldr	r3, [r2, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d951      	bls.n	8001aa4 <VectorBC+0xf4>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8001a00:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8001a04:	bf18      	it	ne
 8001a06:	8b23      	ldrhne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8001a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001a0c:	f7ff b8f8 	b.w	8000c00 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001a10:	4a2a      	ldr	r2, [pc, #168]	; (8001abc <VectorBC+0x10c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <VectorBC+0x8e>
 8001a16:	3202      	adds	r2, #2
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d1f1      	bne.n	8001a00 <VectorBC+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001a1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685e      	ldr	r6, [r3, #4]
 8001a22:	b356      	cbz	r6, 8001a7a <VectorBC+0xca>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001a24:	8823      	ldrh	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001a26:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001a34:	8023      	strh	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8001a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001a3a:	f7ff b8e1 	b.w	8000c00 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001a3e:	88a3      	ldrh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001a40:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001a42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a46:	041b      	lsls	r3, r3, #16
    dmaStreamEnable(i2cp->dmatx);
 8001a48:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	80a3      	strh	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e7d3      	b.n	8001a00 <VectorBC+0x50>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 8001a58:	8c03      	ldrh	r3, [r0, #32]
 8001a5a:	0a1a      	lsrs	r2, r3, #8
 8001a5c:	d00b      	beq.n	8001a76 <VectorBC+0xc6>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001a66:	f002 0206 	and.w	r2, r2, #6
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	8223      	strh	r3, [r4, #16]
 8001a6e:	e7c7      	b.n	8001a00 <VectorBC+0x50>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8001a70:	8c03      	ldrh	r3, [r0, #32]
 8001a72:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8001a76:	8223      	strh	r3, [r4, #16]
 8001a78:	e7c2      	b.n	8001a00 <VectorBC+0x50>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001a7a:	88a3      	ldrh	r3, [r4, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	80a3      	strh	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8001a88:	8823      	ldrh	r3, [r4, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a90:	8023      	strh	r3, [r4, #0]
 8001a92:	f382 8811 	msr	BASEPRI, r2
 8001a96:	301c      	adds	r0, #28
 8001a98:	4631      	mov	r1, r6
 8001a9a:	f7ff fa81 	bl	8000fa0 <chThdResumeI>
 8001a9e:	f386 8811 	msr	BASEPRI, r6
 8001aa2:	e7ad      	b.n	8001a00 <VectorBC+0x50>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8001aa4:	8823      	ldrh	r3, [r4, #0]
 8001aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	8023      	strh	r3, [r4, #0]
 8001ab0:	e7a6      	b.n	8001a00 <VectorBC+0x50>
 8001ab2:	bf00      	nop
 8001ab4:	20000cd8 	.word	0x20000cd8
 8001ab8:	00030008 	.word	0x00030008
 8001abc:	00070082 	.word	0x00070082

08001ac0 <i2c_lld_serve_rx_end_irq.lto_priv.48>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ac2:	f011 0408 	ands.w	r4, r1, #8
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001ac6:	6b42      	ldr	r2, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ac8:	d126      	bne.n	8001b18 <i2c_lld_serve_rx_end_irq.lto_priv.48+0x58>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8001aca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001acc:	230f      	movs	r3, #15
 8001ace:	e891 4080 	ldmia.w	r1, {r7, lr}
 8001ad2:	683e      	ldr	r6, [r7, #0]
 8001ad4:	2520      	movs	r5, #32
 8001ad6:	f026 060f 	bic.w	r6, r6, #15
 8001ada:	603e      	str	r6, [r7, #0]
 8001adc:	7a09      	ldrb	r1, [r1, #8]
 8001ade:	408b      	lsls	r3, r1
 8001ae0:	f8ce 3000 	str.w	r3, [lr]

  dp->CR2 &= ~I2C_CR2_LAST;
 8001ae4:	8893      	ldrh	r3, [r2, #4]
 8001ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	8093      	strh	r3, [r2, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8001af0:	8813      	ldrh	r3, [r2, #0]
 8001af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	8013      	strh	r3, [r2, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8001afc:	8813      	ldrh	r3, [r2, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b04:	8013      	strh	r3, [r2, #0]
 8001b06:	f385 8811 	msr	BASEPRI, r5
 8001b0a:	301c      	adds	r0, #28
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f7ff fa47 	bl	8000fa0 <chThdResumeI>
 8001b12:	f384 8811 	msr	BASEPRI, r4
 8001b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8001b1a:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <i2c_lld_serve_rx_end_irq.lto_priv.48+0x64>)
 8001b1c:	4a02      	ldr	r2, [pc, #8]	; (8001b28 <i2c_lld_serve_rx_end_irq.lto_priv.48+0x68>)
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b20:	e7fe      	b.n	8001b20 <i2c_lld_serve_rx_end_irq.lto_priv.48+0x60>
 8001b22:	bf00      	nop
 8001b24:	20000f20 	.word	0x20000f20
 8001b28:	08003d00 	.word	0x08003d00
 8001b2c:	00000000 	.word	0x00000000

08001b30 <adc_lld_serve_rx_interrupt.lto_priv.50>:
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8001b34:	070d      	lsls	r5, r1, #28
 * @brief   Shared ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
 8001b36:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
 8001b38:	d527      	bpl.n	8001b8a <adc_lld_serve_rx_interrupt.lto_priv.50+0x5a>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b3a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b3c:	6907      	ldr	r7, [r0, #16]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b3e:	e892 0060 	ldmia.w	r2, {r5, r6}
 8001b42:	6829      	ldr	r1, [r5, #0]
 8001b44:	230f      	movs	r3, #15
 8001b46:	f021 010f 	bic.w	r1, r1, #15
 8001b4a:	6029      	str	r1, [r5, #0]
 8001b4c:	7a11      	ldrb	r1, [r2, #8]
  adcp->adc->CR2 = 0;
 8001b4e:	6a85      	ldr	r5, [r0, #40]	; 0x28

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b50:	68ba      	ldr	r2, [r7, #8]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b52:	408b      	lsls	r3, r1
  adcp->adc->CR2 = 0;
 8001b54:	2100      	movs	r1, #0
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001b56:	6033      	str	r3, [r6, #0]
  adcp->adc->CR2 = 0;
 8001b58:	60a9      	str	r1, [r5, #8]

  /* DMA errors handling.*/
  if ((flags & STM32_DMA_ISR_TEIF) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8001b5a:	b13a      	cbz	r2, 8001b6c <adc_lld_serve_rx_interrupt.lto_priv.50+0x3c>
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	7003      	strb	r3, [r0, #0]
 8001b60:	4790      	blx	r2
 8001b62:	7823      	ldrb	r3, [r4, #0]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	bf04      	itt	eq
 8001b68:	2302      	moveq	r3, #2
 8001b6a:	7023      	strbeq	r3, [r4, #0]
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	6125      	str	r5, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b70:	2320      	movs	r3, #32
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7a:	f104 0014 	add.w	r0, r4, #20
 8001b7e:	f7ff fa0f 	bl	8000fa0 <chThdResumeI>
 8001b82:	f385 8811 	msr	BASEPRI, r5
 8001b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8001b8a:	078a      	lsls	r2, r1, #30
 8001b8c:	d512      	bpl.n	8001bb4 <adc_lld_serve_rx_interrupt.lto_priv.50+0x84>
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8001b8e:	6903      	ldr	r3, [r0, #16]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	b1e2      	cbz	r2, 8001bce <adc_lld_serve_rx_interrupt.lto_priv.50+0x9e>
 8001b94:	685d      	ldr	r5, [r3, #4]
 8001b96:	b1c5      	cbz	r5, 8001bca <adc_lld_serve_rx_interrupt.lto_priv.50+0x9a>
 8001b98:	68c2      	ldr	r2, [r0, #12]
 8001b9a:	2a01      	cmp	r2, #1
 8001b9c:	d941      	bls.n	8001c22 <adc_lld_serve_rx_interrupt.lto_priv.50+0xf2>
 8001b9e:	885b      	ldrh	r3, [r3, #2]
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	fb03 f302 	mul.w	r3, r3, r2
 8001ba6:	6881      	ldr	r1, [r0, #8]
 8001ba8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8001bac:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8001bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8001bb2:	4718      	bx	r3
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 8001bb4:	074b      	lsls	r3, r1, #29
 8001bb6:	d508      	bpl.n	8001bca <adc_lld_serve_rx_interrupt.lto_priv.50+0x9a>
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 8001bb8:	6903      	ldr	r3, [r0, #16]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	b12b      	cbz	r3, 8001bca <adc_lld_serve_rx_interrupt.lto_priv.50+0x9a>
    }
  }
}
 8001bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
    }
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
 8001bc2:	68c2      	ldr	r2, [r0, #12]
 8001bc4:	6881      	ldr	r1, [r0, #8]
 8001bc6:	0852      	lsrs	r2, r2, #1
 8001bc8:	4718      	bx	r3
 8001bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001bce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8001bd0:	685f      	ldr	r7, [r3, #4]
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001bd2:	e891 4040 	ldmia.w	r1, {r6, lr}
 8001bd6:	6835      	ldr	r5, [r6, #0]
 8001bd8:	230f      	movs	r3, #15
 8001bda:	f025 050f 	bic.w	r5, r5, #15
 8001bde:	6035      	str	r5, [r6, #0]
 8001be0:	7a0d      	ldrb	r5, [r1, #8]
  adcp->adc->CR2 = 0;
 8001be2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8001be4:	40ab      	lsls	r3, r5
 8001be6:	f8ce 3000 	str.w	r3, [lr]
  adcp->adc->CR2 = 0;
 8001bea:	608a      	str	r2, [r1, #8]
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8001bec:	b1a7      	cbz	r7, 8001c18 <adc_lld_serve_rx_interrupt.lto_priv.50+0xe8>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	7003      	strb	r3, [r0, #0]
 8001bf2:	6881      	ldr	r1, [r0, #8]
 8001bf4:	68c2      	ldr	r2, [r0, #12]
 8001bf6:	47b8      	blx	r7
 8001bf8:	7823      	ldrb	r3, [r4, #0]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <adc_lld_serve_rx_interrupt.lto_priv.50+0xe8>
 8001bfe:	2320      	movs	r3, #32
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f104 0014 	add.w	r0, r4, #20
 8001c0a:	f7ff f9c9 	bl	8000fa0 <chThdResumeI>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c18:	2202      	movs	r2, #2
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	7022      	strb	r2, [r4, #0]
 8001c1e:	6123      	str	r3, [r4, #16]
 8001c20:	e7ed      	b.n	8001bfe <adc_lld_serve_rx_interrupt.lto_priv.50+0xce>
 8001c22:	462b      	mov	r3, r5
    else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
      /* Half transfer processing.*/
      _adc_isr_half_code(adcp);
    }
  }
}
 8001c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    if ((flags & STM32_DMA_ISR_TCIF) != 0) {
      /* Transfer complete processing.*/
      _adc_isr_full_code(adcp);
 8001c28:	6881      	ldr	r1, [r0, #8]
 8001c2a:	4718      	bx	r3
 8001c2c:	0000      	movs	r0, r0
	...

08001c30 <chprintf.lto_priv.79>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001c30:	b40e      	push	{r1, r2, r3}
 8001c32:	b500      	push	{lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	ab03      	add	r3, sp, #12
 8001c38:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001c3c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001c3e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001c40:	f001 fbde 	bl	8003400 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001c44:	b002      	add	sp, #8
 8001c46:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c4a:	b003      	add	sp, #12
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <__early_init+0x80>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c52:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001c5c:	680b      	ldr	r3, [r1, #0]
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <__early_init+0x80>)
 8001c60:	079b      	lsls	r3, r3, #30
 8001c62:	d5fb      	bpl.n	8001c5c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c64:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c66:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001c68:	2000      	movs	r0, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001c6a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8001c6e:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001c70:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001c72:	684b      	ldr	r3, [r1, #4]
 8001c74:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <__early_init+0x80>)
 8001c76:	f013 0f0c 	tst.w	r3, #12
 8001c7a:	d1fa      	bne.n	8001c72 <__early_init+0x22>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001c7c:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001c86:	680b      	ldr	r3, [r1, #0]
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <__early_init+0x80>)
 8001c8a:	0398      	lsls	r0, r3, #14
 8001c8c:	d5fb      	bpl.n	8001c86 <__early_init+0x36>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001c8e:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001c90:	6853      	ldr	r3, [r2, #4]
 8001c92:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001c96:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ca0:	680b      	ldr	r3, [r1, #0]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <__early_init+0x80>)
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	d5fb      	bpl.n	8001ca0 <__early_init+0x50>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001ca8:	4611      	mov	r1, r2
/*
 * Early initialization code.
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {
 8001caa:	b410      	push	{r4}
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <__early_init+0x84>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001cae:	4c0a      	ldr	r4, [pc, #40]	; (8001cd8 <__early_init+0x88>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001cb0:	2012      	movs	r0, #18
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001cb2:	6054      	str	r4, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001cb4:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001cb6:	6853      	ldr	r3, [r2, #4]
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001cbe:	684b      	ldr	r3, [r1, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d1fa      	bne.n	8001cbe <__early_init+0x6e>

  stm32_clock_init();
}
 8001cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	001d6400 	.word	0x001d6400
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001ce0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8001ce6:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001ce8:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8001cea:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 8001cec:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8001cee:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8001cf0:	7803      	ldrb	r3, [r0, #0]
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	bf28      	it	cs
 8001cf6:	460a      	movcs	r2, r1
 8001cf8:	bb03      	cbnz	r3, 8001d3c <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001cfa:	4917      	ldr	r1, [pc, #92]	; (8001d58 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8001cfc:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001cfe:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001d06:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001d0a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8001d0e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001d12:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001d14:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001d16:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8001d1a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001d1e:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001d20:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001d24:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8001d26:	d007      	beq.n	8001d38 <usb_lld_prepare_transmit+0x58>
 8001d28:	3802      	subs	r0, #2
 8001d2a:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001d2c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001d30:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001d32:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001d36:	d1f9      	bne.n	8001d2c <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8001d38:	bc30      	pop	{r4, r5}
 8001d3a:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <usb_lld_prepare_transmit+0x78>)
 8001d3e:	68c1      	ldr	r1, [r0, #12]
 8001d40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d42:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8001d46:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8001d4a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001d4e:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8001d50:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8001d52:	f7ff bd55 	b.w	8001800 <usb_packet_write_from_queue>
 8001d56:	bf00      	nop
 8001d58:	40005c00 	.word	0x40005c00
 8001d5c:	00000000 	.word	0x00000000

08001d60 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8001d60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001d64:	68c9      	ldr	r1, [r1, #12]
 8001d66:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8001d68:	6853      	ldr	r3, [r2, #4]
 8001d6a:	b133      	cbz	r3, 8001d7a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8001d6c:	8a49      	ldrh	r1, [r1, #18]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	440b      	add	r3, r1
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	8213      	strh	r3, [r2, #16]
 8001d78:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	8213      	strh	r3, [r2, #16]
 8001d7e:	4770      	bx	lr

08001d80 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8001d80:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001d84:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8001d86:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	2a02      	cmp	r2, #2
 8001d92:	bf96      	itet	ls
 8001d94:	4c2e      	ldrls	r4, [pc, #184]	; (8001e50 <usb_lld_init_endpoint+0xd0>)
 8001d96:	f44f 7500 	movhi.w	r5, #512	; 0x200
 8001d9a:	f834 5012 	ldrhls.w	r5, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	b10a      	cbz	r2, 8001da6 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8001da2:	f045 0520 	orr.w	r5, r5, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	b10a      	cbz	r2, 8001dae <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 8001daa:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001dae:	f647 0670 	movw	r6, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8001db2:	ea45 0401 	orr.w	r4, r5, r1
 8001db6:	f424 4478 	bic.w	r4, r4, #63488	; 0xf800
 8001dba:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8001dbe:	008a      	lsls	r2, r1, #2
 8001dc0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001dc4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001dc8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001dcc:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001dd0:	6014      	str	r4, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8001dd2:	6814      	ldr	r4, [r2, #0]
 8001dd4:	402e      	ands	r6, r5
 8001dd6:	4074      	eors	r4, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001dd8:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001dda:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001dde:	f044 0480 	orr.w	r4, r4, #128	; 0x80

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001de2:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8001de4:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8001de6:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8001dea:	d826      	bhi.n	8001e3a <usb_lld_init_endpoint+0xba>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8001dec:	f044 0401 	orr.w	r4, r4, #1
 8001df0:	3401      	adds	r4, #1
 8001df2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001df6:	0264      	lsls	r4, r4, #9
 8001df8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <usb_lld_init_endpoint+0xd4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001dfe:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8001e00:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8001e02:	2700      	movs	r7, #0
 8001e04:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 8001e08:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8001e0c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001e10:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8001e12:	684b      	ldr	r3, [r1, #4]
 8001e14:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8001e16:	68cb      	ldr	r3, [r1, #12]
 8001e18:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001e1a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 8001e1e:	1993      	adds	r3, r2, r6
 8001e20:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8001e24:	680b      	ldr	r3, [r1, #0]
 8001e26:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8001e28:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 8001e2c:	441d      	add	r5, r3
 8001e2e:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001e32:	688a      	ldr	r2, [r1, #8]
}
 8001e34:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001e36:	608b      	str	r3, [r1, #8]
}
 8001e38:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8001e3a:	f044 041f 	orr.w	r4, r4, #31
 8001e3e:	3401      	adds	r4, #1
 8001e40:	1164      	asrs	r4, r4, #5
 8001e42:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8001e46:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8001e4a:	b2a4      	uxth	r4, r4
 8001e4c:	e7d6      	b.n	8001dfc <usb_lld_init_endpoint+0x7c>
 8001e4e:	bf00      	nop
 8001e50:	08003d40 	.word	0x08003d40
 8001e54:	40005c00 	.word	0x40005c00
	...

08001e60 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001e60:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8001e62:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001e64:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8001e68:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8001e6a:	4d0d      	ldr	r5, [pc, #52]	; (8001ea0 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001e6c:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8001e70:	bf0c      	ite	eq
 8001e72:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8001e76:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 8001e7a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8001e7e:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8001e80:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001e82:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8001e84:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8001e86:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8001e8a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8001e8c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8001e90:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8001e92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8001e96:	f7ff bf73 	b.w	8001d80 <usb_lld_init_endpoint>
 8001e9a:	bf00      	nop
 8001e9c:	40005c00 	.word	0x40005c00
 8001ea0:	08003d10 	.word	0x08003d10
	...

08001eb0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8001eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8001eb4:	4b99      	ldr	r3, [pc, #612]	; (800211c <Vector90+0x26c>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8001eb6:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  OSAL_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8001eb8:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8001eba:	0563      	lsls	r3, r4, #21
 8001ebc:	f100 819c 	bmi.w	80021f8 <Vector90+0x348>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8001ec0:	0527      	lsls	r7, r4, #20
 8001ec2:	d511      	bpl.n	8001ee8 <Vector90+0x38>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001ec4:	f8df b258 	ldr.w	fp, [pc, #600]	; 8002120 <Vector90+0x270>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001ec8:	4a94      	ldr	r2, [pc, #592]	; (800211c <Vector90+0x26c>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001eca:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001ece:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001ed0:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001ed8:	b115      	cbz	r5, 8001ee0 <Vector90+0x30>
 8001eda:	4658      	mov	r0, fp
 8001edc:	2103      	movs	r1, #3
 8001ede:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8001ee0:	4b8e      	ldr	r3, [pc, #568]	; (800211c <Vector90+0x26c>)
 8001ee2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8001ee8:	04e6      	lsls	r6, r4, #19
 8001eea:	d508      	bpl.n	8001efe <Vector90+0x4e>
    uint32_t fnr = STM32_USB->FNR;
 8001eec:	4b8b      	ldr	r3, [pc, #556]	; (800211c <Vector90+0x26c>)
 8001eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8001ef0:	0415      	lsls	r5, r2, #16
 8001ef2:	f140 8171 	bpl.w	80021d8 <Vector90+0x328>
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8001ef6:	4b89      	ldr	r3, [pc, #548]	; (800211c <Vector90+0x26c>)
 8001ef8:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8001efe:	05a0      	lsls	r0, r4, #22
 8001f00:	d50b      	bpl.n	8001f1a <Vector90+0x6a>
    _usb_isr_invoke_sof_cb(usbp);
 8001f02:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8002120 <Vector90+0x270>
 8001f06:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	b10b      	cbz	r3, 8001f12 <Vector90+0x62>
 8001f0e:	4658      	mov	r0, fp
 8001f10:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8001f12:	4b82      	ldr	r3, [pc, #520]	; (800211c <Vector90+0x26c>)
 8001f14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8001f1a:	0421      	lsls	r1, r4, #16
 8001f1c:	f140 80d3 	bpl.w	80020c6 <Vector90+0x216>
 8001f20:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8002120 <Vector90+0x270>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001f24:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800211c <Vector90+0x26c>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8001f28:	f004 040f 	and.w	r4, r4, #15
 8001f2c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8001f30:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 8001f34:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8001f38:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8001f3c:	1ca6      	adds	r6, r4, #2
 8001f3e:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8001f42:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8001f46:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8001f48:	d065      	beq.n	8002016 <Vector90+0x166>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8001f4a:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001f4c:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8001f4e:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5a:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001f5c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8001f60:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8001f64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f68:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8001f6c:	4403      	add	r3, r0
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8001f72:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8001f76:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f000 80bd 	beq.w	8002100 <Vector90+0x250>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8001f86:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8001f88:	f89e c000 	ldrb.w	ip, [lr]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	bf28      	it	cs
 8001f90:	461a      	movcs	r2, r3
 8001f92:	f1bc 0f00 	cmp.w	ip, #0
 8001f96:	f040 8112 	bne.w	80021be <Vector90+0x30e>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8001f9a:	1c53      	adds	r3, r2, #1
 8001f9c:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 8001f9e:	f8de 300c 	ldr.w	r3, [lr, #12]
 8001fa2:	4419      	add	r1, r3
 8001fa4:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001fa8:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8001fb2:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8001fb6:	4470      	add	r0, lr
 8001fb8:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001fba:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001fbe:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001fc0:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8001fc4:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001fc8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001fcc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8001fd0:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8001fd2:	d008      	beq.n	8001fe6 <Vector90+0x136>
 8001fd4:	3902      	subs	r1, #2
 8001fd6:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001fda:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001fde:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8001fe0:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8001fe4:	d1f9      	bne.n	8001fda <Vector90+0x12a>
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001ff0:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8001ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002002:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200e:	f8c8 3000 	str.w	r3, [r8]
 8002012:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8002016:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 800201a:	d04f      	beq.n	80020bc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
 800201c:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 800201e:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8002022:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202e:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8002030:	d15e      	bne.n	80020f0 <Vector90+0x240>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002032:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800203c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8002040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002044:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4610      	mov	r0, r2
 800204a:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 800204c:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800204e:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8002052:	2a00      	cmp	r2, #0
 8002054:	d166      	bne.n	8002124 <Vector90+0x274>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8002056:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 8002058:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800205c:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8002060:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8002064:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8002066:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 800206a:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800206c:	d009      	beq.n	8002082 <Vector90+0x1d2>
 800206e:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8002070:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8002074:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8002076:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800207a:	d1f9      	bne.n	8002070 <Vector90+0x1c0>
 800207c:	4671      	mov	r1, lr
 800207e:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8002082:	4440      	add	r0, r8
 8002084:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8002086:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8002088:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800208a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800208c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800208e:	3801      	subs	r0, #1
 8002090:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8002092:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8002094:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8002098:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800209a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800209c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800209e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 80020a0:	d316      	bcc.n	80020d0 <Vector90+0x220>
 80020a2:	b1a8      	cbz	r0, 80020d0 <Vector90+0x220>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ba:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 80020bc:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80020c0:	0423      	lsls	r3, r4, #16
 80020c2:	f53f af31 	bmi.w	8001f28 <Vector90+0x78>
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
}
 80020c6:	b005      	add	sp, #20
 80020c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  OSAL_IRQ_EPILOGUE();
 80020cc:	f7fe bd98 	b.w	8000c00 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 80020d0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80020d4:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80020d8:	2101      	movs	r1, #1
 80020da:	40a1      	lsls	r1, r4
 80020dc:	6872      	ldr	r2, [r6, #4]
 80020de:	ea23 0301 	bic.w	r3, r3, r1
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	f8ab 300a 	strh.w	r3, [fp, #10]
 80020e8:	4621      	mov	r1, r4
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <Vector90+0x270>)
 80020ec:	4790      	blx	r2
 80020ee:	e7e5      	b.n	80020bc <Vector90+0x20c>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 80020f0:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 80020f4:	6873      	ldr	r3, [r6, #4]
 80020f6:	4621      	mov	r1, r4
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <Vector90+0x270>)
 80020fc:	4798      	blx	r3
 80020fe:	e7dd      	b.n	80020bc <Vector90+0x20c>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <Vector90+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	891b      	ldrh	r3, [r3, #8]
 8002106:	40a2      	lsls	r2, r4
 8002108:	ea23 0302 	bic.w	r3, r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	; (8002120 <Vector90+0x270>)
 800210e:	4621      	mov	r1, r4
 8002110:	8113      	strh	r3, [r2, #8]
 8002112:	4610      	mov	r0, r2
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4798      	blx	r3
 8002118:	e77d      	b.n	8002016 <Vector90+0x166>
 800211a:	bf00      	nop
 800211c:	40005c00 	.word	0x40005c00
 8002120:	20000884 	.word	0x20000884
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8002124:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8002126:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800212a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800212e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002132:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8002136:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8002138:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 800213a:	9203      	str	r2, [sp, #12]
 800213c:	d021      	beq.n	8002182 <Vector90+0x2d2>
 800213e:	4610      	mov	r0, r2
 8002140:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8002142:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8002144:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8002148:	f103 0901 	add.w	r9, r3, #1
 800214c:	f8c1 9014 	str.w	r9, [r1, #20]
 8002150:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8002152:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8002154:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8002158:	694a      	ldr	r2, [r1, #20]
 800215a:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800215c:	bf28      	it	cs
 800215e:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8002160:	1c53      	adds	r3, r2, #1
 8002162:	614b      	str	r3, [r1, #20]
 8002164:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8002168:	690b      	ldr	r3, [r1, #16]
 800216a:	694a      	ldr	r2, [r1, #20]
 800216c:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800216e:	bf24      	itt	cs
 8002170:	68cb      	ldrcs	r3, [r1, #12]
 8002172:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8002174:	3801      	subs	r0, #1
 8002176:	d1e4      	bne.n	8002142 <Vector90+0x292>
 8002178:	9b02      	ldr	r3, [sp, #8]
 800217a:	9a03      	ldr	r2, [sp, #12]
 800217c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002180:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	07da      	lsls	r2, r3, #31
 8002186:	d50b      	bpl.n	80021a0 <Vector90+0x2f0>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8002188:	9a02      	ldr	r2, [sp, #8]
 800218a:	694b      	ldr	r3, [r1, #20]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	1c58      	adds	r0, r3, #1
 8002190:	6148      	str	r0, [r1, #20]
 8002192:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8002194:	690b      	ldr	r3, [r1, #16]
 8002196:	694a      	ldr	r2, [r1, #20]
 8002198:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 800219a:	bf24      	itt	cs
 800219c:	68cb      	ldrcs	r3, [r1, #12]
 800219e:	614b      	strcs	r3, [r1, #20]
 80021a0:	2320      	movs	r3, #32
 80021a2:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 80021a6:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80021a8:	4608      	mov	r0, r1
 80021aa:	4443      	add	r3, r8
 80021ac:	608b      	str	r3, [r1, #8]
 80021ae:	2100      	movs	r1, #0
 80021b0:	f7fe fede 	bl	8000f70 <chThdDequeueAllI>
 80021b4:	2300      	movs	r3, #0
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	e763      	b.n	8002086 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80021be:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80021c2:	f8de 100c 	ldr.w	r1, [lr, #12]
 80021c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80021ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80021ce:	4418      	add	r0, r3
 80021d0:	0040      	lsls	r0, r0, #1
 80021d2:	f7ff fb15 	bl	8001800 <usb_packet_write_from_queue>
 80021d6:	e706      	b.n	8001fe6 <Vector90+0x136>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80021d8:	f8df b074 	ldr.w	fp, [pc, #116]	; 8002250 <Vector90+0x3a0>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80021dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80021de:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80021e2:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80021e6:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	f43f ae83 	beq.w	8001ef6 <Vector90+0x46>
 80021f0:	4658      	mov	r0, fp
 80021f2:	2104      	movs	r1, #4
 80021f4:	47a8      	blx	r5
 80021f6:	e67e      	b.n	8001ef6 <Vector90+0x46>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80021f8:	f8df b054 	ldr.w	fp, [pc, #84]	; 8002250 <Vector90+0x3a0>
  usbp->status        = 0;
 80021fc:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80021fe:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002200:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002202:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8002206:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 800220a:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 800220e:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8002212:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002216:	f88b 2000 	strb.w	r2, [fp]
 800221a:	f10b 0308 	add.w	r3, fp, #8
 800221e:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002222:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002226:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8002228:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 800222c:	d1f9      	bne.n	8002222 <Vector90+0x372>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <Vector90+0x3a0>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002230:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002234:	f7ff fe14 	bl	8001e60 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002238:	f8db 3004 	ldr.w	r3, [fp, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b113      	cbz	r3, 8002246 <Vector90+0x396>
 8002240:	4629      	mov	r1, r5
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <Vector90+0x3a0>)
 8002244:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 8002246:	4b03      	ldr	r3, [pc, #12]	; (8002254 <Vector90+0x3a4>)
 8002248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
 800224e:	e637      	b.n	8001ec0 <Vector90+0x10>
 8002250:	20000884 	.word	0x20000884
 8002254:	40005c00 	.word	0x40005c00
	...

08002260 <_pal_lld_setgroupmode>:
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8002260:	2a03      	cmp	r2, #3
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002262:	b5f0      	push	{r4, r5, r6, r7, lr}
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8002264:	d02c      	beq.n	80022c0 <_pal_lld_setgroupmode+0x60>
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8002266:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8002268:	bf08      	it	eq
 800226a:	6141      	streq	r1, [r0, #20]
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	461c      	mov	r4, r3
 8002270:	461d      	mov	r5, r3
 8002272:	461e      	mov	r6, r3

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 8002274:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80022c4 <_pal_lld_setgroupmode+0x64>
 8002278:	2708      	movs	r7, #8
 800227a:	f81e 2002 	ldrb.w	r2, [lr, r2]
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 800227e:	f011 0f80 	tst.w	r1, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 8002282:	ea4f 1505 	mov.w	r5, r5, lsl #4
    mh <<= 4;
    crl <<= 4;
 8002286:	ea4f 1303 	mov.w	r3, r3, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 800228a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    crl <<= 4;
    crh <<= 4;
 800228e:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 8002292:	bf0c      	ite	eq
 8002294:	f045 050f 	orreq.w	r5, r5, #15
    else
      crl |= cfg;
 8002298:	4313      	orrne	r3, r2
    if ((mask & 0x8000) == 0)
 800229a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 800229e:	bf0c      	ite	eq
 80022a0:	f046 060f 	orreq.w	r6, r6, #15
    else
      crh |= cfg;
 80022a4:	4314      	orrne	r4, r2
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80022a6:	3f01      	subs	r7, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 80022a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80022ac:	d1e7      	bne.n	800227e <_pal_lld_setgroupmode+0x1e>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 80022ae:	6842      	ldr	r2, [r0, #4]
 80022b0:	4016      	ands	r6, r2
 80022b2:	4334      	orrs	r4, r6
 80022b4:	6044      	str	r4, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80022b6:	6802      	ldr	r2, [r0, #0]
 80022b8:	4015      	ands	r5, r2
 80022ba:	432b      	orrs	r3, r5
 80022bc:	6003      	str	r3, [r0, #0]
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
 80022c0:	6101      	str	r1, [r0, #16]
 80022c2:	e7d3      	b.n	800226c <_pal_lld_setgroupmode+0xc>
 80022c4:	08003ce0 	.word	0x08003ce0
	...

080022d0 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 80022d0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80022d4:	46b0      	mov	r8, r6
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <Thread1+0x38>)
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <Thread1+0x3c>)
 80022da:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 80022dc:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
 80022de:	4d0c      	ldr	r5, [pc, #48]	; (8002310 <Thread1+0x40>)
 80022e0:	4f0c      	ldr	r7, [pc, #48]	; (8002314 <Thread1+0x44>)
 80022e2:	619a      	str	r2, [r3, #24]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 80022e4:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOC, 13);
 80022e6:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf0c      	ite	eq
 80022ee:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 80022f2:	f44f 64fa 	movne.w	r4, #2000	; 0x7d0
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff f92a 	bl	8001550 <chThdSleep>
    palSetPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
 80022fc:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 1000;
    palClearPad(GPIOC, 13);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOC, 13);
 80022fe:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8002300:	f7ff f926 	bl	8001550 <chThdSleep>
 8002304:	e7ee      	b.n	80022e4 <Thread1+0x14>
 8002306:	bf00      	nop
 8002308:	20000f20 	.word	0x20000f20
 800230c:	08003e40 	.word	0x08003e40
 8002310:	40011000 	.word	0x40011000
 8002314:	20000884 	.word	0x20000884
	...

08002320 <usb2serial>:
}

static void usb2serial(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;
  (void)argv;
  if (argc > 0) {
 8002320:	2900      	cmp	r1, #0
 8002322:	dd02      	ble.n	800232a <usb2serial+0xa>
    chprintf(chp, "Usage: write\r\n");
 8002324:	490a      	ldr	r1, [pc, #40]	; (8002350 <usb2serial+0x30>)
 8002326:	f001 b9f3 	b.w	8003710 <chprintf.lto_priv.77>
    return;
  }

}

static void usb2serial(BaseSequentialStream *chp, int argc, char *argv[]) {
 800232a:	b510      	push	{r4, lr}
 800232c:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <usb2serial+0x34>)
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, USB2SER_WA_SIZE, chThdGetPriorityX(),
 8002330:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <usb2serial+0x38>)
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	4623      	mov	r3, r4
 800233c:	f001 fb20 	bl	8003980 <chThdCreateFromHeap.constprop.38>
                           handleusb2Serial, chp);
  if (tp == NULL) {
 8002340:	b100      	cbz	r0, 8002344 <usb2serial+0x24>
 8002342:	bd10      	pop	{r4, pc}
    chprintf(chp, "out of memory\r\n");
 8002344:	4620      	mov	r0, r4
    return;
  }
}
 8002346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, USB2SER_WA_SIZE, chThdGetPriorityX(),
                           handleusb2Serial, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 800234a:	4904      	ldr	r1, [pc, #16]	; (800235c <usb2serial+0x3c>)
 800234c:	f001 b9e0 	b.w	8003710 <chprintf.lto_priv.77>
 8002350:	08003e48 	.word	0x08003e48
 8002354:	20000f20 	.word	0x20000f20
 8002358:	080038b1 	.word	0x080038b1
 800235c:	08003e58 	.word	0x08003e58

08002360 <adcWatch>:
}

static void adcWatch(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint16_t adc_vals[10];
  (void)argv;
  if (argc > 0) {
 8002360:	2900      	cmp	r1, #0
 8002362:	dd02      	ble.n	800236a <adcWatch+0xa>
    chprintf(chp, "Usage: test\r\n");
 8002364:	4901      	ldr	r1, [pc, #4]	; (800236c <adcWatch+0xc>)
 8002366:	f001 b9d3 	b.w	8003710 <chprintf.lto_priv.77>
 800236a:	4770      	bx	lr
 800236c:	08003e68 	.word	0x08003e68

08002370 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002370:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8002372:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8002374:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8002376:	460e      	mov	r6, r1
 8002378:	4bb8      	ldr	r3, [pc, #736]	; (800265c <main+0x2ec>)
 800237a:	f04f 34ff 	mov.w	r4, #4294967295
 800237e:	691d      	ldr	r5, [r3, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8002380:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002384:	611c      	str	r4, [r3, #16]
 8002386:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002388:	68dd      	ldr	r5, [r3, #12]
 800238a:	60dc      	str	r4, [r3, #12]
 800238c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800238e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002390:	4db3      	ldr	r5, [pc, #716]	; (8002660 <main+0x2f0>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002392:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002396:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8002398:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800239a:	4fb2      	ldr	r7, [pc, #712]	; (8002664 <main+0x2f4>)
 800239c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 80023a0:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80023a2:	682b      	ldr	r3, [r5, #0]
 80023a4:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 8002688 <main+0x318>
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	4cae      	ldr	r4, [pc, #696]	; (8002668 <main+0x2f8>)
 80023ae:	602b      	str	r3, [r5, #0]
 80023b0:	b08b      	sub	sp, #44	; 0x2c
 80023b2:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80023b4:	f85e 3002 	ldr.w	r3, [lr, r2]
 80023b8:	320c      	adds	r2, #12
 80023ba:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 80023bc:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80023c0:	3001      	adds	r0, #1
 80023c2:	2807      	cmp	r0, #7
    _stm32_dma_streams[i].channel->CCR = 0;
 80023c4:	f04f 0300 	mov.w	r3, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80023c8:	d1f4      	bne.n	80023b4 <main+0x44>
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 80023ca:	49a8      	ldr	r1, [pc, #672]	; (800266c <main+0x2fc>)
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 80023cc:	f242 5c8a 	movw	ip, #9610	; 0x258a
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 80023d0:	468b      	mov	fp, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80023d2:	4ca7      	ldr	r4, [pc, #668]	; (8002670 <main+0x300>)
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023d8:	48a0      	ldr	r0, [pc, #640]	; (800265c <main+0x2ec>)
 80023da:	6062      	str	r2, [r4, #4]
 80023dc:	6984      	ldr	r4, [r0, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80023de:	4fa5      	ldr	r7, [pc, #660]	; (8002674 <main+0x304>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80023e0:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 80026bc <main+0x34c>

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80023e4:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 80026c0 <main+0x350>
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80023e8:	4ea3      	ldr	r6, [pc, #652]	; (8002678 <main+0x308>)
  GPIOB->CRH = config->PBData.crh;
 80023ea:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 80026c4 <main+0x354>
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80023ee:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 80023f2:	6184      	str	r4, [r0, #24]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80023f4:	4da1      	ldr	r5, [pc, #644]	; (800267c <main+0x30c>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80023f6:	60fa      	str	r2, [r7, #12]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80023f8:	4ca1      	ldr	r4, [pc, #644]	; (8002680 <main+0x310>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80023fa:	f8c7 a004 	str.w	sl, [r7, #4]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80023fe:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 80026c8 <main+0x358>
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8002402:	f8c7 9000 	str.w	r9, [r7]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002406:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 80026cc <main+0x35c>
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 800240a:	60f2      	str	r2, [r6, #12]
  GPIOB->CRH = config->PBData.crh;
 800240c:	f8c6 e004 	str.w	lr, [r6, #4]
  GPIOB->CRL = config->PBData.crl;
 8002410:	f8c6 e000 	str.w	lr, [r6]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8002414:	f04f 3688 	mov.w	r6, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002418:	60ea      	str	r2, [r5, #12]
  GPIOC->CRH = config->PCData.crh;
 800241a:	606e      	str	r6, [r5, #4]
  GPIOC->CRL = config->PCData.crl;
 800241c:	602e      	str	r6, [r5, #0]
  GPIOD->ODR = config->PDData.odr;
 800241e:	60e2      	str	r2, [r4, #12]
  GPIOD->CRH = config->PDData.crh;
 8002420:	6066      	str	r6, [r4, #4]
  GPIOD->CRL = config->PDData.crl;
 8002422:	f8c4 8000 	str.w	r8, [r4]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002426:	f8c9 200c 	str.w	r2, [r9, #12]
  GPIOE->CRH = config->PEData.crh;
 800242a:	f8c9 6004 	str.w	r6, [r9, #4]
  GPIOE->CRL = config->PEData.crl;
 800242e:	f8c9 6000 	str.w	r6, [r9]
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 8002432:	6982      	ldr	r2, [r0, #24]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8002434:	4f93      	ldr	r7, [pc, #588]	; (8002684 <main+0x314>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 8002436:	4e94      	ldr	r6, [pc, #592]	; (8002688 <main+0x318>)
 8002438:	f04f 0e01 	mov.w	lr, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800243c:	f107 0418 	add.w	r4, r7, #24
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 8002440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  ADC1->CR1 = 0;
  ADC1->CR2 = ADC_CR2_ADON;

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 8002444:	2509      	movs	r5, #9
 8002446:	f887 e000 	strb.w	lr, [r7]
  adcp->config   = NULL;
 800244a:	607b      	str	r3, [r7, #4]
  adcp->samples  = NULL;
 800244c:	60bb      	str	r3, [r7, #8]
  adcp->depth    = 0;
 800244e:	60fb      	str	r3, [r7, #12]
  adcp->grpp     = NULL;
 8002450:	613b      	str	r3, [r7, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8002452:	617b      	str	r3, [r7, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002454:	623b      	str	r3, [r7, #32]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
 8002456:	62fe      	str	r6, [r7, #44]	; 0x2c
                  STM32_DMA_CR_MSIZE_HWORD | STM32_DMA_CR_PSIZE_HWORD |
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
 8002458:	6182      	str	r2, [r0, #24]
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA1_STREAM1;
  ADCD1.dmamode = STM32_DMA_CR_PL(STM32_ADC_ADC1_DMA_PRIORITY) |
 800245a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800245e:	61bc      	str	r4, [r7, #24]
  tqp->p_prev = (thread_t *)tqp;
 8002460:	61fc      	str	r4, [r7, #28]
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 8002462:	62b9      	str	r1, [r7, #40]	; 0x28
                  STM32_DMA_CR_MINC        | STM32_DMA_CR_TCIE        |
                  STM32_DMA_CR_TEIE;

  /* Temporary activation.*/
  rccEnableADC1(FALSE);
  ADC1->CR1 = 0;
 8002464:	604b      	str	r3, [r1, #4]
  ADC1->CR2 = ADC_CR2_ADON;
 8002466:	f8c1 e008 	str.w	lr, [r1, #8]

  /* Reset calibration just to be safe.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
 800246a:	608d      	str	r5, [r1, #8]
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
 800246c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8002470:	4b7e      	ldr	r3, [pc, #504]	; (800266c <main+0x2fc>)
 8002472:	0712      	lsls	r2, r2, #28
 8002474:	d4fa      	bmi.n	800246c <main+0xfc>
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 8002476:	4619      	mov	r1, r3
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_RSTCAL;
  while ((ADC1->CR2 & ADC_CR2_RSTCAL) != 0)
    ;

  /* Calibration.*/
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
 8002478:	2205      	movs	r2, #5
 800247a:	609a      	str	r2, [r3, #8]
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
 800247c:	688b      	ldr	r3, [r1, #8]
 800247e:	4a7b      	ldr	r2, [pc, #492]	; (800266c <main+0x2fc>)
 8002480:	f013 0304 	ands.w	r3, r3, #4
 8002484:	d1fa      	bne.n	800247c <main+0x10c>
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002486:	469e      	mov	lr, r3
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
  rccDisableADC1(FALSE);
 8002488:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 800265c <main+0x2ec>
  ADC1->CR2 = ADC_CR2_ADON | ADC_CR2_CAL;
  while ((ADC1->CR2 & ADC_CR2_CAL) != 0)
    ;

  /* Return the ADC in low power mode.*/
  ADC1->CR2 = 0;
 800248c:	6093      	str	r3, [r2, #8]
  rccDisableADC1(FALSE);
 800248e:	f8da 2018 	ldr.w	r2, [sl, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002492:	487e      	ldr	r0, [pc, #504]	; (800268c <main+0x31c>)

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002494:	497e      	ldr	r1, [pc, #504]	; (8002690 <main+0x320>)
 8002496:	f100 040c 	add.w	r4, r0, #12
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
 800249a:	4d7e      	ldr	r5, [pc, #504]	; (8002694 <main+0x324>)
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800249c:	f8df b230 	ldr.w	fp, [pc, #560]	; 80026d0 <main+0x360>
 80024a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80024a4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80026d4 <main+0x364>
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 80024a8:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80026d8 <main+0x368>
 80024ac:	f8ca 2018 	str.w	r2, [sl, #24]
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
  i2cp->config = NULL;
 80024b0:	f1a4 060c 	sub.w	r6, r4, #12
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80024b4:	2201      	movs	r2, #1
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80024b6:	f1a1 000c 	sub.w	r0, r1, #12
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80024ba:	f04f 0c08 	mov.w	ip, #8

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80024be:	62f1      	str	r1, [r6, #44]	; 0x2c
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 80024c0:	6169      	str	r1, [r5, #20]
 80024c2:	7032      	strb	r2, [r6, #0]
 80024c4:	702a      	strb	r2, [r5, #0]
 80024c6:	f88b 2000 	strb.w	r2, [fp]
  i2cp->config = NULL;
 80024ca:	f844 3c08 	str.w	r3, [r4, #-8]
 80024ce:	6173      	str	r3, [r6, #20]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80024d0:	61f3      	str	r3, [r6, #28]
  I2CD1.i2c    = I2C1;
 80024d2:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
 80024d6:	60f4      	str	r4, [r6, #12]
  tqp->p_prev = (thread_t *)tqp;
 80024d8:	6134      	str	r4, [r6, #16]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80024da:	6330      	str	r0, [r6, #48]	; 0x30

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 80024dc:	6128      	str	r0, [r5, #16]
  uartp->txstate = UART_TX_IDLE;
 80024de:	706b      	strb	r3, [r5, #1]
  uartp->rxstate = UART_RX_IDLE;
 80024e0:	70ab      	strb	r3, [r5, #2]
  uartp->config  = NULL;
 80024e2:	606b      	str	r3, [r5, #4]
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
  UARTD2.usart   = USART2;
 80024e4:	f8c5 8008 	str.w	r8, [r5, #8]
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80024e8:	f8c5 c00c 	str.w	ip, [r5, #12]
  usbp->config       = NULL;
 80024ec:	f8cb 3004 	str.w	r3, [fp, #4]
 80024f0:	f10b 0228 	add.w	r2, fp, #40	; 0x28
 80024f4:	f10b 0144 	add.w	r1, fp, #68	; 0x44
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80024f8:	f842 ef04 	str.w	lr, [r2, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 80024fc:	428a      	cmp	r2, r1
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 80024fe:	f8c2 e01c 	str.w	lr, [r2, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002502:	f04f 0300 	mov.w	r3, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002506:	d1f7      	bne.n	80024f8 <main+0x188>
  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002508:	f64f 7eff 	movw	lr, #65535	; 0xffff

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800250c:	f648 4c9f 	movw	ip, #35999	; 0x8c9f
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002510:	f64f 04ff 	movw	r4, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002514:	f8df a144 	ldr.w	sl, [pc, #324]	; 800265c <main+0x2ec>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002518:	495f      	ldr	r1, [pc, #380]	; (8002698 <main+0x328>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800251a:	f8da 201c 	ldr.w	r2, [sl, #28]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800251e:	485f      	ldr	r0, [pc, #380]	; (800269c <main+0x32c>)
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	f8ca 201c 	str.w	r2, [sl, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002528:	684a      	ldr	r2, [r1, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800252a:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80026dc <main+0x36c>
 800252e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002532:	604a      	str	r2, [r1, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002534:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002538:	2201      	movs	r2, #1

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800253a:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800253e:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 8002542:	f04f 0c80 	mov.w	ip, #128	; 0x80
  STM32_ST_TIM->CCMR1  = 0;
 8002546:	618b      	str	r3, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002548:	634b      	str	r3, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800254a:	60cb      	str	r3, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 800254c:	604b      	str	r3, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800254e:	614a      	str	r2, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002550:	600a      	str	r2, [r1, #0]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002552:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8002556:	9203      	str	r2, [sp, #12]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002558:	f889 c31c 	strb.w	ip, [r9, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800255c:	f8c9 1180 	str.w	r1, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002560:	f8c9 1000 	str.w	r1, [r9]
 8002564:	6083      	str	r3, [r0, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002566:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800256a:	494d      	ldr	r1, [pc, #308]	; (80026a0 <main+0x330>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800256c:	ea0c 0404 	and.w	r4, ip, r4
  reg_value  =  (reg_value                                 |
 8002570:	4321      	orrs	r1, r4

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002572:	4c4c      	ldr	r4, [pc, #304]	; (80026a4 <main+0x334>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002574:	60c1      	str	r1, [r0, #12]
 8002576:	68e1      	ldr	r1, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002578:	f8df c164 	ldr.w	ip, [pc, #356]	; 80026e0 <main+0x370>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800257c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002580:	60e1      	str	r1, [r4, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002582:	f8dc 1000 	ldr.w	r1, [ip]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002586:	4c48      	ldr	r4, [pc, #288]	; (80026a8 <main+0x338>)
 8002588:	4311      	orrs	r1, r2
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 800258a:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving    = 0;
 800258e:	f8ab 300a 	strh.w	r3, [fp, #10]
 8002592:	f8cc 1000 	str.w	r1, [ip]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002596:	2110      	movs	r1, #16
 8002598:	77c1      	strb	r1, [r0, #31]
 800259a:	f04f 0820 	mov.w	r8, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800259e:	f104 011c 	add.w	r1, r4, #28
 80025a2:	f880 8022 	strb.w	r8, [r0, #34]	; 0x22

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80025a6:	2200      	movs	r2, #0
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80025a8:	60a3      	str	r3, [r4, #8]
 80025aa:	61e1      	str	r1, [r4, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80025ac:	a804      	add	r0, sp, #16
 80025ae:	6024      	str	r4, [r4, #0]
  tqp->p_prev = (thread_t *)tqp;
 80025b0:	6064      	str	r4, [r4, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80025b2:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 80025b4:	6164      	str	r4, [r4, #20]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80025b6:	6221      	str	r1, [r4, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 80025bc:	84e3      	strh	r3, [r4, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80025be:	6723      	str	r3, [r4, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80025c0:	9305      	str	r3, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80025c2:	9306      	str	r3, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80025c4:	9307      	str	r3, [sp, #28]
 80025c6:	9302      	str	r3, [sp, #8]
  tmp->cumulative = (rttime_t)0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 80025ce:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80025d2:	9104      	str	r1, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80025d4:	f001 f9cc 	bl	8003970 <chTMStartMeasurementX.constprop.43>
  chTMStopMeasurementX(&tm);
 80025d8:	a804      	add	r0, sp, #16
 80025da:	f7fe fca1 	bl	8000f20 <chTMStopMeasurementX>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025de:	6966      	ldr	r6, [r4, #20]
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80025e0:	4832      	ldr	r0, [pc, #200]	; (80026ac <main+0x33c>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80025e2:	4933      	ldr	r1, [pc, #204]	; (80026b0 <main+0x340>)
 80025e4:	f020 0307 	bic.w	r3, r0, #7
 80025e8:	6426      	str	r6, [r4, #64]	; 0x40
  ch.tm.offset = tm.last;
 80025ea:	9806      	ldr	r0, [sp, #24]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80025ec:	2640      	movs	r6, #64	; 0x40
 80025ee:	9301      	str	r3, [sp, #4]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80025f0:	9a03      	ldr	r2, [sp, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80025f2:	9b02      	ldr	r3, [sp, #8]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80025f4:	6366      	str	r6, [r4, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80025f6:	66a6      	str	r6, [r4, #104]	; 0x68
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025f8:	6966      	ldr	r6, [r4, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80025fa:	f101 0e10 	add.w	lr, r1, #16
 80025fe:	6720      	str	r0, [r4, #112]	; 0x70
 8002600:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002604:	f8c1 e010 	str.w	lr, [r1, #16]
  tqp->p_prev = (thread_t *)tqp;
 8002608:	f8c1 e014 	str.w	lr, [r1, #20]
 800260c:	618b      	str	r3, [r1, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800260e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002612:	6663      	str	r3, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002614:	6623      	str	r3, [r4, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002616:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800261a:	6463      	str	r3, [r4, #68]	; 0x44
  REG_INSERT(tp);
 800261c:	63e4      	str	r4, [r4, #60]	; 0x3c
 800261e:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80026e4 <main+0x374>
 8002622:	6130      	str	r0, [r6, #16]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8002624:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80026e8 <main+0x378>
 8002628:	6160      	str	r0, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800262a:	61a0      	str	r0, [r4, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800262c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002630:	6520      	str	r0, [r4, #80]	; 0x50
 8002632:	4820      	ldr	r0, [pc, #128]	; (80026b4 <main+0x344>)
 8002634:	f8c1 e000 	str.w	lr, [r1]
 8002638:	f02c 0c07 	bic.w	ip, ip, #7
  default_heap.h_free.h.u.next = NULL;
 800263c:	608b      	str	r3, [r1, #8]
  default_heap.h_free.h.size = 0;
 800263e:	60cb      	str	r3, [r1, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002640:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8002644:	6561      	str	r1, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 8002646:	65a1      	str	r1, [r4, #88]	; 0x58
 8002648:	f8c0 c000 	str.w	ip, [r0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800264c:	491a      	ldr	r1, [pc, #104]	; (80026b8 <main+0x348>)
 800264e:	9801      	ldr	r0, [sp, #4]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8002650:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8002654:	6008      	str	r0, [r1, #0]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002656:	2002      	movs	r0, #2
 8002658:	e048      	b.n	80026ec <main+0x37c>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	20000880 	.word	0x20000880
 8002668:	20000c68 	.word	0x20000c68
 800266c:	40012400 	.word	0x40012400
 8002670:	40020000 	.word	0x40020000
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011000 	.word	0x40011000
 8002680:	40011400 	.word	0x40011400
 8002684:	20000ca0 	.word	0x20000ca0
 8002688:	08003db0 	.word	0x08003db0
 800268c:	20000cd8 	.word	0x20000cd8
 8002690:	08003df8 	.word	0x08003df8
 8002694:	20000864 	.word	0x20000864
 8002698:	e0042000 	.word	0xe0042000
 800269c:	e000ed00 	.word	0xe000ed00
 80026a0:	05fa0300 	.word	0x05fa0300
 80026a4:	e000edf0 	.word	0xe000edf0
 80026a8:	20000f20 	.word	0x20000f20
 80026ac:	20005000 	.word	0x20005000
 80026b0:	20001070 	.word	0x20001070
 80026b4:	20000a0c 	.word	0x20000a0c
 80026b8:	20000a08 	.word	0x20000a08
 80026bc:	88884b88 	.word	0x88884b88
 80026c0:	888884b8 	.word	0x888884b8
 80026c4:	88888838 	.word	0x88888838
 80026c8:	88888844 	.word	0x88888844
 80026cc:	40011800 	.word	0x40011800
 80026d0:	20000884 	.word	0x20000884
 80026d4:	40005400 	.word	0x40005400
 80026d8:	40004400 	.word	0x40004400
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e0001000 	.word	0xe0001000
 80026e4:	08000321 	.word	0x08000321
 80026e8:	20001097 	.word	0x20001097
 80026ec:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80026f0:	b662      	cpsie	i
 80026f2:	49d1      	ldr	r1, [pc, #836]	; (8002a38 <main+0x6c8>)
 80026f4:	69a6      	ldr	r6, [r4, #24]
 80026f6:	61b1      	str	r1, [r6, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80026f8:	f388 8811 	msr	BASEPRI, r8

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80026fc:	f8df e378 	ldr.w	lr, [pc, #888]	; 8002a78 <main+0x708>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002700:	f8d4 c014 	ldr.w	ip, [r4, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002704:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002708:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800270c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002710:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002714:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002718:	f504 7196 	add.w	r1, r4, #300	; 0x12c
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800271c:	9301      	str	r3, [sp, #4]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800271e:	4bc7      	ldr	r3, [pc, #796]	; (8002a3c <main+0x6cc>)
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002720:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002724:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002728:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800272c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002730:	f104 0278 	add.w	r2, r4, #120	; 0x78

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002734:	f8c4 e12c 	str.w	lr, [r4, #300]	; 0x12c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002738:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800273c:	f104 0e9c 	add.w	lr, r4, #156	; 0x9c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002740:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002744:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002748:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800274c:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002750:	4610      	mov	r0, r2
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002752:	f8cc 2010 	str.w	r2, [ip, #16]
 8002756:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800275a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 800275e:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
 8002762:	6162      	str	r2, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002764:	f001 f8d4 	bl	8003910 <chSchWakeupS.constprop.46>
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800276e:	4bb4      	ldr	r3, [pc, #720]	; (8002a40 <main+0x6d0>)
 8002770:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002774:	f388 8811 	msr	BASEPRI, r8
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {

  if (uartp->state == UART_STOP) {
 8002778:	782b      	ldrb	r3, [r5, #0]

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800277a:	4ab2      	ldr	r2, [pc, #712]	; (8002a44 <main+0x6d4>)
 800277c:	2b01      	cmp	r3, #1
 800277e:	606a      	str	r2, [r5, #4]
 8002780:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8002a7c <main+0x70c>
 8002784:	f000 8373 	beq.w	8002e6e <main+0xafe>
 8002788:	f8d8 9010 	ldr.w	r9, [r8, #16]
 800278c:	f8d8 c014 	ldr.w	ip, [r8, #20]
 8002790:	f8d9 1000 	ldr.w	r1, [r9]
 8002794:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002798:	f8dc a000 	ldr.w	sl, [ip]
 800279c:	f8b2 e018 	ldrh.w	lr, [r2, #24]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 80027a0:	f8d1 8000 	ldr.w	r8, [r1]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 80027a4:	2000      	movs	r0, #0
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 80027a6:	f028 080f 	bic.w	r8, r8, #15
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 80027aa:	70a8      	strb	r0, [r5, #2]
  uartp->txstate = UART_TX_IDLE;
 80027ac:	7068      	strb	r0, [r5, #1]
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 80027ae:	f8c1 8000 	str.w	r8, [r1]
 80027b2:	f899 6008 	ldrb.w	r6, [r9, #8]
 80027b6:	f04f 080f 	mov.w	r8, #15
 80027ba:	f8d9 9004 	ldr.w	r9, [r9, #4]
 80027be:	fa08 f606 	lsl.w	r6, r8, r6
 80027c2:	f8c9 6000 	str.w	r6, [r9]
  dmaStreamDisable(uartp->dmatx);
 80027c6:	f8da 9000 	ldr.w	r9, [sl]
 80027ca:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80027ce:	f029 090f 	bic.w	r9, r9, #15
 80027d2:	f8ca 9000 	str.w	r9, [sl]
 80027d6:	f89c 9008 	ldrb.w	r9, [ip, #8]
    u->BRR = STM32_PCLK1 / uartp->config->speed;

  /* Resetting eventual pending status flags.*/
  (void)u->SR;  /* SR reset step 1.*/
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;
 80027da:	f04f 0a00 	mov.w	sl, #0
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
 80027de:	fa08 f809 	lsl.w	r8, r8, r9
 80027e2:	f8c6 8000 	str.w	r8, [r6]
#if STM32_HAS_USART6
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
#else
  if (uartp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 80027e6:	6956      	ldr	r6, [r2, #20]
  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
  dmaStreamDisable(uartp->dmatx);
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 80027e8:	8198      	strh	r0, [r3, #12]
  uartp->usart->CR2 = 0;
 80027ea:	8218      	strh	r0, [r3, #16]
  uartp->usart->CR3 = 0;
 80027ec:	8298      	strh	r0, [r3, #20]
#if STM32_HAS_USART6
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
#else
  if (uartp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 80027ee:	4896      	ldr	r0, [pc, #600]	; (8002a48 <main+0x6d8>)
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 80027f0:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8002a7c <main+0x70c>
#if STM32_HAS_USART6
  if ((uartp->usart == USART1) || (uartp->usart == USART6))
#else
  if (uartp->usart == USART1)
#endif
    u->BRR = STM32_PCLK2 / uartp->config->speed;
 80027f4:	fbb0 f0f6 	udiv	r0, r0, r6
 80027f8:	b280      	uxth	r0, r0
 80027fa:	8118      	strh	r0, [r3, #8]
static void set_rx_idle_loop(UARTDriver *uartp) {
  uint32_t mode;
  
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 80027fc:	68d0      	ldr	r0, [r2, #12]
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 80027fe:	f8b2 c01a 	ldrh.w	ip, [r2, #26]
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8002802:	2800      	cmp	r0, #0
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002804:	8b90      	ldrh	r0, [r2, #28]
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002806:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800280a:	68ea      	ldr	r2, [r5, #12]
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800280c:	f040 00c1 	orr.w	r0, r0, #193	; 0xc1
  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8002810:	bf0c      	ite	eq
 8002812:	f04f 0820 	moveq.w	r8, #32
 8002816:	f04f 0822 	movne.w	r8, #34	; 0x22
  (void)u->DR;  /* SR reset step 2.*/
  u->SR = 0;

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800281a:	fa1f fc8c 	uxth.w	ip, ip
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800281e:	b280      	uxth	r0, r0
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002820:	f44e 5e04 	orr.w	lr, lr, #8448	; 0x2100
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002824:	ea48 0202 	orr.w	r2, r8, r2
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002828:	f04e 0e0c 	orr.w	lr, lr, #12
    u->BRR = STM32_PCLK2 / uartp->config->speed;
  else
    u->BRR = STM32_PCLK1 / uartp->config->speed;

  /* Resetting eventual pending status flags.*/
  (void)u->SR;  /* SR reset step 1.*/
 800282c:	f8b3 8000 	ldrh.w	r8, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 8002830:	f8b3 8004 	ldrh.w	r8, [r3, #4]
  u->SR = 0;
 8002834:	f8a3 a000 	strh.w	sl, [r3]

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002838:	f8a3 c010 	strh.w	ip, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800283c:	8298      	strh	r0, [r3, #20]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800283e:	f109 0c18 	add.w	ip, r9, #24
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002842:	2001      	movs	r0, #1
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
  u->CR1 = uartp->config->cr1 | cr1;
 8002844:	f8a3 e00c 	strh.w	lr, [r3, #12]
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002848:	f8c1 c00c 	str.w	ip, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 800284c:	6048      	str	r0, [r1, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800284e:	600a      	str	r2, [r1, #0]
  dmaStreamEnable(uartp->dmarx);
 8002850:	680b      	ldr	r3, [r1, #0]
  uart_lld_start(uartp);
  uartp->state = UART_READY;
 8002852:	2202      	movs	r2, #2
 8002854:	4303      	orrs	r3, r0
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	702a      	strb	r2, [r5, #0]
 800285a:	f38a 8811 	msr	BASEPRI, sl
 800285e:	2320      	movs	r3, #32
 8002860:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002864:	696b      	ldr	r3, [r5, #20]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 8002866:	6869      	ldr	r1, [r5, #4]
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
  dmaStreamSetTransactionSize(uartp->dmatx, n);
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002868:	68ea      	ldr	r2, [r5, #12]
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800286a:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 800286c:	6849      	ldr	r1, [r1, #4]
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 800286e:	f8df e210 	ldr.w	lr, [pc, #528]	; 8002a80 <main+0x710>
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 8002872:	200d      	movs	r0, #13
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 8002874:	f042 0292 	orr.w	r2, r2, #146	; 0x92
 * @notapi
 */
void uart_lld_start_send(UARTDriver *uartp, size_t n, const void *txbuf) {

  /* TX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmatx, txbuf);
 8002878:	f8c3 e00c 	str.w	lr, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmatx, n);
 800287c:	6058      	str	r0, [r3, #4]
  dmaStreamSetMode(uartp->dmatx, uartp->dmamode    | STM32_DMA_CR_DIR_M2P |
 800287e:	601a      	str	r2, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Only enable TC interrupt if there's a callback attached to it.
     Also we need to clear TC flag which could be set before. */
  if (uartp->config->txend2_cb != NULL) {
 8002880:	b149      	cbz	r1, 8002896 <main+0x526>
    uartp->usart->SR = ~USART_SR_TC;
 8002882:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8002886:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800288a:	800a      	strh	r2, [r1, #0]
    uartp->usart->CR1 |= USART_CR1_TCIE;
 800288c:	898a      	ldrh	r2, [r1, #12]
 800288e:	b292      	uxth	r2, r2
 8002890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002894:	818a      	strh	r2, [r1, #12]
  }

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmatx);
 8002896:	681a      	ldr	r2, [r3, #0]
  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->txstate != UART_TX_ACTIVE, "tx active");

  uart_lld_start_send(uartp, n, txbuf);
  uartp->txstate = UART_TX_ACTIVE;
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f04f 0800 	mov.w	r8, #0
 80028a2:	7069      	strb	r1, [r5, #1]
 80028a4:	f388 8811 	msr	BASEPRI, r8
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80028a8:	4d68      	ldr	r5, [pc, #416]	; (8002a4c <main+0x6dc>)
 80028aa:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <main+0x6e0>)
 80028ac:	462b      	mov	r3, r5
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80028ae:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8002a84 <main+0x714>
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80028b2:	4868      	ldr	r0, [pc, #416]	; (8002a54 <main+0x6e4>)
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80028b4:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80028b8:	f843 2b04 	str.w	r2, [r3], #4
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80028bc:	f505 7e15 	add.w	lr, r5, #596	; 0x254
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80028c0:	f105 020c 	add.w	r2, r5, #12
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80028c4:	7229      	strb	r1, [r5, #8]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80028c6:	f8c5 8014 	str.w	r8, [r5, #20]
  iqp->q_buffer  = bp;
 80028ca:	f105 0154 	add.w	r1, r5, #84	; 0x54
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80028ce:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80028d2:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80028d6:	f505 79aa 	add.w	r9, r5, #340	; 0x154
 80028da:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80028de:	f8c5 901c 	str.w	r9, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80028e2:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80028e6:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80028ea:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80028ee:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80028f0:	652d      	str	r5, [r5, #80]	; 0x50
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80028f2:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 80028f6:	64e8      	str	r0, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80028f8:	606b      	str	r3, [r5, #4]
 80028fa:	60ea      	str	r2, [r5, #12]
  tqp->p_prev = (thread_t *)tqp;
 80028fc:	612a      	str	r2, [r5, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80028fe:	61a9      	str	r1, [r5, #24]
  iqp->q_rdptr   = bp;
 8002900:	6269      	str	r1, [r5, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8002902:	6229      	str	r1, [r5, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002904:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
  tqp->p_prev = (thread_t *)tqp;
 8002908:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
 800290c:	f04f 0920 	mov.w	r9, #32
 8002910:	f389 8811 	msr	BASEPRI, r9
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002914:	4a50      	ldr	r2, [pc, #320]	; (8002a58 <main+0x6e8>)
  sdup->state = SDU_READY;
 8002916:	2302      	movs	r3, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002918:	f8cb 502c 	str.w	r5, [fp, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800291c:	f8cb 5048 	str.w	r5, [fp, #72]	; 0x48
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
 8002920:	f8cb 5030 	str.w	r5, [fp, #48]	; 0x30
  }
  sdup->config = config;
 8002924:	f8c5 2254 	str.w	r2, [r5, #596]	; 0x254
  sdup->state = SDU_READY;
 8002928:	722b      	strb	r3, [r5, #8]
 800292a:	f388 8811 	msr	BASEPRI, r8

/*
 * Application entry point.
 */
void InitAdc(void) {
  palSetGroupMode(GPIOC, PAL_PORT_BIT(0) | PAL_PORT_BIT(1),
 800292e:	484b      	ldr	r0, [pc, #300]	; (8002a5c <main+0x6ec>)
 8002930:	2103      	movs	r1, #3
 8002932:	2205      	movs	r2, #5
 8002934:	f7ff fc94 	bl	8002260 <_pal_lld_setgroupmode>
 8002938:	f389 8811 	msr	BASEPRI, r9
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 800293c:	783b      	ldrb	r3, [r7, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
 800293e:	f8c7 8004 	str.w	r8, [r7, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002a88 <main+0x718>
 8002948:	f000 8279 	beq.w	8002e3e <main+0xace>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 800294c:	2302      	movs	r3, #2
 800294e:	703b      	strb	r3, [r7, #0]
 8002950:	f04f 0a00 	mov.w	sl, #0
 8002954:	f38a 8811 	msr	BASEPRI, sl
 8002958:	f04f 0820 	mov.w	r8, #32
 800295c:	f388 8811 	msr	BASEPRI, r8
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
 8002960:	f240 2011 	movw	r0, #529	; 0x211
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
void adc_lld_start_conversion(ADCDriver *adcp) {
  uint32_t mode, cr2;
  const ADCConversionGroup *grpp = adcp->grpp;

  /* DMA setup.*/
  mode = adcp->dmamode;
 8002966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8002968:	681b      	ldr	r3, [r3, #0]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 800296a:	493d      	ldr	r1, [pc, #244]	; (8002a60 <main+0x6f0>)
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 800296c:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002a8c <main+0x71c>
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8002970:	f04f 0c10 	mov.w	ip, #16
 8002974:	f8c7 c00c 	str.w	ip, [r7, #12]
  if (grpp->circular) {
    mode |= STM32_DMA_CR_CIRC;
    if (adcp->depth > 1) {
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
 8002978:	f042 0224 	orr.w	r2, r2, #36	; 0x24
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 800297c:	f04f 0c03 	mov.w	ip, #3
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002980:	f04f 0980 	mov.w	r9, #128	; 0x80
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8002984:	f8c7 e010 	str.w	lr, [r7, #16]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 8002988:	60b9      	str	r1, [r7, #8]
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
    }
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 800298a:	60d9      	str	r1, [r3, #12]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 800298c:	f887 c000 	strb.w	ip, [r7]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8002990:	f8c3 9004 	str.w	r9, [r3, #4]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
 8002994:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(adcp->dmastp);
 8002996:	6819      	ldr	r1, [r3, #0]

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 8002998:	6aba      	ldr	r2, [r7, #40]	; 0x28
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);
 800299a:	f041 0101 	orr.w	r1, r1, #1
 800299e:	6019      	str	r1, [r3, #0]
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 80029a0:	4f30      	ldr	r7, [pc, #192]	; (8002a64 <main+0x6f4>)
  adcp->adc->SMPR1 = grpp->smpr1;
 80029a2:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8002a90 <main+0x720>
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
  adcp->adc->SQR2  = grpp->sqr2;
  adcp->adc->SQR3  = grpp->sqr3;
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <main+0x6f8>)
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
 80029a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ac:	6051      	str	r1, [r2, #4]
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
  adcp->adc->SMPR1 = grpp->smpr1;
  adcp->adc->SMPR2 = grpp->smpr2;
  adcp->adc->SQR1  = grpp->sqr1;
 80029ae:	f44f 01e0 	mov.w	r1, #7340032	; 0x700000
  /* ADC setup.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_SCAN;
  cr2 = grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  if ((cr2 & (ADC_CR2_EXTTRIG | ADC_CR2_JEXTTRIG)) == 0)
    cr2 |= ADC_CR2_CONT;
  adcp->adc->CR2   = grpp->cr2 | cr2;
 80029b2:	6097      	str	r7, [r2, #8]
  adcp->adc->SMPR1 = grpp->smpr1;
 80029b4:	f8c2 e00c 	str.w	lr, [r2, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
 80029b8:	f8c2 a010 	str.w	sl, [r2, #16]
  adcp->adc->SQR1  = grpp->sqr1;
 80029bc:	62d1      	str	r1, [r2, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
 80029be:	6310      	str	r0, [r2, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
 80029c0:	6353      	str	r3, [r2, #52]	; 0x34

  /* ADC start by writing ADC_CR2_ADON a second time.*/
  adcp->adc->CR2   = cr2;
 80029c2:	6097      	str	r7, [r2, #8]
 80029c4:	f38a 8811 	msr	BASEPRI, sl
#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define USB2SER_WA_SIZE    THD_WORKING_AREA_SIZE(512)

void initI2C(void)
{
  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);     /* SCK. */
 80029c8:	4828      	ldr	r0, [pc, #160]	; (8002a6c <main+0x6fc>)
 80029ca:	2140      	movs	r1, #64	; 0x40
 80029cc:	2211      	movs	r2, #17
 80029ce:	f7ff fc47 	bl	8002260 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);     /* SCK. */
 80029d2:	4649      	mov	r1, r9
 80029d4:	4825      	ldr	r0, [pc, #148]	; (8002a6c <main+0x6fc>)
 80029d6:	2211      	movs	r2, #17
 80029d8:	f7ff fc42 	bl	8002260 <_pal_lld_setgroupmode>
 80029dc:	f388 8811 	msr	BASEPRI, r8
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <main+0x700>)
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80029e2:	4823      	ldr	r0, [pc, #140]	; (8002a70 <main+0x700>)
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80029e4:	f893 c000 	ldrb.w	ip, [r3]
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <main+0x704>)
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80029ea:	219a      	movs	r1, #154	; 0x9a
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80029ec:	238a      	movs	r3, #138	; 0x8a
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80029ee:	f1bc 0f01 	cmp.w	ip, #1
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80029f2:	6281      	str	r1, [r0, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80029f4:	6243      	str	r3, [r0, #36]	; 0x24
 80029f6:	6042      	str	r2, [r0, #4]
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80029f8:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 80029fc:	4607      	mov	r7, r0
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80029fe:	f000 81e3 	beq.w	8002dc8 <main+0xa58>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002a02:	4641      	mov	r1, r8
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <main+0x700>)
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8002a06:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002a0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002a0e:	f8d0 9000 	ldr.w	r9, [r0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002a12:	f8d3 c000 	ldr.w	ip, [r3]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002a16:	f108 0010 	add.w	r0, r8, #16
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002a1a:	f44f 6710 	mov.w	r7, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
 8002a1e:	2300      	movs	r3, #0
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8002a20:	f8c9 0008 	str.w	r0, [r9, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002a24:	f8cc 0008 	str.w	r0, [ip, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8002a28:	f8a8 e000 	strh.w	lr, [r8]
  dp->CR1 = 0;
 8002a2c:	f8a8 3000 	strh.w	r3, [r8]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002a30:	f8a8 7004 	strh.w	r7, [r8, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002a34:	8888      	ldrh	r0, [r1, #4]
 8002a36:	e02d      	b.n	8002a94 <main+0x724>
 8002a38:	08003e20 	.word	0x08003e20
 8002a3c:	08000211 	.word	0x08000211
 8002a40:	08003e78 	.word	0x08003e78
 8002a44:	20000808 	.word	0x20000808
 8002a48:	02255100 	.word	0x02255100
 8002a4c:	20000a10 	.word	0x20000a10
 8002a50:	08003d80 	.word	0x08003d80
 8002a54:	080004c1 	.word	0x080004c1
 8002a58:	08003da0 	.word	0x08003da0
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	20000908 	.word	0x20000908
 8002a64:	00800103 	.word	0x00800103
 8002a68:	16a5a96a 	.word	0x16a5a96a
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	20000cd8 	.word	0x20000cd8
 8002a74:	08003ef0 	.word	0x08003ef0
 8002a78:	08000401 	.word	0x08000401
 8002a7c:	20000864 	.word	0x20000864
 8002a80:	08003e80 	.word	0x08003e80
 8002a84:	08000b41 	.word	0x08000b41
 8002a88:	20000ca0 	.word	0x20000ca0
 8002a8c:	08003d50 	.word	0x08003d50
 8002a90:	00fc0024 	.word	0x00fc0024
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 8002a94:	6857      	ldr	r7, [r2, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002a96:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002a9a:	0400      	lsls	r0, r0, #16
 8002a9c:	0c00      	lsrs	r0, r0, #16
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8002a9e:	f892 e008 	ldrb.w	lr, [r2, #8]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002aa2:	8088      	strh	r0, [r1, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002aa4:	8888      	ldrh	r0, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002aa6:	f8df c314 	ldr.w	ip, [pc, #788]	; 8002dbc <main+0xa4c>
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002aaa:	b280      	uxth	r0, r0
 8002aac:	f040 0024 	orr.w	r0, r0, #36	; 0x24

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002ab0:	4567      	cmp	r7, ip
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002ab2:	8088      	strh	r0, [r1, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002ab4:	f340 815d 	ble.w	8002d72 <main+0xa02>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8002ab8:	48b2      	ldr	r0, [pc, #712]	; (8002d84 <main+0xa14>)
 8002aba:	4287      	cmp	r7, r0
 8002abc:	dc0b      	bgt.n	8002ad6 <main+0x766>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8002abe:	f1be 0f02 	cmp.w	lr, #2
 8002ac2:	f000 821f 	beq.w	8002f04 <main+0xb94>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8002ac6:	f1be 0f03 	cmp.w	lr, #3
 8002aca:	f000 820e 	beq.w	8002eea <main+0xb7a>
 8002ace:	f648 73ff 	movw	r3, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8002ad2:	200b      	movs	r0, #11
 8002ad4:	8408      	strh	r0, [r1, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8002ad6:	838b      	strh	r3, [r1, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8002ad8:	7812      	ldrb	r2, [r2, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8002ada:	880b      	ldrh	r3, [r1, #0]
  switch (opmode) {
 8002adc:	2a02      	cmp	r2, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8002ade:	b29b      	uxth	r3, r3
  switch (opmode) {
 8002ae0:	f000 8141 	beq.w	8002d66 <main+0x9f6>
 8002ae4:	2a03      	cmp	r2, #3
 8002ae6:	f000 813b 	beq.w	8002d60 <main+0x9f0>
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	f000 8134 	beq.w	8002d58 <main+0x9e8>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8002af0:	800b      	strh	r3, [r1, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002af2:	f8b8 3000 	ldrh.w	r3, [r8]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 8002af6:	2202      	movs	r2, #2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8a8 3000 	strh.w	r3, [r8]
 8002b02:	4ba1      	ldr	r3, [pc, #644]	; (8002d88 <main+0xa18>)
 8002b04:	2700      	movs	r7, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	f387 8811 	msr	BASEPRI, r7
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8002b0c:	4b9f      	ldr	r3, [pc, #636]	; (8002d8c <main+0xa1c>)
 8002b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b12:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8002b14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b18:	f7fe fd1a 	bl	8001550 <chThdSleep>
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	489b      	ldr	r0, [pc, #620]	; (8002d90 <main+0xa20>)
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8002b24:	4b9b      	ldr	r3, [pc, #620]	; (8002d94 <main+0xa24>)
 8002b26:	4602      	mov	r2, r0
 8002b28:	f100 0820 	add.w	r8, r0, #32
 8002b2c:	f8cb 3004 	str.w	r3, [fp, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002b30:	f842 7f04 	str.w	r7, [r2, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b34:	4542      	cmp	r2, r8
    usbp->epc[i] = NULL;
 8002b36:	f04f 0300 	mov.w	r3, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002b3a:	d1f9      	bne.n	8002b30 <main+0x7c0>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8002b3c:	f89b e000 	ldrb.w	lr, [fp]
 8002b40:	4a95      	ldr	r2, [pc, #596]	; (8002d98 <main+0xa28>)
 8002b42:	f1be 0f01 	cmp.w	lr, #1
 8002b46:	f000 80d0 	beq.w	8002cea <main+0x97a>
    usbp->epc[i] = NULL;
  }
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8002b4a:	2002      	movs	r0, #2
 8002b4c:	f88b 0000 	strb.w	r0, [fp]
 8002b50:	2600      	movs	r6, #0
 8002b52:	f386 8811 	msr	BASEPRI, r6
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8002b56:	4a8d      	ldr	r2, [pc, #564]	; (8002d8c <main+0xa1c>)
 8002b58:	4b90      	ldr	r3, [pc, #576]	; (8002d9c <main+0xa2c>)
 8002b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b5e:	6151      	str	r1, [r2, #20]
 8002b60:	2720      	movs	r7, #32
 8002b62:	601b      	str	r3, [r3, #0]
 8002b64:	f387 8811 	msr	BASEPRI, r7

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002b68:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <main+0xa30>)
 8002b6a:	f8df c254 	ldr.w	ip, [pc, #596]	; 8002dc0 <main+0xa50>
 8002b6e:	4a8d      	ldr	r2, [pc, #564]	; (8002da4 <main+0xa34>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002b70:	f8d4 8014 	ldr.w	r8, [r4, #20]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002b74:	f04f 0e01 	mov.w	lr, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002b78:	2140      	movs	r1, #64	; 0x40

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002b7a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002b7e:	f8c3 c124 	str.w	ip, [r3, #292]	; 0x124
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002b82:	f883 e01e 	strb.w	lr, [r3, #30]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002b86:	f103 0228 	add.w	r2, r3, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002b8a:	f503 7c92 	add.w	ip, r3, #292	; 0x124
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002b8e:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002b92:	7718      	strb	r0, [r3, #28]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002b94:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8002b98:	775e      	strb	r6, [r3, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002b9a:	639e      	str	r6, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8002b9c:	635e      	str	r6, [r3, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002b9e:	619e      	str	r6, [r3, #24]
  REG_INSERT(tp);
 8002ba0:	611c      	str	r4, [r3, #16]
 8002ba2:	f8c3 8014 	str.w	r8, [r3, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002ba6:	63d9      	str	r1, [r3, #60]	; 0x3c
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002ba8:	4618      	mov	r0, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002baa:	f8c8 3010 	str.w	r3, [r8, #16]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002bae:	f8c3 c00c 	str.w	ip, [r3, #12]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002bb2:	6099      	str	r1, [r3, #8]
 8002bb4:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002bbc:	6163      	str	r3, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002bbe:	f000 fea7 	bl	8003910 <chSchWakeupS.constprop.46>
 8002bc2:	f386 8811 	msr	BASEPRI, r6

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
  thread_t *shelltp = NULL;
 8002bc6:	4634      	mov	r4, r6
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8002bc8:	b144      	cbz	r4, 8002bdc <main+0x86c>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8002bca:	7f23      	ldrb	r3, [r4, #28]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d014      	beq.n	8002bfa <main+0x88a>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 8002bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bd4:	f7fe fcbc 	bl	8001550 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8002bd8:	2c00      	cmp	r4, #0
 8002bda:	d1f6      	bne.n	8002bca <main+0x85a>
 8002bdc:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d1f0      	bne.n	8002bca <main+0x85a>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8002be8:	f640 00c8 	movw	r0, #2248	; 0x8c8
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <main+0xa38>)
 8002bf0:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <main+0xa3c>)
 8002bf2:	f000 fec5 	bl	8003980 <chThdCreateFromHeap.constprop.38>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	e7ea      	b.n	8002bd0 <main+0x860>
 8002bfa:	f387 8811 	msr	BASEPRI, r7
void chThdRelease(thread_t *tp) {
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8002bfe:	7fa6      	ldrb	r6, [r4, #30]
 8002c00:	2300      	movs	r3, #0
 8002c02:	3e01      	subs	r6, #1
 8002c04:	b2f6      	uxtb	r6, r6
 8002c06:	77a6      	strb	r6, [r4, #30]
 8002c08:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 8002c0c:	b9d6      	cbnz	r6, 8002c44 <main+0x8d4>
 8002c0e:	7f23      	ldrb	r3, [r4, #28]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d001      	beq.n	8002c18 <main+0x8a8>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8002c14:	4634      	mov	r4, r6
 8002c16:	e7db      	b.n	8002bd0 <main+0x860>
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8002c18:	7f63      	ldrb	r3, [r4, #29]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d012      	beq.n	8002c48 <main+0x8d8>
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d1f6      	bne.n	8002c14 <main+0x8a4>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002c26:	6921      	ldr	r1, [r4, #16]
 8002c28:	6962      	ldr	r2, [r4, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8002c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002c2c:	6111      	str	r1, [r2, #16]
 8002c2e:	6921      	ldr	r1, [r4, #16]
 8002c30:	614a      	str	r2, [r1, #20]
 8002c32:	f387 8811 	msr	BASEPRI, r7
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6022      	str	r2, [r4, #0]
  mp->mp_next = php;
 8002c3a:	601c      	str	r4, [r3, #0]
 8002c3c:	f386 8811 	msr	BASEPRI, r6
 8002c40:	4634      	mov	r4, r6
 8002c42:	e7c5      	b.n	8002bd0 <main+0x860>
 8002c44:	461c      	mov	r4, r3
 8002c46:	e7c3      	b.n	8002bd0 <main+0x860>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002c48:	6963      	ldr	r3, [r4, #20]
 8002c4a:	6922      	ldr	r2, [r4, #16]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 8002c4c:	f1a4 0808 	sub.w	r8, r4, #8
 8002c50:	611a      	str	r2, [r3, #16]
 8002c52:	6922      	ldr	r2, [r4, #16]
 8002c54:	6153      	str	r3, [r2, #20]
  /*lint -restore*/
  heapp = hp->h.u.heap;
 8002c56:	f854 3c08 	ldr.w	r3, [r4, #-8]
  qp = &heapp->h_free;
 8002c5a:	f103 0908 	add.w	r9, r3, #8

  H_LOCK(heapp);
 8002c5e:	f103 0a10 	add.w	sl, r3, #16
 8002c62:	f387 8811 	msr	BASEPRI, r7
 * @api
 */
void chMtxLock(mutex_t *mp) {

  chSysLock();
  chMtxLockS(mp);
 8002c66:	4650      	mov	r0, sl
 8002c68:	f7fe fa12 	bl	8001090 <chMtxLockS>
 8002c6c:	f386 8811 	msr	BASEPRI, r6

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002c70:	464b      	mov	r3, r9

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002c72:	4599      	cmp	r9, r3
 8002c74:	d004      	beq.n	8002c80 <main+0x910>
 8002c76:	4598      	cmp	r8, r3
 8002c78:	d802      	bhi.n	8002c80 <main+0x910>
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4599      	cmp	r9, r3
 8002c7e:	d1fa      	bne.n	8002c76 <main+0x906>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002c80:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002c82:	b11a      	cbz	r2, 8002c8c <main+0x91c>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002c84:	4590      	cmp	r8, r2
 8002c86:	d301      	bcc.n	8002c8c <main+0x91c>
 8002c88:	4613      	mov	r3, r2
 8002c8a:	e7f2      	b.n	8002c72 <main+0x902>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002c8c:	f854 1c04 	ldr.w	r1, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002c90:	f844 2c08 	str.w	r2, [r4, #-8]
      qp->h.u.next = hp;
 8002c94:	f8c3 8000 	str.w	r8, [r3]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002c98:	f101 0008 	add.w	r0, r1, #8
 8002c9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002ca0:	eb08 0600 	add.w	r6, r8, r0
 8002ca4:	4296      	cmp	r6, r2
 8002ca6:	d00a      	beq.n	8002cbe <main+0x94e>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	f101 0208 	add.w	r2, r1, #8
 8002cae:	441a      	add	r2, r3
 8002cb0:	4590      	cmp	r8, r2
 8002cb2:	d013      	beq.n	8002cdc <main+0x96c>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002cb4:	4650      	mov	r0, sl
 8002cb6:	f7fe f99b 	bl	8000ff0 <chMtxUnlock>
 8002cba:	2400      	movs	r4, #0
 8002cbc:	e788      	b.n	8002bd0 <main+0x860>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002cbe:	6876      	ldr	r6, [r6, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002cc0:	f858 2000 	ldr.w	r2, [r8, r0]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002cc4:	4431      	add	r1, r6
 8002cc6:	3108      	adds	r1, #8
 8002cc8:	f844 1c04 	str.w	r1, [r4, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002ccc:	6859      	ldr	r1, [r3, #4]
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002cce:	f844 2c08 	str.w	r2, [r4, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 8002cd2:	f101 0208 	add.w	r2, r1, #8
 8002cd6:	441a      	add	r2, r3
 8002cd8:	4590      	cmp	r8, r2
 8002cda:	d1eb      	bne.n	8002cb4 <main+0x944>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 8002cdc:	e914 0005 	ldmdb	r4, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002ce0:	440a      	add	r2, r1
 8002ce2:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002ce4:	e883 0005 	stmia.w	r3, {r0, r2}
 8002ce8:	e7e4      	b.n	8002cb4 <main+0x944>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002cea:	4699      	mov	r9, r3
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002cec:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8002dc4 <main+0xa54>
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002cf0:	492f      	ldr	r1, [pc, #188]	; (8002db0 <main+0xa40>)
 8002cf2:	f8dc 601c 	ldr.w	r6, [ip, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002cf6:	4f2f      	ldr	r7, [pc, #188]	; (8002db4 <main+0xa44>)
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8002cf8:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8002cfc:	f8a2 307c 	strh.w	r3, [r2, #124]	; 0x7c
  usbp->address       = 0;
 8002d00:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
  usbp->configuration = 0;
 8002d04:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
  usbp->transmitting  = 0;
 8002d08:	8113      	strh	r3, [r2, #8]
  usbp->receiving     = 0;
 8002d0a:	8153      	strh	r3, [r2, #10]
 8002d0c:	f8cc 601c 	str.w	r6, [ip, #28]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002d10:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002d14:	f04f 0cd0 	mov.w	ip, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8002d18:	f8c7 e040 	str.w	lr, [r7, #64]	; 0x40
 8002d1c:	f881 c313 	strb.w	ip, [r1, #787]	; 0x313
 8002d20:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002d24:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
 8002d28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002d2c:	600e      	str	r6, [r1, #0]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8002d2e:	2602      	movs	r6, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002d30:	f881 e314 	strb.w	lr, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002d34:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002d38:	f8c1 c000 	str.w	ip, [r1]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8002d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3e:	7016      	strb	r6, [r2, #0]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 8002d40:	f840 9f04 	str.w	r9, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002d44:	4540      	cmp	r0, r8
    usbp->epc[i] = NULL;
 8002d46:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8002d4a:	d1f9      	bne.n	8002d40 <main+0x9d0>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002d4c:	4812      	ldr	r0, [pc, #72]	; (8002d98 <main+0xa28>)
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002d4e:	f88b 3064 	strb.w	r3, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002d52:	f7ff f885 	bl	8001e60 <usb_lld_reset>
 8002d56:	e6f8      	b.n	8002b4a <main+0x7da>
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002d58:	f023 030a 	bic.w	r3, r3, #10
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	e6c7      	b.n	8002af0 <main+0x780>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002d60:	f043 030a 	orr.w	r3, r3, #10
 8002d64:	e6c4      	b.n	8002af0 <main+0x780>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8002d66:	f023 0308 	bic.w	r3, r3, #8
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	e6be      	b.n	8002af0 <main+0x780>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8002d72:	4811      	ldr	r0, [pc, #68]	; (8002db8 <main+0xa48>)
 8002d74:	007b      	lsls	r3, r7, #1
 8002d76:	fb90 f3f3 	sdiv	r3, r0, r3
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002d7a:	2025      	movs	r0, #37	; 0x25
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8002d80:	8408      	strh	r0, [r1, #32]
 8002d82:	e6a8      	b.n	8002ad6 <main+0x766>
 8002d84:	00061a80 	.word	0x00061a80
 8002d88:	20000cd8 	.word	0x20000cd8
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	2000088c 	.word	0x2000088c
 8002d94:	08003e10 	.word	0x08003e10
 8002d98:	20000884 	.word	0x20000884
 8002d9c:	20000cd4 	.word	0x20000cd4
 8002da0:	20000d10 	.word	0x20000d10
 8002da4:	08000211 	.word	0x08000211
 8002da8:	080031d1 	.word	0x080031d1
 8002dac:	08003ee0 	.word	0x08003ee0
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	40005c00 	.word	0x40005c00
 8002db8:	02255100 	.word	0x02255100
 8002dbc:	000186a0 	.word	0x000186a0
 8002dc0:	080022d1 	.word	0x080022d1
 8002dc4:	40021000 	.word	0x40021000

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002dc8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8002f30 <main+0xbc0>
 8002dcc:	f8cd c004 	str.w	ip, [sp, #4]
 8002dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002dd4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dda:	f8c9 3010 	str.w	r3, [r9, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002dde:	2105      	movs	r1, #5
 8002de0:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <main+0xbac>)
 8002de2:	463b      	mov	r3, r7

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002de4:	f8c9 a010 	str.w	sl, [r9, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002de8:	f7fd fbc2 	bl	8000570 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 8002dec:	2105      	movs	r1, #5
 8002dee:	4a4c      	ldr	r2, [pc, #304]	; (8002f20 <main+0xbb0>)
 8002df0:	463b      	mov	r3, r7
 8002df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df4:	f7fd fbbc 	bl	8000570 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8002df8:	f8d9 001c 	ldr.w	r0, [r9, #28]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <main+0xbb4>)
      b = dmaStreamAllocate(i2cp->dmatx,
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8002e02:	f440 1e00 	orr.w	lr, r0, #2097152	; 0x200000
 8002e06:	2050      	movs	r0, #80	; 0x50
 8002e08:	f8c9 e01c 	str.w	lr, [r9, #28]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002e0c:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8002e10:	f883 031f 	strb.w	r0, [r3, #799]	; 0x31f
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002e14:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002e18:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002e1c:	6279      	str	r1, [r7, #36]	; 0x24
 8002e1e:	f8c3 e180 	str.w	lr, [r3, #384]	; 0x180
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002e22:	62ba      	str	r2, [r7, #40]	; 0x28
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002e24:	f8c3 e000 	str.w	lr, [r3]
 8002e28:	687a      	ldr	r2, [r7, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002e2a:	f883 0320 	strb.w	r0, [r3, #800]	; 0x320
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002e2e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002e32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e34:	f8c3 c184 	str.w	ip, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002e38:	f8c3 c004 	str.w	ip, [r3, #4]
 8002e3c:	e5e2      	b.n	8002a04 <main+0x694>
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8002e3e:	2106      	movs	r1, #6
 8002e40:	4a39      	ldr	r2, [pc, #228]	; (8002f28 <main+0xbb8>)
 8002e42:	464b      	mov	r3, r9
 8002e44:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002e48:	f7fd fb92 	bl	8000570 <dmaStreamAllocate>
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002e4c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8002e50:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <main+0xbbc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
      rccEnableADC1(FALSE);
 8002e54:	4936      	ldr	r1, [pc, #216]	; (8002f30 <main+0xbc0>)
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
 8002e56:	609a      	str	r2, [r3, #8]
      rccEnableADC1(FALSE);
 8002e58:	698b      	ldr	r3, [r1, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 8002e5a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
                            STM32_ADC_ADC1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
      rccEnableADC1(FALSE);
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	618b      	str	r3, [r1, #24]
    }
#endif

    /* ADC setup, the calibration procedure has already been performed
       during initialization.*/
    adcp->adc->CR1 = 0;
 8002e64:	f8c2 8004 	str.w	r8, [r2, #4]
    adcp->adc->CR2 = 0;
 8002e68:	f8c2 8008 	str.w	r8, [r2, #8]
 8002e6c:	e56e      	b.n	800294c <main+0x5dc>
#endif

#if STM32_UART_USE_USART2
    if (&UARTD2 == uartp) {
      bool b;
      b = dmaStreamAllocate(uartp->dmarx,
 8002e6e:	210c      	movs	r1, #12
 8002e70:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <main+0xbc4>)
 8002e72:	4643      	mov	r3, r8
 8002e74:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8002e78:	f7fd fb7a 	bl	8000570 <dmaStreamAllocate>
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(uartp->dmatx,
 8002e7c:	210c      	movs	r1, #12
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <main+0xbc8>)
 8002e80:	4643      	mov	r3, r8
 8002e82:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8002e86:	f7fd fb73 	bl	8000570 <dmaStreamAllocate>
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableUSART2(FALSE);
 8002e8a:	f8da 301c 	ldr.w	r3, [sl, #28]
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002e8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8002e92:	21c0      	movs	r1, #192	; 0xc0
      b = dmaStreamAllocate(uartp->dmatx,
                            STM32_UART_USART2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                            (void *)uartp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableUSART2(FALSE);
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e98:	f8ca 301c 	str.w	r3, [sl, #28]
 8002e9c:	f889 1326 	strb.w	r1, [r9, #806]	; 0x326
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002ea0:	f8b2 e018 	ldrh.w	lr, [r2, #24]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8002ea4:	2340      	movs	r3, #64	; 0x40
 8002ea6:	f8c9 3184 	str.w	r3, [r9, #388]	; 0x184
 8002eaa:	f40e 53a0 	and.w	r3, lr, #5120	; 0x1400
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	f8c9 1004 	str.w	r1, [r9, #4]
 8002eb8:	d105      	bne.n	8002ec6 <main+0xb56>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002ebe:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002ec2:	f8c8 300c 	str.w	r3, [r8, #12]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002ec6:	f8d5 9010 	ldr.w	r9, [r5, #16]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002eca:	f8d5 c014 	ldr.w	ip, [r5, #20]

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002ece:	68ab      	ldr	r3, [r5, #8]
 8002ed0:	f8d9 1000 	ldr.w	r1, [r9]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002ed4:	f8dc a000 	ldr.w	sl, [ip]

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002ed8:	1d18      	adds	r0, r3, #4
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
 8002eda:	f04f 0800 	mov.w	r8, #0

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8002ede:	6088      	str	r0, [r1, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8002ee0:	f8ca 0008 	str.w	r0, [sl, #8]
    uartp->rxbuf = 0;
 8002ee4:	f8a5 8018 	strh.w	r8, [r5, #24]
 8002ee8:	e45a      	b.n	80027a0 <main+0x430>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002eea:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8002eee:	4813      	ldr	r0, [pc, #76]	; (8002f3c <main+0xbcc>)
 8002ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ef4:	fb90 f3f3 	sdiv	r3, r0, r3
 8002ef8:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8002efc:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	e5e6      	b.n	8002ad2 <main+0x762>

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <main+0xbcc>)
 8002f06:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8002f0a:	fb90 f3f3 	sdiv	r3, r0, r3
 8002f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	e5db      	b.n	8002ad2 <main+0x762>
 8002f1a:	bf00      	nop
 8002f1c:	08001ac1 	.word	0x08001ac1
 8002f20:	08001691 	.word	0x08001691
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	08001b31 	.word	0x08001b31
 8002f2c:	4001244c 	.word	0x4001244c
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08001601 	.word	0x08001601
 8002f38:	080015b1 	.word	0x080015b1
 8002f3c:	02255100 	.word	0x02255100

08002f40 <get_descriptor.lto_priv.59>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8002f40:	2902      	cmp	r1, #2
 8002f42:	d006      	beq.n	8002f52 <get_descriptor.lto_priv.59+0x12>
 8002f44:	2903      	cmp	r1, #3
 8002f46:	d006      	beq.n	8002f56 <get_descriptor.lto_priv.59+0x16>
 8002f48:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 8002f4a:	4806      	ldr	r0, [pc, #24]	; (8002f64 <get_descriptor.lto_priv.59+0x24>)
 8002f4c:	bf18      	it	ne
 8002f4e:	2000      	movne	r0, #0
 8002f50:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <get_descriptor.lto_priv.59+0x28>)
 8002f54:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8002f56:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8002f58:	bf9a      	itte	ls
 8002f5a:	4b04      	ldrls	r3, [pc, #16]	; (8002f6c <get_descriptor.lto_priv.59+0x2c>)
 8002f5c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8002f60:	2000      	movhi	r0, #0
}
 8002f62:	4770      	bx	lr
 8002f64:	08004370 	.word	0x08004370
 8002f68:	08003f40 	.word	0x08003f40
 8002f6c:	08004350 	.word	0x08004350

08002f70 <adcerrorcallback.lto_priv.61>:
  else {
    ny += n;
  }
}

static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
	...

08002f80 <adccallback.lto_priv.60>:
 */
size_t nx = 0, ny = 0;
static void adccallback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {

  (void)adcp;
  if (samples2 == buffer) {
 8002f80:	4804      	ldr	r0, [pc, #16]	; (8002f94 <adccallback.lto_priv.60+0x14>)
 8002f82:	4288      	cmp	r0, r1
    nx += n;
 8002f84:	bf0c      	ite	eq
 8002f86:	4904      	ldreq	r1, [pc, #16]	; (8002f98 <adccallback.lto_priv.60+0x18>)
  }
  else {
    ny += n;
 8002f88:	4904      	ldrne	r1, [pc, #16]	; (8002f9c <adccallback.lto_priv.60+0x1c>)
 8002f8a:	680b      	ldr	r3, [r1, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000908 	.word	0x20000908
 8002f98:	20000f14 	.word	0x20000f14
 8002f9c:	20000f18 	.word	0x20000f18

08002fa0 <rxend.lto_priv.72>:
}

/*
 * This callback is invoked when a receive buffer has been completely written.
 */
static void rxend(UARTDriver *uartp) {
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
	...

08002fb0 <rxerr.lto_priv.74>:

/*
 * This callback is invoked on a receive error, the errors mask is passed
 * as parameter.
 */
static void rxerr(UARTDriver *uartp, uartflags_t e) {
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
	...

08002fc0 <txend2.lto_priv.71>:
}

/*
 * This callback is invoked when a transmission has physically completed.
 */
static void txend2(UARTDriver *uartp) {
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
	...

08002fd0 <txend1.lto_priv.70>:

/*
 * This callback is invoked when a transmission buffer has been completely
 * read by the driver.
 */
static void txend1(UARTDriver *uartp) {
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
	...

08002fe0 <usb_event.lto_priv.58>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8002fe0:	2902      	cmp	r1, #2
 8002fe2:	d149      	bne.n	8003078 <usb_event.lto_priv.58+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	460d      	mov	r5, r1
 8002fea:	2320      	movs	r3, #32
 8002fec:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8002ff0:	4c22      	ldr	r4, [pc, #136]	; (800307c <usb_event.lto_priv.58+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4a22      	ldr	r2, [pc, #136]	; (8003080 <usb_event.lto_priv.58+0xa0>)
 8002ff6:	f7fd fde3 	bl	8000bc0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	4a21      	ldr	r2, [pc, #132]	; (8003084 <usb_event.lto_priv.58+0xa4>)
 8003000:	f7fd fdde 	bl	8000bc0 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8003004:	69a3      	ldr	r3, [r4, #24]
 8003006:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800300a:	f104 070c 	add.w	r7, r4, #12

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800300e:	2500      	movs	r5, #0
 8003010:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003012:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
 8003014:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 8003016:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003018:	f06f 0101 	mvn.w	r1, #1

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800301c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800301e:	f7fd ffa7 	bl	8000f70 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8003022:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8003024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8003026:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeX(oqp);
 8003028:	1a9b      	subs	r3, r3, r2
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 800302a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeX(oqp);
 800302c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800302e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003032:	f06f 0101 	mvn.w	r1, #1
 8003036:	f7fd ff9b 	bl	8000f70 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800303a:	1d20      	adds	r0, r4, #4
 800303c:	2101      	movs	r1, #1
 800303e:	f7fd fecf 	bl	8000de0 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8003042:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 8003046:	2201      	movs	r2, #1
 8003048:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800304a:	4630      	mov	r0, r6
 800304c:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8003050:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8003052:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003056:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = true;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8003058:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = true;
 800305c:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 800305e:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8003060:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003062:	f7fe fe7d 	bl	8001d60 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  (void) usbStartReceiveI(usbp, sdup->config->bulk_out);
 8003066:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800306a:	4630      	mov	r0, r6
 800306c:	7959      	ldrb	r1, [r3, #5]
 800306e:	f7fd facf 	bl	8000610 <usbStartReceiveI>
 8003072:	f385 8811 	msr	BASEPRI, r5
 8003076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000a10 	.word	0x20000a10
 8003080:	08003f00 	.word	0x08003f00
 8003084:	08003f50 	.word	0x08003f50
	...

08003090 <rxchar.lto_priv.73>:
 */
static void rxchar(UARTDriver *uartp, uint16_t c) {

  (void)uartp;
  (void)c;
  chEvtSignal(process_tp,(eventmask_t)REC_DATA_UART);
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <rxchar.lto_priv.73+0x38>)

/*
 * This callback is invoked when a character is received but the application
 * was not ready to receive it, the character is passed as parameter.
 */
static void rxchar(UARTDriver *uartp, uint16_t c) {
 8003092:	b510      	push	{r4, lr}

  (void)uartp;
  (void)c;
  chEvtSignal(process_tp,(eventmask_t)REC_DATA_UART);
 8003094:	6818      	ldr	r0, [r3, #0]

/*
 * This callback is invoked when a character is received but the application
 * was not ready to receive it, the character is passed as parameter.
 */
static void rxchar(UARTDriver *uartp, uint16_t c) {
 8003096:	460c      	mov	r4, r1
 8003098:	2320      	movs	r3, #32
 800309a:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 800309e:	2101      	movs	r1, #1
 80030a0:	f7fd fe86 	bl	8000db0 <chEvtSignalI>
  chSchRescheduleS();
 80030a4:	f7fd ff94 	bl	8000fd0 <chSchRescheduleS>
 80030a8:	2300      	movs	r3, #0
 80030aa:	f383 8811 	msr	BASEPRI, r3
static curcbuff_t cb={0,0,{0}};


void store_in_buffer(uint8_t data)
{
  uint8_t next = (uint8_t)(cb.head + 1) % MAX_CB_LEN;
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <rxchar.lto_priv.73+0x3c>)

  (void)uartp;
  (void)c;
  chEvtSignal(process_tp,(eventmask_t)REC_DATA_UART);
  store_in_buffer(c);
 80030b0:	b2e4      	uxtb	r4, r4
 80030b2:	7810      	ldrb	r0, [r2, #0]
  if (next != cb.tail)
 80030b4:	7851      	ldrb	r1, [r2, #1]
static curcbuff_t cb={0,0,{0}};


void store_in_buffer(uint8_t data)
{
  uint8_t next = (uint8_t)(cb.head + 1) % MAX_CB_LEN;
 80030b6:	1c43      	adds	r3, r0, #1
 80030b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  if (next != cb.tail)
 80030bc:	4299      	cmp	r1, r3
 80030be:	d002      	beq.n	80030c6 <rxchar.lto_priv.73+0x36>
  {
      cb.dat[cb.head] = data;
 80030c0:	4410      	add	r0, r2
 80030c2:	7084      	strb	r4, [r0, #2]
      cb.head = next;
 80030c4:	7013      	strb	r3, [r2, #0]
 80030c6:	bd10      	pop	{r4, pc}
 80030c8:	20000f1c 	.word	0x20000f1c
 80030cc:	20000e58 	.word	0x20000e58

080030d0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80030d0:	2900      	cmp	r1, #0
 80030d2:	dd03      	ble.n	80030dc <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80030d4:	4908      	ldr	r1, [pc, #32]	; (80030f8 <cmd_systime+0x28>)
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <cmd_systime+0x2c>)
 80030d8:	f7fe bdaa 	b.w	8001c30 <chprintf.lto_priv.79>
 80030dc:	2320      	movs	r3, #32
 80030de:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80030e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e8:	2300      	movs	r3, #0
 80030ea:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80030ee:	4904      	ldr	r1, [pc, #16]	; (8003100 <cmd_systime+0x30>)
 80030f0:	b292      	uxth	r2, r2
 80030f2:	f7fe bd9d 	b.w	8001c30 <chprintf.lto_priv.79>
 80030f6:	bf00      	nop
 80030f8:	08003ff0 	.word	0x08003ff0
 80030fc:	08003ffc 	.word	0x08003ffc
 8003100:	08004004 	.word	0x08004004
	...

08003110 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8003110:	2900      	cmp	r1, #0
 8003112:	dd03      	ble.n	800311c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8003114:	4919      	ldr	r1, [pc, #100]	; (800317c <cmd_info+0x6c>)
 8003116:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <cmd_info+0x70>)
 8003118:	f7fe bd8a 	b.w	8001c30 <chprintf.lto_priv.79>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <cmd_info+0x74>)
 8003124:	4a18      	ldr	r2, [pc, #96]	; (8003188 <cmd_info+0x78>)
 8003126:	f7fe fd83 	bl	8001c30 <chprintf.lto_priv.79>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 800312a:	4620      	mov	r0, r4
 800312c:	4917      	ldr	r1, [pc, #92]	; (800318c <cmd_info+0x7c>)
 800312e:	4a18      	ldr	r2, [pc, #96]	; (8003190 <cmd_info+0x80>)
 8003130:	f7fe fd7e 	bl	8001c30 <chprintf.lto_priv.79>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8003134:	4620      	mov	r0, r4
 8003136:	4917      	ldr	r1, [pc, #92]	; (8003194 <cmd_info+0x84>)
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <cmd_info+0x88>)
 800313a:	f7fe fd79 	bl	8001c30 <chprintf.lto_priv.79>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800313e:	4620      	mov	r0, r4
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <cmd_info+0x8c>)
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <cmd_info+0x90>)
 8003144:	f7fe fd74 	bl	8001c30 <chprintf.lto_priv.79>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8003148:	4620      	mov	r0, r4
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <cmd_info+0x94>)
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <cmd_info+0x98>)
 800314e:	f7fe fd6f 	bl	8001c30 <chprintf.lto_priv.79>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8003152:	4620      	mov	r0, r4
 8003154:	4915      	ldr	r1, [pc, #84]	; (80031ac <cmd_info+0x9c>)
 8003156:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <cmd_info+0xa0>)
 8003158:	f7fe fd6a 	bl	8001c30 <chprintf.lto_priv.79>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800315c:	4620      	mov	r0, r4
 800315e:	4915      	ldr	r1, [pc, #84]	; (80031b4 <cmd_info+0xa4>)
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <cmd_info+0xa8>)
 8003162:	f7fe fd65 	bl	8001c30 <chprintf.lto_priv.79>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <cmd_info+0xac>)
 8003168:	4620      	mov	r0, r4
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4914      	ldr	r1, [pc, #80]	; (80031c0 <cmd_info+0xb0>)
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <cmd_info+0xb4>)
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <cmd_info+0xb8>)
 8003172:	f7fe fd5d 	bl	8001c30 <chprintf.lto_priv.79>
#endif
#endif
}
 8003176:	b002      	add	sp, #8
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	08003ff0 	.word	0x08003ff0
 8003180:	0800400c 	.word	0x0800400c
 8003184:	08004014 	.word	0x08004014
 8003188:	08004028 	.word	0x08004028
 800318c:	08004030 	.word	0x08004030
 8003190:	08004044 	.word	0x08004044
 8003194:	0800408c 	.word	0x0800408c
 8003198:	080040a0 	.word	0x080040a0
 800319c:	080040a8 	.word	0x080040a8
 80031a0:	080040bc 	.word	0x080040bc
 80031a4:	080040c8 	.word	0x080040c8
 80031a8:	080040dc 	.word	0x080040dc
 80031ac:	080040f4 	.word	0x080040f4
 80031b0:	08004108 	.word	0x08004108
 80031b4:	08004134 	.word	0x08004134
 80031b8:	08004148 	.word	0x08004148
 80031bc:	08004184 	.word	0x08004184
 80031c0:	0800415c 	.word	0x0800415c
 80031c4:	08004174 	.word	0x08004174
 80031c8:	08004180 	.word	0x08004180
 80031cc:	00000000 	.word	0x00000000

080031d0 <shell_thread.lto_priv.47>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80031d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 80031d4:	4b79      	ldr	r3, [pc, #484]	; (80033bc <shell_thread.lto_priv.47+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 80031d6:	6804      	ldr	r4, [r0, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a79      	ldr	r2, [pc, #484]	; (80033c0 <shell_thread.lto_priv.47+0x1f0>)
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 80031dc:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 80031de:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
 80031e2:	4978      	ldr	r1, [pc, #480]	; (80033c4 <shell_thread.lto_priv.47+0x1f4>)
 80031e4:	4620      	mov	r0, r4
 80031e6:	619a      	str	r2, [r3, #24]
 80031e8:	f7fe fd22 	bl	8001c30 <chprintf.lto_priv.79>
 80031ec:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80031ee:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
 80031f2:	4620      	mov	r0, r4
 80031f4:	4974      	ldr	r1, [pc, #464]	; (80033c8 <shell_thread.lto_priv.47+0x1f8>)
 80031f6:	f7fe fd1b 	bl	8001c30 <chprintf.lto_priv.79>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 80031fa:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	4620      	mov	r0, r4
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f10d 0107 	add.w	r1, sp, #7
 8003206:	2201      	movs	r2, #1
 8003208:	4798      	blx	r3
 800320a:	b370      	cbz	r0, 800326a <shell_thread.lto_priv.47+0x9a>
      return true;
    if (c == 4) {
 800320c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003210:	2904      	cmp	r1, #4
 8003212:	d026      	beq.n	8003262 <shell_thread.lto_priv.47+0x92>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 8003214:	2908      	cmp	r1, #8
 8003216:	d011      	beq.n	800323c <shell_thread.lto_priv.47+0x6c>
 8003218:	297f      	cmp	r1, #127	; 0x7f
 800321a:	d00f      	beq.n	800323c <shell_thread.lto_priv.47+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800321c:	290d      	cmp	r1, #13
 800321e:	d035      	beq.n	800328c <shell_thread.lto_priv.47+0xbc>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 8003220:	291f      	cmp	r1, #31
 8003222:	d9eb      	bls.n	80031fc <shell_thread.lto_priv.47+0x2c>
      continue;
    if (p < line + size - 1) {
 8003224:	42bd      	cmp	r5, r7
 8003226:	d2e9      	bcs.n	80031fc <shell_thread.lto_priv.47+0x2c>
      chSequentialStreamPut(chp, c);
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	4620      	mov	r0, r4
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4798      	blx	r3
      *p++ = (char)c;
 8003230:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003234:	3501      	adds	r5, #1
 8003236:	f805 3c01 	strb.w	r3, [r5, #-1]
 800323a:	e7df      	b.n	80031fc <shell_thread.lto_priv.47+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800323c:	42b5      	cmp	r5, r6
 800323e:	d0dd      	beq.n	80031fc <shell_thread.lto_priv.47+0x2c>
        chSequentialStreamPut(chp, c);
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	4620      	mov	r0, r4
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	4620      	mov	r0, r4
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2120      	movs	r1, #32
 8003250:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	4620      	mov	r0, r4
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800325c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800325e:	4798      	blx	r3
 8003260:	e7cc      	b.n	80031fc <shell_thread.lto_priv.47+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8003262:	4620      	mov	r0, r4
 8003264:	4959      	ldr	r1, [pc, #356]	; (80033cc <shell_thread.lto_priv.47+0x1fc>)
 8003266:	f7fe fce3 	bl	8001c30 <chprintf.lto_priv.79>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nSTech(saagar.tech@gmail.com)\r\n");
  while (true) {
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800326a:	4620      	mov	r0, r4
 800326c:	4958      	ldr	r1, [pc, #352]	; (80033d0 <shell_thread.lto_priv.47+0x200>)
 800326e:	f7fe fcdf 	bl	8001c30 <chprintf.lto_priv.79>
 8003272:	2320      	movs	r3, #32
 8003274:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8003278:	2100      	movs	r1, #0
 800327a:	4856      	ldr	r0, [pc, #344]	; (80033d4 <shell_thread.lto_priv.47+0x204>)
 800327c:	f7fd fdb0 	bl	8000de0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd ff6d 	bl	8001160 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8003286:	b018      	add	sp, #96	; 0x60
 8003288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800328c:	4952      	ldr	r1, [pc, #328]	; (80033d8 <shell_thread.lto_priv.47+0x208>)
 800328e:	4620      	mov	r0, r4
 8003290:	f7fe fcce 	bl	8001c30 <chprintf.lto_priv.79>
      *p = 0;
 8003294:	2300      	movs	r3, #0
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8003296:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8003298:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800329a:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800329c:	461d      	mov	r5, r3
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800329e:	f000 fc07 	bl	8003ab0 <_strtok.constprop.4>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80032a2:	a902      	add	r1, sp, #8
    chprintf(chp, "guest> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80032a4:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80032a6:	2000      	movs	r0, #0
 80032a8:	f10d 090c 	add.w	r9, sp, #12
 80032ac:	f000 fc00 	bl	8003ab0 <_strtok.constprop.4>
 80032b0:	b150      	cbz	r0, 80032c8 <shell_thread.lto_priv.47+0xf8>
      if (n >= SHELL_MAX_ARGUMENTS) {
 80032b2:	2d04      	cmp	r5, #4
 80032b4:	d01d      	beq.n	80032f2 <shell_thread.lto_priv.47+0x122>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80032b6:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80032ba:	a902      	add	r1, sp, #8
 80032bc:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 80032be:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 80032c0:	f000 fbf6 	bl	8003ab0 <_strtok.constprop.4>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d1f4      	bne.n	80032b2 <shell_thread.lto_priv.47+0xe2>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80032c8:	ab18      	add	r3, sp, #96	; 0x60
 80032ca:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80032ce:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80032d2:	f1ba 0f00 	cmp.w	sl, #0
 80032d6:	d08c      	beq.n	80031f2 <shell_thread.lto_priv.47+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 80032d8:	4650      	mov	r0, sl
 80032da:	4940      	ldr	r1, [pc, #256]	; (80033dc <shell_thread.lto_priv.47+0x20c>)
 80032dc:	f000 fc80 	bl	8003be0 <strcasecmp>
 80032e0:	b970      	cbnz	r0, 8003300 <shell_thread.lto_priv.47+0x130>
        if (n > 0) {
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	d0c5      	beq.n	8003272 <shell_thread.lto_priv.47+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80032e6:	4620      	mov	r0, r4
 80032e8:	493d      	ldr	r1, [pc, #244]	; (80033e0 <shell_thread.lto_priv.47+0x210>)
 80032ea:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <shell_thread.lto_priv.47+0x20c>)
 80032ec:	f7fe fca0 	bl	8001c30 <chprintf.lto_priv.79>
 80032f0:	e77f      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80032f2:	4620      	mov	r0, r4
 80032f4:	493b      	ldr	r1, [pc, #236]	; (80033e4 <shell_thread.lto_priv.47+0x214>)
 80032f6:	f7fe fc9b 	bl	8001c30 <chprintf.lto_priv.79>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	9307      	str	r3, [sp, #28]
 80032fe:	e778      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8003300:	4650      	mov	r0, sl
 8003302:	4939      	ldr	r1, [pc, #228]	; (80033e8 <shell_thread.lto_priv.47+0x218>)
 8003304:	f000 fc6c 	bl	8003be0 <strcasecmp>
 8003308:	b930      	cbnz	r0, 8003318 <shell_thread.lto_priv.47+0x148>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800330a:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800330c:	b1c5      	cbz	r5, 8003340 <shell_thread.lto_priv.47+0x170>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800330e:	4934      	ldr	r1, [pc, #208]	; (80033e0 <shell_thread.lto_priv.47+0x210>)
 8003310:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <shell_thread.lto_priv.47+0x218>)
 8003312:	f7fe fc8d 	bl	8001c30 <chprintf.lto_priv.79>
 8003316:	e76c      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <shell_thread.lto_priv.47+0x21c>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4699      	mov	r9, r3
 800331e:	b918      	cbnz	r0, 8003328 <shell_thread.lto_priv.47+0x158>
 8003320:	e031      	b.n	8003386 <shell_thread.lto_priv.47+0x1b6>
 8003322:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8003326:	b370      	cbz	r0, 8003386 <shell_thread.lto_priv.47+0x1b6>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8003328:	4651      	mov	r1, sl
 800332a:	f000 fc59 	bl	8003be0 <strcasecmp>
 800332e:	2800      	cmp	r0, #0
 8003330:	d1f7      	bne.n	8003322 <shell_thread.lto_priv.47+0x152>
      scp->sc_function(chp, argc, argv);
 8003332:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003336:	4629      	mov	r1, r5
 8003338:	aa03      	add	r2, sp, #12
 800333a:	4620      	mov	r0, r4
 800333c:	4798      	blx	r3
 800333e:	e758      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <shell_thread.lto_priv.47+0x220>)
 8003342:	f7fe fc75 	bl	8001c30 <chprintf.lto_priv.79>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <shell_thread.lto_priv.47+0x21c>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	461d      	mov	r5, r3
 800334c:	b13a      	cbz	r2, 800335e <shell_thread.lto_priv.47+0x18e>
    chprintf(chp, "%s ", scp->sc_name);
 800334e:	4620      	mov	r0, r4
 8003350:	4928      	ldr	r1, [pc, #160]	; (80033f4 <shell_thread.lto_priv.47+0x224>)
 8003352:	f7fe fc6d 	bl	8001c30 <chprintf.lto_priv.79>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003356:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800335a:	2a00      	cmp	r2, #0
 800335c:	d1f7      	bne.n	800334e <shell_thread.lto_priv.47+0x17e>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 800335e:	f1b8 0f00 	cmp.w	r8, #0
 8003362:	d00b      	beq.n	800337c <shell_thread.lto_priv.47+0x1ac>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003364:	f8d8 2000 	ldr.w	r2, [r8]
 8003368:	b142      	cbz	r2, 800337c <shell_thread.lto_priv.47+0x1ac>
 800336a:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 800336c:	4620      	mov	r0, r4
 800336e:	4921      	ldr	r1, [pc, #132]	; (80033f4 <shell_thread.lto_priv.47+0x224>)
 8003370:	f7fe fc5e 	bl	8001c30 <chprintf.lto_priv.79>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8003374:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8003378:	2a00      	cmp	r2, #0
 800337a:	d1f7      	bne.n	800336c <shell_thread.lto_priv.47+0x19c>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800337c:	4620      	mov	r0, r4
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <shell_thread.lto_priv.47+0x208>)
 8003380:	f7fe fc56 	bl	8001c30 <chprintf.lto_priv.79>
 8003384:	e735      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8003386:	f1b8 0f00 	cmp.w	r8, #0
 800338a:	d00d      	beq.n	80033a8 <shell_thread.lto_priv.47+0x1d8>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800338c:	f8d8 0000 	ldr.w	r0, [r8]
 8003390:	b150      	cbz	r0, 80033a8 <shell_thread.lto_priv.47+0x1d8>
 8003392:	46c1      	mov	r9, r8
 8003394:	e002      	b.n	800339c <shell_thread.lto_priv.47+0x1cc>
 8003396:	f859 0f08 	ldr.w	r0, [r9, #8]!
 800339a:	b128      	cbz	r0, 80033a8 <shell_thread.lto_priv.47+0x1d8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800339c:	4651      	mov	r1, sl
 800339e:	f000 fc1f 	bl	8003be0 <strcasecmp>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d1f7      	bne.n	8003396 <shell_thread.lto_priv.47+0x1c6>
 80033a6:	e7c4      	b.n	8003332 <shell_thread.lto_priv.47+0x162>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 80033a8:	4652      	mov	r2, sl
 80033aa:	4620      	mov	r0, r4
 80033ac:	4912      	ldr	r1, [pc, #72]	; (80033f8 <shell_thread.lto_priv.47+0x228>)
 80033ae:	f7fe fc3f 	bl	8001c30 <chprintf.lto_priv.79>
        chprintf(chp, " ?\r\n");
 80033b2:	4620      	mov	r0, r4
 80033b4:	4911      	ldr	r1, [pc, #68]	; (80033fc <shell_thread.lto_priv.47+0x22c>)
 80033b6:	f7fe fc3b 	bl	8001c30 <chprintf.lto_priv.79>
 80033ba:	e71a      	b.n	80031f2 <shell_thread.lto_priv.47+0x22>
 80033bc:	20000f20 	.word	0x20000f20
 80033c0:	08004190 	.word	0x08004190
 80033c4:	08004198 	.word	0x08004198
 80033c8:	080041bc 	.word	0x080041bc
 80033cc:	080041c4 	.word	0x080041c4
 80033d0:	08004218 	.word	0x08004218
 80033d4:	20000cd4 	.word	0x20000cd4
 80033d8:	080042a8 	.word	0x080042a8
 80033dc:	080041e0 	.word	0x080041e0
 80033e0:	08003ff0 	.word	0x08003ff0
 80033e4:	080041c8 	.word	0x080041c8
 80033e8:	080041e8 	.word	0x080041e8
 80033ec:	20000828 	.word	0x20000828
 80033f0:	080041f0 	.word	0x080041f0
 80033f4:	08004208 	.word	0x08004208
 80033f8:	0800420c 	.word	0x0800420c
 80033fc:	08004210 	.word	0x08004210

08003400 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8003400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003404:	4681      	mov	r9, r0
 8003406:	468a      	mov	sl, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8003408:	468b      	mov	fp, r1
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800340a:	b087      	sub	sp, #28
 800340c:	4615      	mov	r5, r2
 800340e:	f10d 030d 	add.w	r3, sp, #13
 8003412:	aa03      	add	r2, sp, #12
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8003418:	f04f 0800 	mov.w	r8, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800341c:	f89b 1000 	ldrb.w	r1, [fp]
 8003420:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8003424:	b179      	cbz	r1, 8003446 <chvprintf+0x46>
      return n;
    if (c != '%') {
 8003426:	2925      	cmp	r1, #37	; 0x25
 8003428:	d011      	beq.n	800344e <chvprintf+0x4e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800342a:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800342c:	f8d9 2000 	ldr.w	r2, [r9]
 8003430:	4648      	mov	r0, r9
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8003436:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 800343a:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800343e:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8003442:	2900      	cmp	r1, #0
 8003444:	d1ef      	bne.n	8003426 <chvprintf+0x26>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8003446:	4640      	mov	r0, r8
 8003448:	b007      	add	sp, #28
 800344a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800344e:	f89b 2001 	ldrb.w	r2, [fp, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8003452:	2600      	movs	r6, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8003454:	2a2d      	cmp	r2, #45	; 0x2d
 8003456:	bf03      	ittte	eq
 8003458:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 800345c:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8003460:	f04f 0a01 	moveq.w	sl, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8003464:	f04f 0a00 	movne.w	sl, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8003468:	2a30      	cmp	r2, #48	; 0x30
 800346a:	bf03      	ittte	eq
 800346c:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 800346e:	3301      	addeq	r3, #1
      filler = '0';
 8003470:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8003472:	2720      	movne	r7, #32
 8003474:	1c59      	adds	r1, r3, #1
 8003476:	e006      	b.n	8003486 <chvprintf+0x86>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8003478:	782b      	ldrb	r3, [r5, #0]
 800347a:	3504      	adds	r5, #4
 800347c:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 8003480:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8003484:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003486:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800348e:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8003490:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003494:	d9f2      	bls.n	800347c <chvprintf+0x7c>
        c -= '0';
      else if (c == '*')
 8003496:	2a2a      	cmp	r2, #42	; 0x2a
 8003498:	d0ee      	beq.n	8003478 <chvprintf+0x78>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800349a:	2a2e      	cmp	r2, #46	; 0x2e
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	d043      	beq.n	800352a <chvprintf+0x12a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80034a2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80034a6:	2b4c      	cmp	r3, #76	; 0x4c
 80034a8:	d04e      	beq.n	8003548 <chvprintf+0x148>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80034aa:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 80034ae:	2834      	cmp	r0, #52	; 0x34
 80034b0:	f200 80f6 	bhi.w	80036a0 <chvprintf+0x2a0>
 80034b4:	e8df f010 	tbh	[pc, r0, lsl #1]
 80034b8:	00f400ea 	.word	0x00f400ea
 80034bc:	00f400f4 	.word	0x00f400f4
 80034c0:	00ea00f4 	.word	0x00ea00f4
 80034c4:	00f400f4 	.word	0x00f400f4
 80034c8:	00f400f4 	.word	0x00f400f4
 80034cc:	00e800f4 	.word	0x00e800f4
 80034d0:	00f400f4 	.word	0x00f400f4
 80034d4:	00f400f4 	.word	0x00f400f4
 80034d8:	00dd00f4 	.word	0x00dd00f4
 80034dc:	00f400f4 	.word	0x00f400f4
 80034e0:	00f400f1 	.word	0x00f400f1
 80034e4:	00f400f4 	.word	0x00f400f4
 80034e8:	00f400f4 	.word	0x00f400f4
 80034ec:	00f400f4 	.word	0x00f400f4
 80034f0:	00f400f4 	.word	0x00f400f4
 80034f4:	00a100f4 	.word	0x00a100f4
 80034f8:	00f400ea 	.word	0x00f400ea
 80034fc:	00f400f4 	.word	0x00f400f4
 8003500:	00ea00f4 	.word	0x00ea00f4
 8003504:	00f400f4 	.word	0x00f400f4
 8003508:	00f400f4 	.word	0x00f400f4
 800350c:	00e800f4 	.word	0x00e800f4
 8003510:	00f400f4 	.word	0x00f400f4
 8003514:	007100f4 	.word	0x007100f4
 8003518:	00dd00f4 	.word	0x00dd00f4
 800351c:	00f400f4 	.word	0x00f400f4
 8003520:	00f1      	.short	0x00f1
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8003522:	782b      	ldrb	r3, [r5, #0]
 8003524:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8003526:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800352a:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800352e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8003532:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b09      	cmp	r3, #9
 800353a:	d9f4      	bls.n	8003526 <chvprintf+0x126>
          c -= '0';
        else if (c == '*')
 800353c:	2a2a      	cmp	r2, #42	; 0x2a
 800353e:	d0f0      	beq.n	8003522 <chvprintf+0x122>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003540:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003544:	2b4c      	cmp	r3, #76	; 0x4c
 8003546:	d1b0      	bne.n	80034aa <chvprintf+0xaa>
      is_long = TRUE;
      if (*fmt)
 8003548:	f89b 3000 	ldrb.w	r3, [fp]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a7 	beq.w	80036a0 <chvprintf+0x2a0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003552:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8003556:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800355a:	2a34      	cmp	r2, #52	; 0x34
 800355c:	f200 809f 	bhi.w	800369e <chvprintf+0x29e>
 8003560:	e8df f002 	tbb	[pc, r2]
 8003564:	9d9d9d94 	.word	0x9d9d9d94
 8003568:	9d9d949d 	.word	0x9d9d949d
 800356c:	929d9d9d 	.word	0x929d9d9d
 8003570:	9d9d9d9d 	.word	0x9d9d9d9d
 8003574:	9d9d879d 	.word	0x9d9d879d
 8003578:	9d9d9d9b 	.word	0x9d9d9d9b
 800357c:	9d9d9d9d 	.word	0x9d9d9d9d
 8003580:	4b9d9d9d 	.word	0x4b9d9d9d
 8003584:	9d9d9d94 	.word	0x9d9d9d94
 8003588:	9d9d949d 	.word	0x9d9d949d
 800358c:	929d9d9d 	.word	0x929d9d9d
 8003590:	1b9d9d9d 	.word	0x1b9d9d9d
 8003594:	9d9d879d 	.word	0x9d9d879d
 8003598:	9b          	.byte	0x9b
 8003599:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800359a:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <chvprintf+0x304>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800359e:	3504      	adds	r5, #4
        s = "(null)";
 80035a0:	2c00      	cmp	r4, #0
 80035a2:	bf08      	it	eq
 80035a4:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80035a6:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 80035a8:	2900      	cmp	r1, #0
 80035aa:	f000 8093 	beq.w	80036d4 <chvprintf+0x2d4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8095 	beq.w	80036de <chvprintf+0x2de>
 80035b4:	3901      	subs	r1, #1
 80035b6:	4620      	mov	r0, r4
 80035b8:	e001      	b.n	80035be <chvprintf+0x1be>
 80035ba:	3901      	subs	r1, #1
 80035bc:	d403      	bmi.n	80035c6 <chvprintf+0x1c6>
 80035be:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <chvprintf+0x1ba>
 80035c6:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80035c8:	1a36      	subs	r6, r6, r0
 80035ca:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80035cc:	2720      	movs	r7, #32
 80035ce:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80035d2:	f1ba 0f00 	cmp.w	sl, #0
 80035d6:	d01f      	beq.n	8003618 <chvprintf+0x218>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80035d8:	2b00      	cmp	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	da34      	bge.n	8003648 <chvprintf+0x248>
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80035de:	2e00      	cmp	r6, #0
 80035e0:	f43f af1c 	beq.w	800341c <chvprintf+0x1c>
 80035e4:	4634      	mov	r4, r6
      chSequentialStreamPut(chp, (uint8_t)filler);
 80035e6:	f8d9 3000 	ldr.w	r3, [r9]
 80035ea:	4648      	mov	r0, r9
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4639      	mov	r1, r7
 80035f0:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80035f2:	3c01      	subs	r4, #1
 80035f4:	d1f7      	bne.n	80035e6 <chvprintf+0x1e6>
 80035f6:	44b0      	add	r8, r6
 80035f8:	e710      	b.n	800341c <chvprintf+0x1c>
 80035fa:	9a01      	ldr	r2, [sp, #4]

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80035fc:	682b      	ldr	r3, [r5, #0]
 80035fe:	4610      	mov	r0, r2
 8003600:	f88d 300c 	strb.w	r3, [sp, #12]
 8003604:	3504      	adds	r5, #4
 8003606:	1e53      	subs	r3, r2, #1
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8003608:	2720      	movs	r7, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800360a:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800360c:	1a36      	subs	r6, r6, r0
 800360e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8003612:	f1ba 0f00 	cmp.w	sl, #0
 8003616:	d1df      	bne.n	80035d8 <chvprintf+0x1d8>
 8003618:	9300      	str	r3, [sp, #0]
      width = -width;
 800361a:	f1c6 0a00 	rsb	sl, r6, #0
    if (width < 0) {
 800361e:	f1ba 0f00 	cmp.w	sl, #0
 8003622:	d044      	beq.n	80036ae <chvprintf+0x2ae>
      if (*s == '-' && filler == '0') {
 8003624:	7821      	ldrb	r1, [r4, #0]
 8003626:	292d      	cmp	r1, #45	; 0x2d
 8003628:	d046      	beq.n	80036b8 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 800362a:	4656      	mov	r6, sl
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 800362c:	f8d9 3000 	ldr.w	r3, [r9]
 8003630:	4648      	mov	r0, r9
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4639      	mov	r1, r7
 8003636:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8003638:	3601      	adds	r6, #1
 800363a:	d1f7      	bne.n	800362c <chvprintf+0x22c>
    }
    while (--i >= 0) {
 800363c:	9b00      	ldr	r3, [sp, #0]
 800363e:	ebca 0808 	rsb	r8, sl, r8
 8003642:	2b00      	cmp	r3, #0
 8003644:	f6ff aeea 	blt.w	800341c <chvprintf+0x1c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003648:	f8dd a000 	ldr.w	sl, [sp]
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800364c:	f8d9 3000 	ldr.w	r3, [r9]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003650:	f10a 3aff 	add.w	sl, sl, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4648      	mov	r0, r9
 8003658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365c:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800365e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003662:	d1f3      	bne.n	800364c <chvprintf+0x24c>
 8003664:	9b00      	ldr	r3, [sp, #0]
 8003666:	f108 0801 	add.w	r8, r8, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfa8      	it	ge
 800366e:	4498      	addge	r8, r3
 8003670:	e7b5      	b.n	80035de <chvprintf+0x1de>
 8003672:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003674:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003676:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003678:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800367a:	f000 fa39 	bl	8003af0 <long_to_string_with_divisor.constprop.3>
 800367e:	ab03      	add	r3, sp, #12
 8003680:	1ac0      	subs	r0, r0, r3
 8003682:	1e43      	subs	r3, r0, #1
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003684:	ac03      	add	r4, sp, #12
 8003686:	e7c1      	b.n	800360c <chvprintf+0x20c>
 8003688:	2208      	movs	r2, #8
 800368a:	e7f3      	b.n	8003674 <chvprintf+0x274>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800368c:	6829      	ldr	r1, [r5, #0]
 800368e:	3504      	adds	r5, #4
      if (l < 0) {
 8003690:	2900      	cmp	r1, #0
 8003692:	db2e      	blt.n	80036f2 <chvprintf+0x2f2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003694:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003696:	220a      	movs	r2, #10
 8003698:	e7ef      	b.n	800367a <chvprintf+0x27a>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800369a:	2210      	movs	r2, #16
 800369c:	e7ea      	b.n	8003674 <chvprintf+0x274>
 800369e:	461a      	mov	r2, r3
 80036a0:	9b01      	ldr	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80036a2:	ac03      	add	r4, sp, #12
 80036a4:	4618      	mov	r0, r3
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80036a6:	f88d 200c 	strb.w	r2, [sp, #12]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	e7ae      	b.n	800360c <chvprintf+0x20c>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80036ae:	9b00      	ldr	r3, [sp, #0]
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 80036b0:	4656      	mov	r6, sl
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dac8      	bge.n	8003648 <chvprintf+0x248>
 80036b6:	e6b1      	b.n	800341c <chvprintf+0x1c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80036b8:	2f30      	cmp	r7, #48	; 0x30
 80036ba:	d1b6      	bne.n	800362a <chvprintf+0x22a>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 80036bc:	f8d9 3000 	ldr.w	r3, [r9]
 80036c0:	4648      	mov	r0, r9
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4798      	blx	r3
 80036c6:	9b00      	ldr	r3, [sp, #0]
 80036c8:	3401      	adds	r4, #1
 80036ca:	3b01      	subs	r3, #1
        n++;
 80036cc:	f108 0801 	add.w	r8, r8, #1
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	e7aa      	b.n	800362a <chvprintf+0x22a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80036d4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af6c 	bne.w	80035b6 <chvprintf+0x1b6>
 80036de:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80036e2:	f1ba 0f00 	cmp.w	sl, #0
 80036e6:	d10b      	bne.n	8003700 <chvprintf+0x300>
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2720      	movs	r7, #32
 80036f0:	e793      	b.n	800361a <chvprintf+0x21a>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80036f2:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80036f4:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80036f6:	f88d 300c 	strb.w	r3, [sp, #12]
 80036fa:	f10d 000d 	add.w	r0, sp, #13
 80036fe:	e7ca      	b.n	8003696 <chvprintf+0x296>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003700:	2720      	movs	r7, #32
 8003702:	e76c      	b.n	80035de <chvprintf+0x1de>
 8003704:	08004224 	.word	0x08004224
	...

08003710 <chprintf.lto_priv.77>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8003710:	b40e      	push	{r1, r2, r3}
 8003712:	b500      	push	{lr}
 8003714:	b082      	sub	sp, #8
 8003716:	ab03      	add	r3, sp, #12
 8003718:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800371c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800371e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8003720:	f7ff fe6e 	bl	8003400 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8003724:	b002      	add	sp, #8
 8003726:	f85d eb04 	ldr.w	lr, [sp], #4
 800372a:	b003      	add	sp, #12
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop

08003730 <i2cSniffer.lto_priv.76>:
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
}

static void i2cSniffer(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t address;
  int nDevices;
  uint8_t reg;
  uint8_t data[3]={0,0,0};
 8003734:	2500      	movs	r5, #0
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
}

static void i2cSniffer(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003736:	b085      	sub	sp, #20
  tmo = MS2ST(10);


  (void)argv;

  if (argc > 0) {
 8003738:	42a9      	cmp	r1, r5

static void i2cSniffer(BaseSequentialStream *chp, int argc, char *argv[]) {
  uint8_t address;
  int nDevices;
  uint8_t reg;
  uint8_t data[3]={0,0,0};
 800373a:	f88d 500c 	strb.w	r5, [sp, #12]
 800373e:	f88d 500d 	strb.w	r5, [sp, #13]
 8003742:	f88d 500e 	strb.w	r5, [sp, #14]
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
}

static void i2cSniffer(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003746:	9001      	str	r0, [sp, #4]
  tmo = MS2ST(10);


  (void)argv;

  if (argc > 0) {
 8003748:	dd05      	ble.n	8003756 <i2cSniffer.lto_priv.76+0x26>
    chprintf(chp, "Usage: threads\r\n");
 800374a:	494e      	ldr	r1, [pc, #312]	; (8003884 <i2cSniffer.lto_priv.76+0x154>)
 800374c:	f7ff ffe0 	bl	8003710 <chprintf.lto_priv.77>
  }
  if(0 == nDevices)
  {
    chprintf(chp, "Sorry! No Device found!!! Try another method !!!\r\n");
  }
}
 8003750:	b005      	add	sp, #20
 8003752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "scanning..\r\n");
 8003756:	494c      	ldr	r1, [pc, #304]	; (8003888 <i2cSniffer.lto_priv.76+0x158>)
  nDevices = 0;
  reg = 0x00;
 8003758:	ac04      	add	r4, sp, #16
 800375a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003898 <i2cSniffer.lto_priv.76+0x168>

  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "scanning..\r\n");
 800375e:	f7ff ffd7 	bl	8003710 <chprintf.lto_priv.77>
  nDevices = 0;
 8003762:	462f      	mov	r7, r5
  reg = 0x00;
 8003764:	f804 5d05 	strb.w	r5, [r4, #-5]!
 8003768:	f04f 0901 	mov.w	r9, #1
 800376c:	ad03      	add	r5, sp, #12
 800376e:	2220      	movs	r2, #32
 8003770:	f382 8811 	msr	BASEPRI, r2

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8003774:	2003      	movs	r0, #3

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003776:	ea4f 0349 	mov.w	r3, r9, lsl #1
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800377a:	2100      	movs	r1, #0
 800377c:	f8a8 3020 	strh.w	r3, [r8, #32]
  i2cp->state = I2C_ACTIVE_TX;
 8003780:	f888 0000 	strb.w	r0, [r8]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8003784:	f8c8 1008 	str.w	r1, [r8, #8]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003788:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800378c:	f381 8811 	msr	BASEPRI, r1

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003790:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8003794:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8003798:	f8d0 c000 	ldr.w	ip, [r0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 800379c:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80037a0:	f04f 0b01 	mov.w	fp, #1

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80037a4:	6800      	ldr	r0, [r0, #0]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80037a6:	f8cc 6000 	str.w	r6, [ip]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80037aa:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80037ae:	f8cc 400c 	str.w	r4, [ip, #12]
 80037b2:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80037b6:	f8cc b004 	str.w	fp, [ip, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80037ba:	6006      	str	r6, [r0, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80037bc:	60c5      	str	r5, [r0, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80037be:	f8c0 b004 	str.w	fp, [r0, #4]
 80037c2:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80037c6:	46d6      	mov	lr, sl

  /* Calculating the time window for the timeout on the busy bus condition.*/
  start = osalOsGetSystemTimeX();
  end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);
 80037c8:	f100 0c64 	add.w	ip, r0, #100	; 0x64
 80037cc:	fa1f fc8c 	uxth.w	ip, ip
 80037d0:	fa1f fa80 	uxth.w	sl, r0
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((time - start) < (end - start));
 80037d4:	ebca 0c0c 	rsb	ip, sl, ip
 80037d8:	e001      	b.n	80037de <i2cSniffer.lto_priv.76+0xae>
 80037da:	f381 8811 	msr	BASEPRI, r1
 80037de:	f382 8811 	msr	BASEPRI, r2
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80037e2:	8b18      	ldrh	r0, [r3, #24]
 80037e4:	0786      	lsls	r6, r0, #30
 80037e6:	d402      	bmi.n	80037ee <i2cSniffer.lto_priv.76+0xbe>
 80037e8:	8818      	ldrh	r0, [r3, #0]
 80037ea:	0580      	lsls	r0, r0, #22
 80037ec:	d521      	bpl.n	8003832 <i2cSniffer.lto_priv.76+0x102>
 80037ee:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 80037f2:	b280      	uxth	r0, r0
 80037f4:	ebca 0000 	rsb	r0, sl, r0
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 80037f8:	4560      	cmp	r0, ip
 80037fa:	dbee      	blt.n	80037da <i2cSniffer.lto_priv.76+0xaa>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 80037fc:	2305      	movs	r3, #5
 80037fe:	f888 3000 	strb.w	r3, [r8]
 8003802:	2300      	movs	r3, #0
 8003804:	f383 8811 	msr	BASEPRI, r3
  for(address = 1; address < 127; address++ )
  {
    i2cMasterTransmitTimeout(&I2CD1, address, &reg, 1,data, 1, tmo);
    if(I2C_NO_ERROR == I2CD1.errors)
 8003808:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d032      	beq.n	8003876 <i2cSniffer.lto_priv.76+0x146>
 8003810:	f109 0901 	add.w	r9, r9, #1
    {
      chprintf(chp, "I guess i got the address : %d (dec)\r\n",address);
      nDevices++;
    }
    chThdSleepMilliseconds(2);
 8003814:	2004      	movs	r0, #4
 8003816:	f7fd fe9b 	bl	8001550 <chThdSleep>
    return;
  }
  chprintf(chp, "scanning..\r\n");
  nDevices = 0;
  reg = 0x00;
  for(address = 1; address < 127; address++ )
 800381a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 800381e:	d1a6      	bne.n	800376e <i2cSniffer.lto_priv.76+0x3e>
      chprintf(chp, "I guess i got the address : %d (dec)\r\n",address);
      nDevices++;
    }
    chThdSleepMilliseconds(2);
  }
  if(0 == nDevices)
 8003820:	2f00      	cmp	r7, #0
 8003822:	d195      	bne.n	8003750 <i2cSniffer.lto_priv.76+0x20>
  {
    chprintf(chp, "Sorry! No Device found!!! Try another method !!!\r\n");
 8003824:	9801      	ldr	r0, [sp, #4]
 8003826:	4919      	ldr	r1, [pc, #100]	; (800388c <i2cSniffer.lto_priv.76+0x15c>)
 8003828:	f7ff ff72 	bl	8003710 <chprintf.lto_priv.77>
  }
}
 800382c:	b005      	add	sp, #20
 800382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003832:	889a      	ldrh	r2, [r3, #4]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003834:	4916      	ldr	r1, [pc, #88]	; (8003890 <i2cSniffer.lto_priv.76+0x160>)
 8003836:	b292      	uxth	r2, r2
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	f8d1 e018 	ldr.w	lr, [r1, #24]
 8003840:	809a      	strh	r2, [r3, #4]
  dp->CR1 |= I2C_CR1_START;
 8003842:	881a      	ldrh	r2, [r3, #0]
  }

  *trp = tp;
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003844:	2003      	movs	r0, #3
 8003846:	b292      	uxth	r2, r2
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	801a      	strh	r2, [r3, #0]
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <i2cSniffer.lto_priv.76+0x164>)

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8003850:	2114      	movs	r1, #20
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 8003852:	f8ce 3020 	str.w	r3, [lr, #32]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8003856:	f8c8 e01c 	str.w	lr, [r8, #28]
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800385a:	f7fd fca9 	bl	80011b0 <chSchGoSleepTimeoutS>
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800385e:	3001      	adds	r0, #1
 8003860:	d0cc      	beq.n	80037fc <i2cSniffer.lto_priv.76+0xcc>
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8003862:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <i2cSniffer.lto_priv.76+0x168>)
 8003864:	2302      	movs	r3, #2
 8003866:	7013      	strb	r3, [r2, #0]
 8003868:	2300      	movs	r3, #0
 800386a:	f383 8811 	msr	BASEPRI, r3
  nDevices = 0;
  reg = 0x00;
  for(address = 1; address < 127; address++ )
  {
    i2cMasterTransmitTimeout(&I2CD1, address, &reg, 1,data, 1, tmo);
    if(I2C_NO_ERROR == I2CD1.errors)
 800386e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1cc      	bne.n	8003810 <i2cSniffer.lto_priv.76+0xe0>
    {
      chprintf(chp, "I guess i got the address : %d (dec)\r\n",address);
 8003876:	9801      	ldr	r0, [sp, #4]
 8003878:	4908      	ldr	r1, [pc, #32]	; (800389c <i2cSniffer.lto_priv.76+0x16c>)
 800387a:	464a      	mov	r2, r9
 800387c:	f7ff ff48 	bl	8003710 <chprintf.lto_priv.77>
      nDevices++;
 8003880:	3701      	adds	r7, #1
 8003882:	e7c5      	b.n	8003810 <i2cSniffer.lto_priv.76+0xe0>
 8003884:	0800422c 	.word	0x0800422c
 8003888:	08004240 	.word	0x08004240
 800388c:	08004278 	.word	0x08004278
 8003890:	20000f20 	.word	0x20000f20
 8003894:	20000cf4 	.word	0x20000cf4
 8003898:	20000cd8 	.word	0x20000cd8
 800389c:	08004250 	.word	0x08004250

080038a0 <cmd_mem.lto_priv.75>:
}

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80038a0:	2900      	cmp	r1, #0
 80038a2:	dd02      	ble.n	80038aa <cmd_mem.lto_priv.75+0xa>
    chprintf(chp, "Usage: mem\r\n");
 80038a4:	4901      	ldr	r1, [pc, #4]	; (80038ac <cmd_mem.lto_priv.75+0xc>)
 80038a6:	f7ff bf33 	b.w	8003710 <chprintf.lto_priv.77>
 80038aa:	4770      	bx	lr
 80038ac:	080042ac 	.word	0x080042ac

080038b0 <handleusb2Serial.lto_priv.57>:
 80038b0:	4e11      	ldr	r6, [pc, #68]	; (80038f8 <handleusb2Serial.lto_priv.57+0x48>)
{
  usbchp = arg;
  uint8_t NoData;
  uint8_t index;
  uint16_t buffData[MAX_CB_LEN]={0};
  process_tp = chThdGetSelfX();
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <handleusb2Serial.lto_priv.57+0x4c>)
 80038b4:	69b4      	ldr	r4, [r6, #24]
  i2cStart(&I2CD1, &i2cfg1);
}

static void handleusb2Serial(void *arg)
{
  usbchp = arg;
 80038b6:	4d12      	ldr	r5, [pc, #72]	; (8003900 <handleusb2Serial.lto_priv.57+0x50>)
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);     /* SCK. */
  i2cStart(&I2CD1, &i2cfg1);
}

static void handleusb2Serial(void *arg)
{
 80038b8:	b580      	push	{r7, lr}
  usbchp = arg;
 80038ba:	6028      	str	r0, [r5, #0]
  uint8_t NoData;
  uint8_t index;
  uint16_t buffData[MAX_CB_LEN]={0};
  process_tp = chThdGetSelfX();
 80038bc:	601c      	str	r4, [r3, #0]
 80038be:	2720      	movs	r7, #32
 80038c0:	f387 8811 	msr	BASEPRI, r7
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80038c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80038c6:	f06f 0201 	mvn.w	r2, #1
 80038ca:	07d9      	lsls	r1, r3, #31
 80038cc:	d408      	bmi.n	80038e0 <handleusb2Serial.lto_priv.57+0x30>
    ctp->p_u.ewmask = events;
 80038ce:	2301      	movs	r3, #1
 80038d0:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80038d2:	200a      	movs	r0, #10
 80038d4:	f7fd fbc4 	bl	8001060 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80038d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038da:	f003 0201 	and.w	r2, r3, #1
 80038de:	43d2      	mvns	r2, r2
  }
  ctp->p_epending &= ~m;
 80038e0:	4013      	ands	r3, r2
 80038e2:	2100      	movs	r1, #0
 80038e4:	6363      	str	r3, [r4, #52]	; 0x34
 80038e6:	f381 8811 	msr	BASEPRI, r1
  while(1)
  {
    chEvtWaitAny((eventmask_t) REC_DATA_UART);
    chprintf(usbchp,"Got event REC_DATA_UART");
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <handleusb2Serial.lto_priv.57+0x54>)
 80038ec:	6828      	ldr	r0, [r5, #0]
 80038ee:	f7ff ff0f 	bl	8003710 <chprintf.lto_priv.77>
 80038f2:	69b4      	ldr	r4, [r6, #24]
 80038f4:	e7e4      	b.n	80038c0 <handleusb2Serial.lto_priv.57+0x10>
 80038f6:	bf00      	nop
 80038f8:	20000f20 	.word	0x20000f20
 80038fc:	20000f1c 	.word	0x20000f1c
 8003900:	20000edc 	.word	0x20000edc
 8003904:	080042bc 	.word	0x080042bc
	...

08003910 <chSchWakeupS.constprop.46>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003910:	b470      	push	{r4, r5, r6}
 8003912:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <chSchWakeupS.constprop.46+0x54>)
 8003916:	6881      	ldr	r1, [r0, #8]
 8003918:	699d      	ldr	r5, [r3, #24]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800391a:	2600      	movs	r6, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800391c:	68a8      	ldr	r0, [r5, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800391e:	6226      	str	r6, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003920:	4281      	cmp	r1, r0
 8003922:	d80b      	bhi.n	800393c <chSchWakeupS.constprop.46+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8003924:	7726      	strb	r6, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003926:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	4291      	cmp	r1, r2
 800392c:	d9fb      	bls.n	8003926 <chSchWakeupS.constprop.46+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800392e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8003930:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003932:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tp;
 8003934:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8003936:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8003938:	bc70      	pop	{r4, r5, r6}
 800393a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 800393c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800393e:	772e      	strb	r6, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8003940:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8003942:	6891      	ldr	r1, [r2, #8]
 8003944:	4288      	cmp	r0, r1
 8003946:	d9fb      	bls.n	8003940 <chSchWakeupS.constprop.46+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003948:	6850      	ldr	r0, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800394a:	2601      	movs	r6, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800394c:	6068      	str	r0, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800394e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8003950:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8003952:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8003954:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8003956:	4629      	mov	r1, r5
 8003958:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800395a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800395c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800395e:	f7fc bc4f 	b.w	8000200 <_port_switch>
 8003962:	bf00      	nop
 8003964:	20000f20 	.word	0x20000f20
	...

08003970 <chTMStartMeasurementX.constprop.43>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <chTMStartMeasurementX.constprop.43+0x8>)
 8003972:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8003974:	6083      	str	r3, [r0, #8]
 8003976:	4770      	bx	lr
 8003978:	e0001000 	.word	0xe0001000
 800397c:	00000000 	.word	0x00000000

08003980 <chThdCreateFromHeap.constprop.38>:
 *                      the thread into the working space area.
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
 8003980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
 8003984:	1dc4      	adds	r4, r0, #7
 8003986:	461f      	mov	r7, r3
 8003988:	4605      	mov	r5, r0
 800398a:	460e      	mov	r6, r1
 800398c:	4690      	mov	r8, r2
 800398e:	f024 0407 	bic.w	r4, r4, #7
 8003992:	2320      	movs	r3, #32
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	483f      	ldr	r0, [pc, #252]	; (8003a98 <chThdCreateFromHeap.constprop.38+0x118>)
 800399a:	f7fd fb79 	bl	8001090 <chMtxLockS>
 800399e:	2300      	movs	r3, #0
 80039a0:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->h_free;
 80039a4:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <chThdCreateFromHeap.constprop.38+0x11c>)
 80039a6:	e003      	b.n	80039b0 <chThdCreateFromHeap.constprop.38+0x30>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80039a8:	6842      	ldr	r2, [r0, #4]
 80039aa:	4294      	cmp	r4, r2
 80039ac:	d950      	bls.n	8003a50 <chThdCreateFromHeap.constprop.38+0xd0>
 80039ae:	4603      	mov	r3, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d1f8      	bne.n	80039a8 <chThdCreateFromHeap.constprop.38+0x28>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 80039b6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003aa4 <chThdCreateFromHeap.constprop.38+0x124>
 80039ba:	f109 0010 	add.w	r0, r9, #16
 80039be:	f7fd fb17 	bl	8000ff0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 80039c2:	f8d9 3000 	ldr.w	r3, [r9]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d05f      	beq.n	8003a8a <chThdCreateFromHeap.constprop.38+0x10a>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 80039ca:	f104 0008 	add.w	r0, r4, #8
 80039ce:	4798      	blx	r3
    if (hp != NULL) {
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d05a      	beq.n	8003a8a <chThdCreateFromHeap.constprop.38+0x10a>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 80039d4:	6044      	str	r4, [r0, #4]
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 80039d6:	f8c0 9000 	str.w	r9, [r0]
      hp->h.size = size;
      hp++;
 80039da:	f100 0408 	add.w	r4, r0, #8
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 80039de:	2c00      	cmp	r4, #0
 80039e0:	d056      	beq.n	8003a90 <chThdCreateFromHeap.constprop.38+0x110>
 80039e2:	2320      	movs	r3, #32
 80039e4:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <chThdCreateFromHeap.constprop.38+0x120>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80039ea:	f1a5 0024 	sub.w	r0, r5, #36	; 0x24
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80039ee:	f8d3 c014 	ldr.w	ip, [r3, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80039f2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8003aa8 <chThdCreateFromHeap.constprop.38+0x128>
 80039f6:	1822      	adds	r2, r4, r0
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80039f8:	2500      	movs	r5, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80039fa:	f04f 0e01 	mov.w	lr, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80039fe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003a02:	f04f 0a02 	mov.w	sl, #2
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8003a06:	f104 0924 	add.w	r9, r4, #36	; 0x24

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003a0a:	60e2      	str	r2, [r4, #12]
 8003a0c:	f844 8000 	str.w	r8, [r4, r0]
 8003a10:	6057      	str	r7, [r2, #4]
 8003a12:	f8c2 b020 	str.w	fp, [r2, #32]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8003a16:	4620      	mov	r0, r4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8003a18:	60a6      	str	r6, [r4, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003a1a:	6123      	str	r3, [r4, #16]
 8003a1c:	f8c4 c014 	str.w	ip, [r4, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8003a20:	63e6      	str	r6, [r4, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003a22:	f884 a01c 	strb.w	sl, [r4, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8003a26:	63a5      	str	r5, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8003a28:	6365      	str	r5, [r4, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8003a2a:	61a5      	str	r5, [r4, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003a2c:	f884 e01e 	strb.w	lr, [r4, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003a30:	f8cc 4010 	str.w	r4, [ip, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003a34:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8003a38:	f884 e01d 	strb.w	lr, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8003a3c:	62a1      	str	r1, [r4, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8003a3e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003a40:	615c      	str	r4, [r3, #20]
  chSchWakeupS(tp, MSG_OK);
 8003a42:	f7ff ff65 	bl	8003910 <chSchWakeupS.constprop.46>
 8003a46:	f385 8811 	msr	BASEPRI, r5
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 8003a50:	f104 0e08 	add.w	lr, r4, #8
 8003a54:	4596      	cmp	lr, r2
 8003a56:	d909      	bls.n	8003a6c <chThdCreateFromHeap.constprop.38+0xec>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8003a58:	6802      	ldr	r2, [r0, #0]
 8003a5a:	601a      	str	r2, [r3, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <chThdCreateFromHeap.constprop.38+0x124>)
 8003a60:	f844 0b08 	str.w	r0, [r4], #8
      H_UNLOCK(heapp);
 8003a64:	3010      	adds	r0, #16
 8003a66:	f7fd fac3 	bl	8000ff0 <chMtxUnlock>
 8003a6a:	e7b8      	b.n	80039de <chThdCreateFromHeap.constprop.38+0x5e>
 8003a6c:	f06f 0c07 	mvn.w	ip, #7
 8003a70:	ebc4 0c0c 	rsb	ip, r4, ip
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003a74:	4494      	add	ip, r2
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003a76:	6802      	ldr	r2, [r0, #0]
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8003a78:	eb00 010e 	add.w	r1, r0, lr
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 8003a7c:	f840 200e 	str.w	r2, [r0, lr]
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 8003a80:	f8c1 c004 	str.w	ip, [r1, #4]
        qp->h.u.next = fp;
 8003a84:	6019      	str	r1, [r3, #0]
        hp->h.size = size;
 8003a86:	6044      	str	r4, [r0, #4]
 8003a88:	e7e8      	b.n	8003a5c <chThdCreateFromHeap.constprop.38+0xdc>
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
    return NULL;
 8003a8a:	2000      	movs	r0, #0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
  chSysUnlock();

  return tp;
}
 8003a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
    return NULL;
 8003a90:	4620      	mov	r0, r4
 8003a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a96:	bf00      	nop
 8003a98:	20001080 	.word	0x20001080
 8003a9c:	20001078 	.word	0x20001078
 8003aa0:	20000f20 	.word	0x20000f20
 8003aa4:	20001070 	.word	0x20001070
 8003aa8:	08000211 	.word	0x08000211
 8003aac:	00000000 	.word	0x00000000

08003ab0 <_strtok.constprop.4>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	460d      	mov	r5, r1
  char *token;
  if (str)
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	b190      	cbz	r0, 8003ade <_strtok.constprop.4+0x2e>
    *saveptr = str;
 8003ab8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 8003aba:	4620      	mov	r0, r4
 8003abc:	490b      	ldr	r1, [pc, #44]	; (8003aec <_strtok.constprop.4+0x3c>)
 8003abe:	f000 f8d7 	bl	8003c70 <strspn>
 8003ac2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4909      	ldr	r1, [pc, #36]	; (8003aec <_strtok.constprop.4+0x3c>)
 8003ac8:	f000 f8aa 	bl	8003c20 <strpbrk>
  if (*saveptr)
 8003acc:	b160      	cbz	r0, 8003ae8 <_strtok.constprop.4+0x38>
    *(*saveptr)++ = '\0';
 8003ace:	1c42      	adds	r2, r0, #1
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	602a      	str	r2, [r5, #0]
 8003ad4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8003ad6:	7823      	ldrb	r3, [r4, #0]
 8003ad8:	b123      	cbz	r3, 8003ae4 <_strtok.constprop.4+0x34>
 8003ada:	4620      	mov	r0, r4
}
 8003adc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8003ade:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8003ae0:	2c00      	cmp	r4, #0
 8003ae2:	d1ea      	bne.n	8003aba <_strtok.constprop.4+0xa>
    return NULL;
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8003ae8:	6028      	str	r0, [r5, #0]
 8003aea:	e7f4      	b.n	8003ad6 <_strtok.constprop.4+0x26>
 8003aec:	08004380 	.word	0x08004380

08003af0 <long_to_string_with_divisor.constprop.3>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8003af0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8003af2:	f100 070b 	add.w	r7, r0, #11
 8003af6:	463c      	mov	r4, r7
 8003af8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8003afa:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8003afe:	fbb5 f5f2 	udiv	r5, r5, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8003b02:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8003b06:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8003b0a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8003b0c:	bfc8      	it	gt
 8003b0e:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
 8003b18:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	d1ed      	bne.n	8003afa <long_to_string_with_divisor.constprop.3+0xa>

  i = (int)(p + MAX_FILLER - q);
 8003b1e:	1b3a      	subs	r2, r7, r4
 8003b20:	4402      	add	r2, r0
 8003b22:	e001      	b.n	8003b28 <long_to_string_with_divisor.constprop.3+0x38>
 8003b24:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8003b28:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8003b2c:	4290      	cmp	r0, r2
 8003b2e:	d1f9      	bne.n	8003b24 <long_to_string_with_divisor.constprop.3+0x34>

  return p;
}
 8003b30:	bcf0      	pop	{r4, r5, r6, r7}
 8003b32:	4770      	bx	lr
	...

08003b40 <memset>:
 8003b40:	b470      	push	{r4, r5, r6}
 8003b42:	0784      	lsls	r4, r0, #30
 8003b44:	d046      	beq.n	8003bd4 <memset+0x94>
 8003b46:	1e54      	subs	r4, r2, #1
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d041      	beq.n	8003bd0 <memset+0x90>
 8003b4c:	b2cd      	uxtb	r5, r1
 8003b4e:	4603      	mov	r3, r0
 8003b50:	e002      	b.n	8003b58 <memset+0x18>
 8003b52:	1e62      	subs	r2, r4, #1
 8003b54:	b3e4      	cbz	r4, 8003bd0 <memset+0x90>
 8003b56:	4614      	mov	r4, r2
 8003b58:	f803 5b01 	strb.w	r5, [r3], #1
 8003b5c:	079a      	lsls	r2, r3, #30
 8003b5e:	d1f8      	bne.n	8003b52 <memset+0x12>
 8003b60:	2c03      	cmp	r4, #3
 8003b62:	d92e      	bls.n	8003bc2 <memset+0x82>
 8003b64:	b2cd      	uxtb	r5, r1
 8003b66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b6a:	2c0f      	cmp	r4, #15
 8003b6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b70:	d919      	bls.n	8003ba6 <memset+0x66>
 8003b72:	4626      	mov	r6, r4
 8003b74:	f103 0210 	add.w	r2, r3, #16
 8003b78:	3e10      	subs	r6, #16
 8003b7a:	2e0f      	cmp	r6, #15
 8003b7c:	f842 5c10 	str.w	r5, [r2, #-16]
 8003b80:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003b84:	f842 5c08 	str.w	r5, [r2, #-8]
 8003b88:	f842 5c04 	str.w	r5, [r2, #-4]
 8003b8c:	f102 0210 	add.w	r2, r2, #16
 8003b90:	d8f2      	bhi.n	8003b78 <memset+0x38>
 8003b92:	f1a4 0210 	sub.w	r2, r4, #16
 8003b96:	f022 020f 	bic.w	r2, r2, #15
 8003b9a:	f004 040f 	and.w	r4, r4, #15
 8003b9e:	3210      	adds	r2, #16
 8003ba0:	2c03      	cmp	r4, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	d90d      	bls.n	8003bc2 <memset+0x82>
 8003ba6:	461e      	mov	r6, r3
 8003ba8:	4622      	mov	r2, r4
 8003baa:	3a04      	subs	r2, #4
 8003bac:	2a03      	cmp	r2, #3
 8003bae:	f846 5b04 	str.w	r5, [r6], #4
 8003bb2:	d8fa      	bhi.n	8003baa <memset+0x6a>
 8003bb4:	1f22      	subs	r2, r4, #4
 8003bb6:	f022 0203 	bic.w	r2, r2, #3
 8003bba:	3204      	adds	r2, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f004 0403 	and.w	r4, r4, #3
 8003bc2:	b12c      	cbz	r4, 8003bd0 <memset+0x90>
 8003bc4:	b2c9      	uxtb	r1, r1
 8003bc6:	441c      	add	r4, r3
 8003bc8:	f803 1b01 	strb.w	r1, [r3], #1
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d1fb      	bne.n	8003bc8 <memset+0x88>
 8003bd0:	bc70      	pop	{r4, r5, r6}
 8003bd2:	4770      	bx	lr
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e7c2      	b.n	8003b60 <memset+0x20>
 8003bda:	bf00      	nop
 8003bdc:	0000      	movs	r0, r0
	...

08003be0 <strcasecmp>:
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <strcasecmp+0x3c>)
 8003be2:	b430      	push	{r4, r5}
 8003be4:	681d      	ldr	r5, [r3, #0]
 8003be6:	e002      	b.n	8003bee <strcasecmp+0xe>
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	d114      	bne.n	8003c16 <strcasecmp+0x36>
 8003bec:	b19a      	cbz	r2, 8003c16 <strcasecmp+0x36>
 8003bee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bf2:	18ea      	adds	r2, r5, r3
 8003bf4:	7852      	ldrb	r2, [r2, #1]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	2a01      	cmp	r2, #1
 8003bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c00:	bf08      	it	eq
 8003c02:	3320      	addeq	r3, #32
 8003c04:	18ac      	adds	r4, r5, r2
 8003c06:	7864      	ldrb	r4, [r4, #1]
 8003c08:	f004 0403 	and.w	r4, r4, #3
 8003c0c:	2c01      	cmp	r4, #1
 8003c0e:	d1eb      	bne.n	8003be8 <strcasecmp+0x8>
 8003c10:	3220      	adds	r2, #32
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	d0eb      	beq.n	8003bee <strcasecmp+0xe>
 8003c16:	4618      	mov	r0, r3
 8003c18:	bc30      	pop	{r4, r5}
 8003c1a:	4770      	bx	lr
 8003c1c:	20000840 	.word	0x20000840

08003c20 <strpbrk>:
 8003c20:	b430      	push	{r4, r5}
 8003c22:	7804      	ldrb	r4, [r0, #0]
 8003c24:	b1ec      	cbz	r4, 8003c62 <strpbrk+0x42>
 8003c26:	780d      	ldrb	r5, [r1, #0]
 8003c28:	b1ad      	cbz	r5, 8003c56 <strpbrk+0x36>
 8003c2a:	42ac      	cmp	r4, r5
 8003c2c:	d00e      	beq.n	8003c4c <strpbrk+0x2c>
 8003c2e:	460a      	mov	r2, r1
 8003c30:	e001      	b.n	8003c36 <strpbrk+0x16>
 8003c32:	429c      	cmp	r4, r3
 8003c34:	d009      	beq.n	8003c4a <strpbrk+0x2a>
 8003c36:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f9      	bne.n	8003c32 <strpbrk+0x12>
 8003c3e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003c42:	2c00      	cmp	r4, #0
 8003c44:	d1f0      	bne.n	8003c28 <strpbrk+0x8>
 8003c46:	7815      	ldrb	r5, [r2, #0]
 8003c48:	e000      	b.n	8003c4c <strpbrk+0x2c>
 8003c4a:	4625      	mov	r5, r4
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	bf08      	it	eq
 8003c50:	2000      	moveq	r0, #0
 8003c52:	bc30      	pop	{r4, r5}
 8003c54:	4770      	bx	lr
 8003c56:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	2c00      	cmp	r4, #0
 8003c5e:	d1e3      	bne.n	8003c28 <strpbrk+0x8>
 8003c60:	e7f1      	b.n	8003c46 <strpbrk+0x26>
 8003c62:	4620      	mov	r0, r4
 8003c64:	bc30      	pop	{r4, r5}
 8003c66:	4770      	bx	lr
	...

08003c70 <strspn>:
 8003c70:	b470      	push	{r4, r5, r6}
 8003c72:	7804      	ldrb	r4, [r0, #0]
 8003c74:	b1a4      	cbz	r4, 8003ca0 <strspn+0x30>
 8003c76:	4605      	mov	r5, r0
 8003c78:	780e      	ldrb	r6, [r1, #0]
 8003c7a:	b14e      	cbz	r6, 8003c90 <strspn+0x20>
 8003c7c:	42b4      	cmp	r4, r6
 8003c7e:	d00a      	beq.n	8003c96 <strspn+0x26>
 8003c80:	460a      	mov	r2, r1
 8003c82:	e001      	b.n	8003c88 <strspn+0x18>
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d006      	beq.n	8003c96 <strspn+0x26>
 8003c88:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f9      	bne.n	8003c84 <strspn+0x14>
 8003c90:	1a28      	subs	r0, r5, r0
 8003c92:	bc70      	pop	{r4, r5, r6}
 8003c94:	4770      	bx	lr
 8003c96:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8003c9a:	2c00      	cmp	r4, #0
 8003c9c:	d1ed      	bne.n	8003c7a <strspn+0xa>
 8003c9e:	e7f7      	b.n	8003c90 <strspn+0x20>
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	e7f6      	b.n	8003c92 <strspn+0x22>
	...

08003cb0 <zero_status>:
	...

08003cc0 <active_status>:
	...

08003cd0 <halted_status>:
 8003cd0:	0001 0000 0000 0000 0000 0000 0000 0000     ................

08003ce0 <cfgtab.7105>:
 8003ce0:	0204 0804 0008 0703 0808 0808 0808 0808     ................
 8003cf0:	0f0b 0000 0000 0000 0000 0000 0000 0000     ................
 8003d00:	4d44 2041 6166 6c69 7275 0065 0000 0000     DMA failure.....

08003d10 <ep0config>:
 8003d10:	0000 0000 0751 0800 0661 0800 0411 0800     ....Q...a.......
 8003d20:	0040 0040 0848 2000 0848 2000 0001 0000     @.@.H.. H.. ....
 8003d30:	085c 2000 0000 0000 0000 0000 0000 0000     \.. ............

08003d40 <CSWTCH.32>:
 8003d40:	0400 0000 0600 0000 0000 0000 0000 0000     ................

08003d50 <adcgrpcfg2>:
 8003d50:	0001 0008 2f81 0800 2f71 0800 0000 0000     ...../..q/......
 8003d60:	0000 0080 0024 00fc 0000 0000 0000 0070     ....$.........p.
 8003d70:	0211 0000 a96a 16a5 0000 0000 0000 0000     ....j...........

08003d80 <vmt>:
 8003d80:	13b1 0800 14d1 0800 1431 0800 1541 0800     ........1...A...
 8003d90:	1421 0800 1531 0800 13a1 0800 14c1 0800     !...1...........

08003da0 <serusbcfg>:
 8003da0:	0884 2000 0101 0002 0000 0000 0000 0000     ... ............

08003db0 <_stm32_dma_streams>:
 8003db0:	0008 4002 0004 4002 0000 000b 001c 4002     ...@...@.......@
 8003dc0:	0004 4002 0104 000c 0030 4002 0004 4002     ...@....0..@...@
 8003dd0:	0208 000d 0044 4002 0004 4002 030c 000e     ....D..@...@....
 8003de0:	0058 4002 0004 4002 0410 000f 006c 4002     X..@...@....l..@
 8003df0:	0004 4002 0514 0010 0080 4002 0004 4002     ...@.......@...@
 8003e00:	0618 0011 0000 0000 0000 0000 0000 0000     ................

08003e10 <usbcfg>:
 8003e10:	2fe1 0800 2f41 0800 02c1 0800 0000 0000     ./..A/..........

08003e20 <ch_debug>:
 8003e20:	616d 6e69 1600 1801 0204 0844 100c 1814     main......D.....
 8003e30:	1c00 1e1d 0000 0000 0000 0000 0000 0000     ................
 8003e40:	6c62 6e69 656b 0072 7355 6761 3a65 7720     blinker.Usage: w
 8003e50:	6972 6574 0a0d 0000 756f 2074 666f 6d20     rite....out of m
 8003e60:	6d65 726f 0d79 000a 7355 6761 3a65 7420     emory...Usage: t
 8003e70:	7365 0d74 000a 0000 6469 656c 0000 0000     est.....idle....
 8003e80:	7453 7261 6974 676e 2e2e 0d2e 000a 0000     Starting........
 8003e90:	656d 006d 6969 0063 6461 5f63 6177 6374     mem.iic.adc_watc
 8003ea0:	0068 0000 6573 6972 6c61 0000 0000 0000     h...serial......

08003eb0 <commands>:
 8003eb0:	3e90 0800 38a1 0800 3e94 0800 3731 0800     .>...8...>..17..
 8003ec0:	3e98 0800 2361 0800 3ea4 0800 2321 0800     .>..a#...>..!#..
	...

08003ee0 <shell_cfg1>:
 8003ee0:	0a10 2000 3eb0 0800 0000 0000 0000 0000     ... .>..........

08003ef0 <i2cfg1>:
 8003ef0:	0001 0000 86a0 0001 0001 0000 0000 0000     ................

08003f00 <ep1config>:
 8003f00:	0002 0000 0000 0000 0e91 0800 0e11 0800     ................
 8003f10:	0040 0040 0ee0 2000 0f00 2000 0002 0000     @.@.... ... ....
	...

08003f30 <vcom_string0>:
 8003f30:	0304 0409 0000 0000 0000 0000 0000 0000     ................

08003f40 <vcom_configuration_descriptor>:
 8003f40:	0043 0000 3fa0 0800 0000 0000 0000 0000     C....?..........

08003f50 <ep2config>:
 8003f50:	0003 0000 0000 0000 02b1 0800 0000 0000     ................
 8003f60:	0010 0000 0ef0 2000 0000 0000 0001 0000     ....... ........
	...

08003f80 <vcom_device_descriptor_data>:
 8003f80:	0112 0110 0002 4000 1eaf 0004 0200 0201     .......@........
 8003f90:	0103 0000 0000 0000 0000 0000 0000 0000     ................

08003fa0 <vcom_configuration_descriptor_data>:
 8003fa0:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
 8003fb0:	0001 2405 1000 0501 0124 0100 2404 0202     ...$....$....$..
 8003fc0:	2405 0006 0701 8205 0803 ff00 0409 0001     .$..............
 8003fd0:	0a02 0000 0700 0105 4002 0000 0507 0281     .........@......
 8003fe0:	0040 0000 0000 0000 0000 0000 0000 0000     @...............
 8003ff0:	7355 6761 3a65 2520 0d73 000a 7973 7473     Usage: %s...syst
 8004000:	6d69 0065 6c25 0d75 000a 0000 6e69 6f66     ime.%lu.....info
 8004010:	0000 0000 654b 6e72 6c65 203a 2020 2020     ....Kernel:     
 8004020:	2020 7325 0a0d 0000 2e33 2e30 0031 0000       %s....3.0.1...
 8004030:	6f43 706d 6c69 7265 203a 2020 2020 7325     Compiler:     %s
 8004040:	0a0d 0000 4347 2043 2e34 2e39 2033 3032     ....GCC 4.9.3 20
 8004050:	3531 3530 3932 2820 6572 656c 7361 2965     150529 (release)
 8004060:	5b20 5241 2f4d 6d65 6562 6464 6465 342d      [ARM/embedded-4
 8004070:	395f 622d 6172 636e 2068 6572 6976 6973     _9-branch revisi
 8004080:	6e6f 3220 3732 3739 5d37 0000 7241 6863     on 227977]..Arch
 8004090:	7469 6365 7574 6572 203a 7325 0a0d 0000     itecture: %s....
 80040a0:	5241 764d 2d37 004d 6f43 6572 5620 7261     ARMv7-M.Core Var
 80040b0:	6169 746e 203a 7325 0a0d 0000 6f43 7472     iant: %s....Cort
 80040c0:	7865 4d2d 0033 0000 6f50 7472 4920 666e     ex-M3...Port Inf
 80040d0:	3a6f 2020 2020 7325 0a0d 0000 6441 6176     o:    %s....Adva
 80040e0:	636e 6465 6b20 7265 656e 206c 6f6d 6564     nced kernel mode
 80040f0:	0000 0000 6c50 7461 6f66 6d72 203a 2020     ....Platform:   
 8004100:	2020 7325 0a0d 0000 5453 334d 4632 3031       %s....STM32F10
 8004110:	2078 6550 6672 726f 616d 636e 2065 694c     x Performance Li
 8004120:	656e 4d20 6465 7569 206d 6544 736e 7469     ne Medium Densit
 8004130:	0079 0000 6f42 7261 3a64 2020 2020 2020     y...Board:      
 8004140:	2020 7325 0a0d 0000 654c 6661 614c 7362       %s....LeafLabs
 8004150:	4d20 7061 656c 4d20 6e69 0069 7542 6c69      Maple Mini.Buil
 8004160:	2064 6974 656d 203a 2020 7325 7325 7325     d time:   %s%s%s
 8004170:	0a0d 0000 6f4e 2076 3131 3220 3130 0037     ....Nov 11 2017.
 8004180:	2d20 0020 3231 353a 3a30 3630 0000 0000      - .12:50:06....
 8004190:	6873 6c65 006c 0000 0a0d 5453 6365 2868     shell.....STech(
 80041a0:	6173 6761 7261 742e 6365 4068 6d67 6961     saagar.tech@gmai
 80041b0:	2e6c 6f63 296d 0a0d 0000 0000 7567 7365     l.com)......gues
 80041c0:	3e74 0020 445e 0000 6f74 206f 616d 796e     t> .^D..too many
 80041d0:	6120 6772 6d75 6e65 7374 0a0d 0000 0000      arguments......
 80041e0:	7865 7469 0000 0000 6568 706c 0000 0000     exit....help....
 80041f0:	6f43 6d6d 6e61 7364 203a 6568 706c 6520     Commands: help e
 8004200:	6978 2074 0000 0000 7325 0020 7325 0000     xit ....%s .%s..
 8004210:	3f20 0a0d 0000 0000 0a0d 6f6c 6f67 7475      ?........logout
 8004220:	0000 0000 6e28 6c75 296c 0000 7355 6761     ....(null)..Usag
 8004230:	3a65 7420 7268 6165 7364 0a0d 0000 0000     e: threads......
 8004240:	6373 6e61 696e 676e 2e2e 0a0d 0000 0000     scanning........
 8004250:	2049 7567 7365 2073 2069 6f67 2074 6874     I guess i got th
 8004260:	2065 6461 7264 7365 2073 203a 6425 2820     e address : %d (
 8004270:	6564 2963 0a0d 0000 6f53 7272 2179 4e20     dec)....Sorry! N
 8004280:	206f 6544 6976 6563 6620 756f 646e 2121     o Device found!!
 8004290:	2021 7254 2079 6e61 746f 6568 2072 656d     ! Try another me
 80042a0:	6874 646f 2120 2121 0a0d 0000 7355 6761     thod !!!....Usag
 80042b0:	3a65 6d20 6d65 0a0d 0000 0000 6f47 2074     e: mem......Got 
 80042c0:	7665 6e65 2074 4552 5f43 4144 4154 555f     event REC_DATA_U
 80042d0:	5241 0054 0000 0000 0000 0000 0000 0000     ART.............

080042e0 <vcom_string1>:
 80042e0:	0312 004c 0065 0061 0066 004c 0061 0062     ..L.e.a.f.L.a.b.
 80042f0:	0073 0000 0000 0000 0000 0000 0000 0000     s...............

08004300 <vcom_string2>:
 8004300:	0338 0043 0068 0069 0062 0069 004f 0053     8.C.h.i.b.i.O.S.
 8004310:	002f 0052 0054 0020 0056 0069 0072 0074     /.R.T. .V.i.r.t.
 8004320:	0075 0061 006c 0020 0043 004f 004d 0020     u.a.l. .C.O.M. .
 8004330:	0050 006f 0072 0074 0000 0000 0000 0000     P.o.r.t.........

08004340 <vcom_string3>:
 8004340:	0308 0033 0030 0031 0000 0000 0000 0000     ..3.0.1.........

08004350 <vcom_strings>:
 8004350:	0004 0000 3f30 0800 0012 0000 42e0 0800     ....0?.......B..
 8004360:	0038 0000 4300 0800 0008 0000 4340 0800     8....C......@C..

08004370 <vcom_device_descriptor>:
 8004370:	0012 0000 3f80 0800 0000 0000 0000 0000     .....?..........
 8004380:	0920 0000 0000 0000 0000 0000 0000 0000      ...............

08004390 <_ctype_>:
 8004390:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80043a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80043b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80043c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80043d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80043e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80043f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8004400:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8004410:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
